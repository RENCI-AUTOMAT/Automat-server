[__main__.<module>] - 2020-04-26 22:45:36,586 main.py 12 INFO: [0] Starting web server
[automat.core.handle_request] - 2020-04-26 22:45:40,968 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-04-26 22:45:41,118 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-04-26 22:45:41,121 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-04-26 22:45:41,145 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-26 22:45:41,202 core.py 122 DEBUG: ['favicon-16x16.png']
[__main__.<module>] - 2020-04-26 23:07:21,190 main.py 21 INFO: [0] Webserver listening at 0.0.0.0:8090
[__main__.<module>] - 2020-04-26 23:11:49,264 main.py 12 INFO: [0] Starting web server
[__main__.<module>] - 2020-04-26 23:13:04,780 main.py 21 INFO: [0] Webserver listening at 0.0.0.0:8090
[__main__.<module>] - 2020-04-26 23:13:08,494 main.py 12 INFO: [0] Starting web server
[automat.core.handle_request] - 2020-04-26 23:13:11,651 core.py 122 DEBUG: ['heartbeat']
[__main__.<module>] - 2020-04-26 23:16:04,911 main.py 21 INFO: [0] Webserver listening at 0.0.0.0:8090
[__main__.<module>] - 2020-04-26 23:17:13,988 main.py 12 INFO: [0] Starting web server
[automat.core.handle_request] - 2020-04-26 23:17:18,333 core.py 122 DEBUG: ['heartbeat']
[__main__.<module>] - 2020-04-26 23:18:17,504 main.py 21 INFO: [0] Webserver listening at 0.0.0.0:8090
[__main__.<module>] - 2020-04-26 23:18:20,365 main.py 12 INFO: [0] Starting web server
[automat.core.handle_request] - 2020-04-26 23:18:25,615 core.py 122 DEBUG: ['heartbeat']
[__main__.<module>] - 2020-04-26 23:19:31,342 main.py 21 INFO: [0] Webserver listening at 0.0.0.0:8090
[__main__.<module>] - 2020-04-26 23:19:35,001 main.py 12 INFO: [0] Starting web server
[automat.core.handle_request] - 2020-04-26 23:19:38,188 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:19:43,392 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-04-26 23:19:43,629 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-04-26 23:19:43,631 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-04-26 23:19:43,637 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-26 23:19:43,654 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.get_swagger_paths] - 2020-04-26 23:19:45,925 core.py 204 DEBUG: {'openapi': '3.0.2', 'info': {'title': 'PLATER - my_plater'}, 'paths': {'/named_thing/{curie}': {'get': {'description': 'Returns `named_thing` based on `curie`.', 'summary': 'Find named_thing by curie.', 'operationId': 'get_named_thing_by_curie', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of named_thing that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'synonyms': [], 'id': 'SOURCE:10', 'equivalent_identifiers': ['SOURCE:10']}]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/named_thing/named_thing/{curie}': {'get': {'description': 'Returns one hop paths from named_thing with `curie` to target type named_thing.', 'summary': 'Get one hop results from named_thing to named_thing.', 'operationId': 'get_one_hop_named_thing_to_named_thing', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of named_thing that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'id': 'SOURCE:10', 'equivalent_identifiers': ['SOURCE:10']}, {'relation_label': 'affects', 'predicate_id': 'SEMMEDDB:AFFECTS', 'edge_source': 'stress_tester', 'ctime': 'now', 'id': 'ea03ad62a88f7776f2b6620f495a201d', 'source_database': 'stress_tester', 'publications': [], 'relation': 'RO:0000052'}, {'synonyms': [], 'id': 'TARGER:10', 'equivalent_identifiers': ['TARGER:10']}]]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/named_thing/chemical_substance/{curie}': {'get': {'description': 'Returns one hop paths from named_thing with `curie` to target type chemical_substance.', 'summary': 'Get one hop results from named_thing to chemical_substance.', 'operationId': 'get_one_hop_named_thing_to_chemical_substance', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of named_thing that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'id': 'SOURCE:10', 'equivalent_identifiers': ['SOURCE:10']}, {'relation_label': 'affects', 'predicate_id': 'SEMMEDDB:AFFECTS', 'edge_source': 'stress_tester', 'ctime': 'now', 'id': 'ea03ad62a88f7776f2b6620f495a201d', 'source_database': 'stress_tester', 'publications': [], 'relation': 'RO:0000052'}, {'synonyms': [], 'id': 'TARGER:10', 'equivalent_identifiers': ['TARGER:10']}]]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/named_thing/gene/{curie}': {'get': {'description': 'Returns one hop paths from named_thing with `curie` to target type gene.', 'summary': 'Get one hop results from named_thing to gene.', 'operationId': 'get_one_hop_named_thing_to_gene', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of named_thing that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/named_thing/molecular_entity/{curie}': {'get': {'description': 'Returns one hop paths from named_thing with `curie` to target type molecular_entity.', 'summary': 'Get one hop results from named_thing to molecular_entity.', 'operationId': 'get_one_hop_named_thing_to_molecular_entity', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of named_thing that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/named_thing/biological_entity/{curie}': {'get': {'description': 'Returns one hop paths from named_thing with `curie` to target type biological_entity.', 'summary': 'Get one hop results from named_thing to biological_entity.', 'operationId': 'get_one_hop_named_thing_to_biological_entity', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of named_thing that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'RALGAPA1', 'id': 'NCBIGene:253959', 'equivalent_identifiers': ['NCBIGene:253959', 'ENSEMBL:ENSG00000174373', 'HGNC:17770', 'NCBIGene:253959', 'UniProtKB:Q6GYQ0']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.0856352, 'id': '94ae41bee1bd664b0bb858655f903392', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/named_thing/disease_or_phenotypic_feature/{curie}': {'get': {'description': 'Returns one hop paths from named_thing with `curie` to target type disease_or_phenotypic_feature.', 'summary': 'Get one hop results from named_thing to disease_or_phenotypic_feature.', 'operationId': 'get_one_hop_named_thing_to_disease_or_phenotypic_feature', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of named_thing that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'RALGAPA1', 'id': 'NCBIGene:253959', 'equivalent_identifiers': ['NCBIGene:253959', 'ENSEMBL:ENSG00000174373', 'HGNC:17770', 'NCBIGene:253959', 'UniProtKB:Q6GYQ0']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.0856352, 'id': '94ae41bee1bd664b0bb858655f903392', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/named_thing/disease/{curie}': {'get': {'description': 'Returns one hop paths from named_thing with `curie` to target type disease.', 'summary': 'Get one hop results from named_thing to disease.', 'operationId': 'get_one_hop_named_thing_to_disease', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of named_thing that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'RALGAPA1', 'id': 'NCBIGene:253959', 'equivalent_identifiers': ['NCBIGene:253959', 'ENSEMBL:ENSG00000174373', 'HGNC:17770', 'NCBIGene:253959', 'UniProtKB:Q6GYQ0']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.0856352, 'id': '94ae41bee1bd664b0bb858655f903392', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/named_thing/macromolecular_machine/{curie}': {'get': {'description': 'Returns one hop paths from named_thing with `curie` to target type macromolecular_machine.', 'summary': 'Get one hop results from named_thing to macromolecular_machine.', 'operationId': 'get_one_hop_named_thing_to_macromolecular_machine', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of named_thing that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/named_thing/genomic_entity/{curie}': {'get': {'description': 'Returns one hop paths from named_thing with `curie` to target type genomic_entity.', 'summary': 'Get one hop results from named_thing to genomic_entity.', 'operationId': 'get_one_hop_named_thing_to_genomic_entity', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of named_thing that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/named_thing/gene_or_gene_product/{curie}': {'get': {'description': 'Returns one hop paths from named_thing with `curie` to target type gene_or_gene_product.', 'summary': 'Get one hop results from named_thing to gene_or_gene_product.', 'operationId': 'get_one_hop_named_thing_to_gene_or_gene_product', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of named_thing that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/chemical_substance/{curie}': {'get': {'description': 'Returns `chemical_substance` based on `curie`.', 'summary': 'Find chemical_substance by curie.', 'operationId': 'get_chemical_substance_by_curie', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of chemical_substance that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'synonyms': [], 'id': 'SOURCE:10', 'equivalent_identifiers': ['SOURCE:10']}]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/chemical_substance/named_thing/{curie}': {'get': {'description': 'Returns one hop paths from chemical_substance with `curie` to target type named_thing.', 'summary': 'Get one hop results from chemical_substance to named_thing.', 'operationId': 'get_one_hop_chemical_substance_to_named_thing', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of chemical_substance that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'id': 'SOURCE:10', 'equivalent_identifiers': ['SOURCE:10']}, {'relation_label': 'affects', 'predicate_id': 'SEMMEDDB:AFFECTS', 'edge_source': 'stress_tester', 'ctime': 'now', 'id': 'ea03ad62a88f7776f2b6620f495a201d', 'source_database': 'stress_tester', 'publications': [], 'relation': 'RO:0000052'}, {'synonyms': [], 'id': 'TARGER:10', 'equivalent_identifiers': ['TARGER:10']}]]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/chemical_substance/chemical_substance/{curie}': {'get': {'description': 'Returns one hop paths from chemical_substance with `curie` to target type chemical_substance.', 'summary': 'Get one hop results from chemical_substance to chemical_substance.', 'operationId': 'get_one_hop_chemical_substance_to_chemical_substance', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of chemical_substance that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'id': 'SOURCE:10', 'equivalent_identifiers': ['SOURCE:10']}, {'relation_label': 'affects', 'predicate_id': 'SEMMEDDB:AFFECTS', 'edge_source': 'stress_tester', 'ctime': 'now', 'id': 'ea03ad62a88f7776f2b6620f495a201d', 'source_database': 'stress_tester', 'publications': [], 'relation': 'RO:0000052'}, {'synonyms': [], 'id': 'TARGER:10', 'equivalent_identifiers': ['TARGER:10']}]]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/gene/{curie}': {'get': {'description': 'Returns `gene` based on `curie`.', 'summary': 'Find gene by curie.', 'operationId': 'get_gene_by_curie', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of gene that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'synonyms': [], 'name': 'BST2', 'id': 'NCBIGene:684', 'equivalent_identifiers': ['HGNC:1119', 'UniProtKB:Q10589', 'ENSEMBL:ENSG00000130303', 'NCBIGene:684', 'NCBIGene:684']}]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/gene/biological_entity/{curie}': {'get': {'description': 'Returns one hop paths from gene with `curie` to target type biological_entity.', 'summary': 'Get one hop results from gene to biological_entity.', 'operationId': 'get_one_hop_gene_to_biological_entity', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of gene that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'BST2', 'id': 'NCBIGene:684', 'equivalent_identifiers': ['HGNC:1119', 'UniProtKB:Q10589', 'ENSEMBL:ENSG00000130303', 'NCBIGene:684', 'NCBIGene:684']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.070162, 'id': '0417d8a3cf6e3e6eb4a175391141e8d1', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/gene/named_thing/{curie}': {'get': {'description': 'Returns one hop paths from gene with `curie` to target type named_thing.', 'summary': 'Get one hop results from gene to named_thing.', 'operationId': 'get_one_hop_gene_to_named_thing', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of gene that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'BST2', 'id': 'NCBIGene:684', 'equivalent_identifiers': ['HGNC:1119', 'UniProtKB:Q10589', 'ENSEMBL:ENSG00000130303', 'NCBIGene:684', 'NCBIGene:684']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.070162, 'id': '0417d8a3cf6e3e6eb4a175391141e8d1', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/gene/disease_or_phenotypic_feature/{curie}': {'get': {'description': 'Returns one hop paths from gene with `curie` to target type disease_or_phenotypic_feature.', 'summary': 'Get one hop results from gene to disease_or_phenotypic_feature.', 'operationId': 'get_one_hop_gene_to_disease_or_phenotypic_feature', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of gene that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'RALGAPA1', 'id': 'NCBIGene:253959', 'equivalent_identifiers': ['NCBIGene:253959', 'ENSEMBL:ENSG00000174373', 'HGNC:17770', 'NCBIGene:253959', 'UniProtKB:Q6GYQ0']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.0856352, 'id': '94ae41bee1bd664b0bb858655f903392', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/gene/disease/{curie}': {'get': {'description': 'Returns one hop paths from gene with `curie` to target type disease.', 'summary': 'Get one hop results from gene to disease.', 'operationId': 'get_one_hop_gene_to_disease', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of gene that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'RALGAPA1', 'id': 'NCBIGene:253959', 'equivalent_identifiers': ['NCBIGene:253959', 'ENSEMBL:ENSG00000174373', 'HGNC:17770', 'NCBIGene:253959', 'UniProtKB:Q6GYQ0']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.0856352, 'id': '94ae41bee1bd664b0bb858655f903392', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/biological_entity/{curie}': {'get': {'description': 'Returns `biological_entity` based on `curie`.', 'summary': 'Find biological_entity by curie.', 'operationId': 'get_biological_entity_by_curie', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of biological_entity that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/biological_entity/gene/{curie}': {'get': {'description': 'Returns one hop paths from biological_entity with `curie` to target type gene.', 'summary': 'Get one hop results from biological_entity to gene.', 'operationId': 'get_one_hop_biological_entity_to_gene', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of biological_entity that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/biological_entity/molecular_entity/{curie}': {'get': {'description': 'Returns one hop paths from biological_entity with `curie` to target type molecular_entity.', 'summary': 'Get one hop results from biological_entity to molecular_entity.', 'operationId': 'get_one_hop_biological_entity_to_molecular_entity', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of biological_entity that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/biological_entity/biological_entity/{curie}': {'get': {'description': 'Returns one hop paths from biological_entity with `curie` to target type biological_entity.', 'summary': 'Get one hop results from biological_entity to biological_entity.', 'operationId': 'get_one_hop_biological_entity_to_biological_entity', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of biological_entity that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'RALGAPA1', 'id': 'NCBIGene:253959', 'equivalent_identifiers': ['NCBIGene:253959', 'ENSEMBL:ENSG00000174373', 'HGNC:17770', 'NCBIGene:253959', 'UniProtKB:Q6GYQ0']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.0856352, 'id': '94ae41bee1bd664b0bb858655f903392', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/biological_entity/named_thing/{curie}': {'get': {'description': 'Returns one hop paths from biological_entity with `curie` to target type named_thing.', 'summary': 'Get one hop results from biological_entity to named_thing.', 'operationId': 'get_one_hop_biological_entity_to_named_thing', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of biological_entity that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'BST2', 'id': 'NCBIGene:684', 'equivalent_identifiers': ['HGNC:1119', 'UniProtKB:Q10589', 'ENSEMBL:ENSG00000130303', 'NCBIGene:684', 'NCBIGene:684']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.070162, 'id': '0417d8a3cf6e3e6eb4a175391141e8d1', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/biological_entity/disease_or_phenotypic_feature/{curie}': {'get': {'description': 'Returns one hop paths from biological_entity with `curie` to target type disease_or_phenotypic_feature.', 'summary': 'Get one hop results from biological_entity to disease_or_phenotypic_feature.', 'operationId': 'get_one_hop_biological_entity_to_disease_or_phenotypic_feature', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of biological_entity that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'RALGAPA1', 'id': 'NCBIGene:253959', 'equivalent_identifiers': ['NCBIGene:253959', 'ENSEMBL:ENSG00000174373', 'HGNC:17770', 'NCBIGene:253959', 'UniProtKB:Q6GYQ0']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.0856352, 'id': '94ae41bee1bd664b0bb858655f903392', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/biological_entity/disease/{curie}': {'get': {'description': 'Returns one hop paths from biological_entity with `curie` to target type disease.', 'summary': 'Get one hop results from biological_entity to disease.', 'operationId': 'get_one_hop_biological_entity_to_disease', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of biological_entity that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'RALGAPA1', 'id': 'NCBIGene:253959', 'equivalent_identifiers': ['NCBIGene:253959', 'ENSEMBL:ENSG00000174373', 'HGNC:17770', 'NCBIGene:253959', 'UniProtKB:Q6GYQ0']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.0856352, 'id': '94ae41bee1bd664b0bb858655f903392', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/biological_entity/macromolecular_machine/{curie}': {'get': {'description': 'Returns one hop paths from biological_entity with `curie` to target type macromolecular_machine.', 'summary': 'Get one hop results from biological_entity to macromolecular_machine.', 'operationId': 'get_one_hop_biological_entity_to_macromolecular_machine', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of biological_entity that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/biological_entity/genomic_entity/{curie}': {'get': {'description': 'Returns one hop paths from biological_entity with `curie` to target type genomic_entity.', 'summary': 'Get one hop results from biological_entity to genomic_entity.', 'operationId': 'get_one_hop_biological_entity_to_genomic_entity', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of biological_entity that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/biological_entity/gene_or_gene_product/{curie}': {'get': {'description': 'Returns one hop paths from biological_entity with `curie` to target type gene_or_gene_product.', 'summary': 'Get one hop results from biological_entity to gene_or_gene_product.', 'operationId': 'get_one_hop_biological_entity_to_gene_or_gene_product', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of biological_entity that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/disease_or_phenotypic_feature/{curie}': {'get': {'description': 'Returns `disease_or_phenotypic_feature` based on `curie`.', 'summary': 'Find disease_or_phenotypic_feature by curie.', 'operationId': 'get_disease_or_phenotypic_feature_by_curie', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of disease_or_phenotypic_feature that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/disease_or_phenotypic_feature/gene/{curie}': {'get': {'description': 'Returns one hop paths from disease_or_phenotypic_feature with `curie` to target type gene.', 'summary': 'Get one hop results from disease_or_phenotypic_feature to gene.', 'operationId': 'get_one_hop_disease_or_phenotypic_feature_to_gene', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of disease_or_phenotypic_feature that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/disease_or_phenotypic_feature/molecular_entity/{curie}': {'get': {'description': 'Returns one hop paths from disease_or_phenotypic_feature with `curie` to target type molecular_entity.', 'summary': 'Get one hop results from disease_or_phenotypic_feature to molecular_entity.', 'operationId': 'get_one_hop_disease_or_phenotypic_feature_to_molecular_entity', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of disease_or_phenotypic_feature that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/disease_or_phenotypic_feature/biological_entity/{curie}': {'get': {'description': 'Returns one hop paths from disease_or_phenotypic_feature with `curie` to target type biological_entity.', 'summary': 'Get one hop results from disease_or_phenotypic_feature to biological_entity.', 'operationId': 'get_one_hop_disease_or_phenotypic_feature_to_biological_entity', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of disease_or_phenotypic_feature that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/disease_or_phenotypic_feature/named_thing/{curie}': {'get': {'description': 'Returns one hop paths from disease_or_phenotypic_feature with `curie` to target type named_thing.', 'summary': 'Get one hop results from disease_or_phenotypic_feature to named_thing.', 'operationId': 'get_one_hop_disease_or_phenotypic_feature_to_named_thing', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of disease_or_phenotypic_feature that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/disease_or_phenotypic_feature/macromolecular_machine/{curie}': {'get': {'description': 'Returns one hop paths from disease_or_phenotypic_feature with `curie` to target type macromolecular_machine.', 'summary': 'Get one hop results from disease_or_phenotypic_feature to macromolecular_machine.', 'operationId': 'get_one_hop_disease_or_phenotypic_feature_to_macromolecular_machine', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of disease_or_phenotypic_feature that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/disease_or_phenotypic_feature/genomic_entity/{curie}': {'get': {'description': 'Returns one hop paths from disease_or_phenotypic_feature with `curie` to target type genomic_entity.', 'summary': 'Get one hop results from disease_or_phenotypic_feature to genomic_entity.', 'operationId': 'get_one_hop_disease_or_phenotypic_feature_to_genomic_entity', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of disease_or_phenotypic_feature that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/disease_or_phenotypic_feature/gene_or_gene_product/{curie}': {'get': {'description': 'Returns one hop paths from disease_or_phenotypic_feature with `curie` to target type gene_or_gene_product.', 'summary': 'Get one hop results from disease_or_phenotypic_feature to gene_or_gene_product.', 'operationId': 'get_one_hop_disease_or_phenotypic_feature_to_gene_or_gene_product', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of disease_or_phenotypic_feature that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/disease/{curie}': {'get': {'description': 'Returns `disease` based on `curie`.', 'summary': 'Find disease by curie.', 'operationId': 'get_disease_by_curie', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of disease that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/disease/gene/{curie}': {'get': {'description': 'Returns one hop paths from disease with `curie` to target type gene.', 'summary': 'Get one hop results from disease to gene.', 'operationId': 'get_one_hop_disease_to_gene', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of disease that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/disease/molecular_entity/{curie}': {'get': {'description': 'Returns one hop paths from disease with `curie` to target type molecular_entity.', 'summary': 'Get one hop results from disease to molecular_entity.', 'operationId': 'get_one_hop_disease_to_molecular_entity', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of disease that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/disease/biological_entity/{curie}': {'get': {'description': 'Returns one hop paths from disease with `curie` to target type biological_entity.', 'summary': 'Get one hop results from disease to biological_entity.', 'operationId': 'get_one_hop_disease_to_biological_entity', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of disease that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/disease/named_thing/{curie}': {'get': {'description': 'Returns one hop paths from disease with `curie` to target type named_thing.', 'summary': 'Get one hop results from disease to named_thing.', 'operationId': 'get_one_hop_disease_to_named_thing', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of disease that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/disease/macromolecular_machine/{curie}': {'get': {'description': 'Returns one hop paths from disease with `curie` to target type macromolecular_machine.', 'summary': 'Get one hop results from disease to macromolecular_machine.', 'operationId': 'get_one_hop_disease_to_macromolecular_machine', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of disease that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/disease/genomic_entity/{curie}': {'get': {'description': 'Returns one hop paths from disease with `curie` to target type genomic_entity.', 'summary': 'Get one hop results from disease to genomic_entity.', 'operationId': 'get_one_hop_disease_to_genomic_entity', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of disease that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/disease/gene_or_gene_product/{curie}': {'get': {'description': 'Returns one hop paths from disease with `curie` to target type gene_or_gene_product.', 'summary': 'Get one hop results from disease to gene_or_gene_product.', 'operationId': 'get_one_hop_disease_to_gene_or_gene_product', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of disease that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/molecular_entity/{curie}': {'get': {'description': 'Returns `molecular_entity` based on `curie`.', 'summary': 'Find molecular_entity by curie.', 'operationId': 'get_molecular_entity_by_curie', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of molecular_entity that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'synonyms': [], 'name': 'BST2', 'id': 'NCBIGene:684', 'equivalent_identifiers': ['HGNC:1119', 'UniProtKB:Q10589', 'ENSEMBL:ENSG00000130303', 'NCBIGene:684', 'NCBIGene:684']}]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/molecular_entity/biological_entity/{curie}': {'get': {'description': 'Returns one hop paths from molecular_entity with `curie` to target type biological_entity.', 'summary': 'Get one hop results from molecular_entity to biological_entity.', 'operationId': 'get_one_hop_molecular_entity_to_biological_entity', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of molecular_entity that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'BST2', 'id': 'NCBIGene:684', 'equivalent_identifiers': ['HGNC:1119', 'UniProtKB:Q10589', 'ENSEMBL:ENSG00000130303', 'NCBIGene:684', 'NCBIGene:684']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.070162, 'id': '0417d8a3cf6e3e6eb4a175391141e8d1', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/molecular_entity/named_thing/{curie}': {'get': {'description': 'Returns one hop paths from molecular_entity with `curie` to target type named_thing.', 'summary': 'Get one hop results from molecular_entity to named_thing.', 'operationId': 'get_one_hop_molecular_entity_to_named_thing', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of molecular_entity that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'BST2', 'id': 'NCBIGene:684', 'equivalent_identifiers': ['HGNC:1119', 'UniProtKB:Q10589', 'ENSEMBL:ENSG00000130303', 'NCBIGene:684', 'NCBIGene:684']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.070162, 'id': '0417d8a3cf6e3e6eb4a175391141e8d1', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/molecular_entity/disease_or_phenotypic_feature/{curie}': {'get': {'description': 'Returns one hop paths from molecular_entity with `curie` to target type disease_or_phenotypic_feature.', 'summary': 'Get one hop results from molecular_entity to disease_or_phenotypic_feature.', 'operationId': 'get_one_hop_molecular_entity_to_disease_or_phenotypic_feature', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of molecular_entity that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'RALGAPA1', 'id': 'NCBIGene:253959', 'equivalent_identifiers': ['NCBIGene:253959', 'ENSEMBL:ENSG00000174373', 'HGNC:17770', 'NCBIGene:253959', 'UniProtKB:Q6GYQ0']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.0856352, 'id': '94ae41bee1bd664b0bb858655f903392', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/molecular_entity/disease/{curie}': {'get': {'description': 'Returns one hop paths from molecular_entity with `curie` to target type disease.', 'summary': 'Get one hop results from molecular_entity to disease.', 'operationId': 'get_one_hop_molecular_entity_to_disease', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of molecular_entity that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'RALGAPA1', 'id': 'NCBIGene:253959', 'equivalent_identifiers': ['NCBIGene:253959', 'ENSEMBL:ENSG00000174373', 'HGNC:17770', 'NCBIGene:253959', 'UniProtKB:Q6GYQ0']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.0856352, 'id': '94ae41bee1bd664b0bb858655f903392', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/macromolecular_machine/{curie}': {'get': {'description': 'Returns `macromolecular_machine` based on `curie`.', 'summary': 'Find macromolecular_machine by curie.', 'operationId': 'get_macromolecular_machine_by_curie', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of macromolecular_machine that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'synonyms': [], 'name': 'BST2', 'id': 'NCBIGene:684', 'equivalent_identifiers': ['HGNC:1119', 'UniProtKB:Q10589', 'ENSEMBL:ENSG00000130303', 'NCBIGene:684', 'NCBIGene:684']}]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/macromolecular_machine/biological_entity/{curie}': {'get': {'description': 'Returns one hop paths from macromolecular_machine with `curie` to target type biological_entity.', 'summary': 'Get one hop results from macromolecular_machine to biological_entity.', 'operationId': 'get_one_hop_macromolecular_machine_to_biological_entity', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of macromolecular_machine that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'BST2', 'id': 'NCBIGene:684', 'equivalent_identifiers': ['HGNC:1119', 'UniProtKB:Q10589', 'ENSEMBL:ENSG00000130303', 'NCBIGene:684', 'NCBIGene:684']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.070162, 'id': '0417d8a3cf6e3e6eb4a175391141e8d1', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/macromolecular_machine/named_thing/{curie}': {'get': {'description': 'Returns one hop paths from macromolecular_machine with `curie` to target type named_thing.', 'summary': 'Get one hop results from macromolecular_machine to named_thing.', 'operationId': 'get_one_hop_macromolecular_machine_to_named_thing', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of macromolecular_machine that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'BST2', 'id': 'NCBIGene:684', 'equivalent_identifiers': ['HGNC:1119', 'UniProtKB:Q10589', 'ENSEMBL:ENSG00000130303', 'NCBIGene:684', 'NCBIGene:684']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.070162, 'id': '0417d8a3cf6e3e6eb4a175391141e8d1', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/macromolecular_machine/disease_or_phenotypic_feature/{curie}': {'get': {'description': 'Returns one hop paths from macromolecular_machine with `curie` to target type disease_or_phenotypic_feature.', 'summary': 'Get one hop results from macromolecular_machine to disease_or_phenotypic_feature.', 'operationId': 'get_one_hop_macromolecular_machine_to_disease_or_phenotypic_feature', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of macromolecular_machine that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'RALGAPA1', 'id': 'NCBIGene:253959', 'equivalent_identifiers': ['NCBIGene:253959', 'ENSEMBL:ENSG00000174373', 'HGNC:17770', 'NCBIGene:253959', 'UniProtKB:Q6GYQ0']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.0856352, 'id': '94ae41bee1bd664b0bb858655f903392', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/macromolecular_machine/disease/{curie}': {'get': {'description': 'Returns one hop paths from macromolecular_machine with `curie` to target type disease.', 'summary': 'Get one hop results from macromolecular_machine to disease.', 'operationId': 'get_one_hop_macromolecular_machine_to_disease', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of macromolecular_machine that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'RALGAPA1', 'id': 'NCBIGene:253959', 'equivalent_identifiers': ['NCBIGene:253959', 'ENSEMBL:ENSG00000174373', 'HGNC:17770', 'NCBIGene:253959', 'UniProtKB:Q6GYQ0']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.0856352, 'id': '94ae41bee1bd664b0bb858655f903392', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/genomic_entity/{curie}': {'get': {'description': 'Returns `genomic_entity` based on `curie`.', 'summary': 'Find genomic_entity by curie.', 'operationId': 'get_genomic_entity_by_curie', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of genomic_entity that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'synonyms': [], 'name': 'BST2', 'id': 'NCBIGene:684', 'equivalent_identifiers': ['HGNC:1119', 'UniProtKB:Q10589', 'ENSEMBL:ENSG00000130303', 'NCBIGene:684', 'NCBIGene:684']}]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/genomic_entity/biological_entity/{curie}': {'get': {'description': 'Returns one hop paths from genomic_entity with `curie` to target type biological_entity.', 'summary': 'Get one hop results from genomic_entity to biological_entity.', 'operationId': 'get_one_hop_genomic_entity_to_biological_entity', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of genomic_entity that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'BST2', 'id': 'NCBIGene:684', 'equivalent_identifiers': ['HGNC:1119', 'UniProtKB:Q10589', 'ENSEMBL:ENSG00000130303', 'NCBIGene:684', 'NCBIGene:684']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.070162, 'id': '0417d8a3cf6e3e6eb4a175391141e8d1', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/genomic_entity/named_thing/{curie}': {'get': {'description': 'Returns one hop paths from genomic_entity with `curie` to target type named_thing.', 'summary': 'Get one hop results from genomic_entity to named_thing.', 'operationId': 'get_one_hop_genomic_entity_to_named_thing', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of genomic_entity that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'BST2', 'id': 'NCBIGene:684', 'equivalent_identifiers': ['HGNC:1119', 'UniProtKB:Q10589', 'ENSEMBL:ENSG00000130303', 'NCBIGene:684', 'NCBIGene:684']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.070162, 'id': '0417d8a3cf6e3e6eb4a175391141e8d1', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/genomic_entity/disease_or_phenotypic_feature/{curie}': {'get': {'description': 'Returns one hop paths from genomic_entity with `curie` to target type disease_or_phenotypic_feature.', 'summary': 'Get one hop results from genomic_entity to disease_or_phenotypic_feature.', 'operationId': 'get_one_hop_genomic_entity_to_disease_or_phenotypic_feature', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of genomic_entity that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'RALGAPA1', 'id': 'NCBIGene:253959', 'equivalent_identifiers': ['NCBIGene:253959', 'ENSEMBL:ENSG00000174373', 'HGNC:17770', 'NCBIGene:253959', 'UniProtKB:Q6GYQ0']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.0856352, 'id': '94ae41bee1bd664b0bb858655f903392', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/genomic_entity/disease/{curie}': {'get': {'description': 'Returns one hop paths from genomic_entity with `curie` to target type disease.', 'summary': 'Get one hop results from genomic_entity to disease.', 'operationId': 'get_one_hop_genomic_entity_to_disease', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of genomic_entity that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'RALGAPA1', 'id': 'NCBIGene:253959', 'equivalent_identifiers': ['NCBIGene:253959', 'ENSEMBL:ENSG00000174373', 'HGNC:17770', 'NCBIGene:253959', 'UniProtKB:Q6GYQ0']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.0856352, 'id': '94ae41bee1bd664b0bb858655f903392', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/gene_or_gene_product/{curie}': {'get': {'description': 'Returns `gene_or_gene_product` based on `curie`.', 'summary': 'Find gene_or_gene_product by curie.', 'operationId': 'get_gene_or_gene_product_by_curie', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of gene_or_gene_product that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'synonyms': [], 'name': 'BST2', 'id': 'NCBIGene:684', 'equivalent_identifiers': ['HGNC:1119', 'UniProtKB:Q10589', 'ENSEMBL:ENSG00000130303', 'NCBIGene:684', 'NCBIGene:684']}]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/gene_or_gene_product/biological_entity/{curie}': {'get': {'description': 'Returns one hop paths from gene_or_gene_product with `curie` to target type biological_entity.', 'summary': 'Get one hop results from gene_or_gene_product to biological_entity.', 'operationId': 'get_one_hop_gene_or_gene_product_to_biological_entity', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of gene_or_gene_product that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'BST2', 'id': 'NCBIGene:684', 'equivalent_identifiers': ['HGNC:1119', 'UniProtKB:Q10589', 'ENSEMBL:ENSG00000130303', 'NCBIGene:684', 'NCBIGene:684']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.070162, 'id': '0417d8a3cf6e3e6eb4a175391141e8d1', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/gene_or_gene_product/named_thing/{curie}': {'get': {'description': 'Returns one hop paths from gene_or_gene_product with `curie` to target type named_thing.', 'summary': 'Get one hop results from gene_or_gene_product to named_thing.', 'operationId': 'get_one_hop_gene_or_gene_product_to_named_thing', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of gene_or_gene_product that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'BST2', 'id': 'NCBIGene:684', 'equivalent_identifiers': ['HGNC:1119', 'UniProtKB:Q10589', 'ENSEMBL:ENSG00000130303', 'NCBIGene:684', 'NCBIGene:684']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.070162, 'id': '0417d8a3cf6e3e6eb4a175391141e8d1', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/gene_or_gene_product/disease_or_phenotypic_feature/{curie}': {'get': {'description': 'Returns one hop paths from gene_or_gene_product with `curie` to target type disease_or_phenotypic_feature.', 'summary': 'Get one hop results from gene_or_gene_product to disease_or_phenotypic_feature.', 'operationId': 'get_one_hop_gene_or_gene_product_to_disease_or_phenotypic_feature', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of gene_or_gene_product that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'RALGAPA1', 'id': 'NCBIGene:253959', 'equivalent_identifiers': ['NCBIGene:253959', 'ENSEMBL:ENSG00000174373', 'HGNC:17770', 'NCBIGene:253959', 'UniProtKB:Q6GYQ0']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.0856352, 'id': '94ae41bee1bd664b0bb858655f903392', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/gene_or_gene_product/disease/{curie}': {'get': {'description': 'Returns one hop paths from gene_or_gene_product with `curie` to target type disease.', 'summary': 'Get one hop results from gene_or_gene_product to disease.', 'operationId': 'get_one_hop_gene_or_gene_product_to_disease', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of gene_or_gene_product that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'RALGAPA1', 'id': 'NCBIGene:253959', 'equivalent_identifiers': ['NCBIGene:253959', 'ENSEMBL:ENSG00000174373', 'HGNC:17770', 'NCBIGene:253959', 'UniProtKB:Q6GYQ0']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.0856352, 'id': '94ae41bee1bd664b0bb858655f903392', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/graph/schema': {'get': {'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_graph_schema', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/cypher': {'post': {'summary': 'Run cypher query.', 'description': 'Runs cypher query against the Neo4j instance, and returns an equivalent response exepected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).', 'requestBody': {'description': 'Cypher query.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query': 'MATCH (c) return c limit 1'}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'results': [{'columns': ['c'], 'data': [{'row': [{'synonyms': [], 'id': 'SOURCE:10', 'equivalent_identifiers': ['SOURCE:10']}], 'meta': [{'id': 198107, 'type': 'node', 'deleted': False}]}]}], 'errors': []}}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/reasonerapi': {'get': {'description': 'Returns a list of question templates that can be used to query this plater instance/', 'operationId': 'get_question_templates', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}]}}}}}, 'tags': [{'name': 'my_plater'}]}, 'post': {'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_question', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/simple_spec': {'get': {'description': 'Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.', 'operationId': 'get_simple_spec', 'parameters': [{'name': 'source', 'in': 'query', 'description': 'The curie of source that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'CHEBI:33216'}}, {'name': 'target', 'in': 'query', 'description': 'The curie of target that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'NCBIGene:1'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'source_type': 'chemical_substance', 'target_type': 'chemical_substance', 'edge_type': 'similar_to'}]}}}}}, 'tags': [{'name': 'my_plater'}]}}, '/graph/summary': {'get': {'description': 'Returns summary of the graph', 'operationId': 'get_graph_summary', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance:molecular_entity:named_thing': {'gene:biological_entity:named_thing': {'directly_interacts_with': 20}}}}}}}}, 'tags': [{'name': 'my_plater'}]}}}}
[automat.core.handle_request] - 2020-04-26 23:19:47,985 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-26 23:19:48,007 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-26 23:19:55,077 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-26 23:19:55,321 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-26 23:19:55,365 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-26 23:20:02,199 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-26 23:20:02,214 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-26 23:20:05,961 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-26 23:20:06,185 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-26 23:20:08,231 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:20:19,094 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-26 23:20:19,102 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-26 23:20:38,271 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:21:08,307 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:21:38,343 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:22:08,378 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:22:38,413 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:23:08,424 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:23:38,447 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:24:08,480 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:24:38,512 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:25:08,551 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:25:38,592 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:26:08,641 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:26:38,694 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:27:08,737 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:27:38,778 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:28:08,820 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:28:38,859 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:29:08,895 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:29:38,928 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:30:08,964 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:30:39,018 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:31:09,084 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:31:39,123 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:32:09,160 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:32:39,196 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:33:09,221 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:33:39,255 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:34:09,292 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:34:39,326 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:35:09,362 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:35:39,399 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:36:09,433 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:36:39,478 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:37:09,535 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:37:39,581 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:38:09,615 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:38:39,652 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:39:09,695 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:39:39,727 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:40:09,766 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:40:39,811 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:41:09,851 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:41:39,907 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:42:09,946 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:42:39,985 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:43:10,026 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:43:40,064 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:44:10,099 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:44:40,133 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:45:10,170 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:45:40,195 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:46:10,223 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:46:40,259 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:47:10,293 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:47:40,322 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:48:10,353 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:48:40,366 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:49:10,401 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:49:40,435 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:50:10,472 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:50:40,507 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:51:10,540 core.py 122 DEBUG: ['heartbeat']
[__main__.<module>] - 2020-04-26 23:51:20,089 main.py 21 INFO: [0] Webserver listening at 0.0.0.0:8090
[__main__.<module>] - 2020-04-26 23:51:39,711 main.py 12 INFO: [0] Starting web server
[automat.core.handle_request] - 2020-04-26 23:51:44,349 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:52:14,390 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:52:44,416 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:53:14,449 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:53:44,486 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:54:14,501 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:54:44,536 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:55:14,563 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:55:44,587 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:56:14,621 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:56:44,659 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:57:14,698 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:57:44,734 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:58:14,758 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:58:44,792 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:59:14,850 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-26 23:59:44,911 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:00:14,938 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:00:44,972 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:01:15,007 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:01:45,042 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:02:15,081 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:02:45,111 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:03:15,134 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:03:45,170 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:04:15,208 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:04:45,249 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:05:15,285 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:05:45,321 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:06:15,352 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:06:45,389 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:07:15,431 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:07:45,464 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:08:15,498 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:08:45,534 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:09:15,561 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:09:45,596 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:10:15,633 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:10:45,669 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:11:15,707 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:11:45,743 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:12:15,777 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:12:45,817 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:13:15,834 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:13:45,873 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:14:15,913 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:14:45,946 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:15:15,977 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:15:45,989 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:16:16,027 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:16:46,064 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:17:16,096 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:17:46,133 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:18:16,170 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:18:46,196 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:19:16,233 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:19:46,263 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:20:16,301 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:20:46,340 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:21:16,375 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:21:46,413 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:22:16,454 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:22:46,493 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 00:23:16,528 core.py 122 DEBUG: ['heartbeat']
[__main__.<module>] - 2020-04-27 00:23:41,571 main.py 21 INFO: [0] Webserver listening at 0.0.0.0:8090
[__main__.<module>] - 2020-04-27 00:25:52,492 main.py 12 INFO: [0] Starting web server
[__main__.<module>] - 2020-04-27 00:26:53,273 main.py 21 INFO: [0] Webserver listening at 0.0.0.0:8090
[__main__.<module>] - 2020-04-27 00:27:00,173 main.py 12 INFO: [0] Starting web server
[__main__.<module>] - 2020-04-27 00:31:05,726 main.py 21 INFO: [0] Webserver listening at 0.0.0.0:8090
[__main__.<module>] - 2020-04-27 00:32:10,335 main.py 12 INFO: [0] Starting web server
[__main__.<module>] - 2020-04-27 00:34:36,335 main.py 21 INFO: [0] Webserver listening at 0.0.0.0:8090
[__main__.<module>] - 2020-04-27 00:38:30,475 main.py 12 INFO: [0] Starting web server
[__main__.<module>] - 2020-04-27 00:38:38,317 main.py 21 INFO: [0] Webserver listening at 0.0.0.0:8090
[__main__.<module>] - 2020-04-27 00:40:20,401 main.py 12 INFO: [0] Starting web server
[__main__.<module>] - 2020-04-27 00:41:55,701 main.py 21 INFO: [0] Webserver listening at 0.0.0.0:8090
[__main__.<module>] - 2020-04-27 00:43:15,416 main.py 12 INFO: [0] Starting web server
[__main__.<module>] - 2020-04-27 00:44:09,580 main.py 21 INFO: [0] Webserver listening at 0.0.0.0:8090
[__main__.<module>] - 2020-04-27 00:44:30,752 main.py 12 INFO: [0] Starting web server
[__main__.<module>] - 2020-04-27 01:24:41,362 main.py 21 INFO: [0] Webserver listening at 0.0.0.0:8090
[__main__.<module>] - 2020-04-27 01:25:06,864 main.py 12 INFO: [0] Starting web server
[automat.core.handle_request] - 2020-04-27 01:38:57,899 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-04-27 01:38:58,395 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-04-27 01:38:58,397 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-04-27 01:38:58,506 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-27 01:38:58,524 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-27 01:39:00,681 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-27 01:39:00,695 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-27 01:39:02,257 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-27 01:39:02,267 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-27 01:39:05,809 core.py 122 DEBUG: ['registry']
[automat.core.handle_request] - 2020-04-27 01:39:09,161 core.py 122 DEBUG: ['registry']
[__main__.<module>] - 2020-04-27 01:49:24,738 main.py 21 INFO: [0] Webserver listening at 0.0.0.0:8090
[__main__.<module>] - 2020-04-27 01:49:43,617 main.py 12 INFO: [0] Starting web server
[__main__.<module>] - 2020-04-27 02:20:20,497 main.py 21 INFO: [0] Webserver listening at 0.0.0.0:8090
[__main__.<module>] - 2020-04-27 02:20:46,872 main.py 12 INFO: [0] Starting web server
[automat.core.handle_request] - 2020-04-27 02:24:15,009 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:24:45,119 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:25:15,176 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:25:45,224 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:26:15,292 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:26:45,384 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:27:02,953 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-04-27 02:27:03,532 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-04-27 02:27:03,564 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-04-27 02:27:03,583 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-27 02:27:03,667 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.util.async_client.async_get_json] - 2020-04-27 02:27:03,817 async_client.py 37 ERROR: Failed to get response from http://plater:8091/openapi.json.
[automat.util.async_client.async_get_json] - 2020-04-27 02:27:03,852 async_client.py 38 DEBUG: None
[automat.core.get_swagger_paths] - 2020-04-27 02:27:03,855 core.py 202 ERROR: Internal server error Cannot connect to host plater:8091 ssl:default [Connection refused]
[automat.core.handle_request] - 2020-04-27 02:27:05,784 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-27 02:27:05,804 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-27 02:27:07,695 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-27 02:27:07,714 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-27 02:27:10,211 core.py 122 DEBUG: ['registry']
[automat.core.handle_request] - 2020-04-27 02:27:15,472 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:27:45,632 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:28:15,728 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:28:45,881 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:29:15,957 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:29:46,020 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:30:16,060 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:30:46,116 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:31:16,181 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:31:23,691 core.py 122 DEBUG: ['my_plater']
[automat.core.handle_request] - 2020-04-27 02:31:23,705 core.py 149 DEBUG: [0] found entry for backend server my_plater --- plater:8091
[automat.core.handle_route_to_backend] - 2020-04-27 02:31:23,715 core.py 96 DEBUG: [0] proxing request to http://plater:8091/?
[automat.util.async_client.async_get_json] - 2020-04-27 02:31:23,733 async_client.py 25 ERROR: Failed to get response from http://plater:8091/?. Status code 404
[automat.core.handle_request] - 2020-04-27 02:31:23,845 core.py 122 DEBUG: ['favicon.ico']
[automat.core.handle_request] - 2020-04-27 02:31:34,743 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-27 02:31:34,908 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-27 02:31:39,273 core.py 122 DEBUG: ['registry']
[automat.core.handle_request] - 2020-04-27 02:31:46,232 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:31:55,057 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-04-27 02:31:55,288 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-04-27 02:31:55,307 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-04-27 02:31:55,310 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-27 02:31:55,340 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-27 02:32:16,280 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:32:46,320 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:33:13,429 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-27 02:33:13,454 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-27 02:33:16,413 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:33:46,522 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:34:16,585 core.py 122 DEBUG: ['heartbeat']
[__main__.<module>] - 2020-04-27 02:34:44,191 main.py 21 INFO: [0] Webserver listening at 0.0.0.0:8090
[__main__.<module>] - 2020-04-27 02:35:03,193 main.py 12 INFO: [0] Starting web server
[__main__.<module>] - 2020-04-27 02:35:55,958 main.py 21 INFO: [0] Webserver listening at 0.0.0.0:8090
[__main__.<module>] - 2020-04-27 02:39:51,217 main.py 12 INFO: [0] Starting web server
[__main__.<module>] - 2020-04-27 02:39:56,678 main.py 21 INFO: [0] Webserver listening at 0.0.0.0:8090
[__main__.<module>] - 2020-04-27 02:40:23,934 main.py 12 INFO: [0] Starting web server
[automat.core.handle_request] - 2020-04-27 02:41:58,430 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-04-27 02:41:58,789 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-04-27 02:41:58,808 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-04-27 02:41:58,819 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-27 02:41:58,952 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-27 02:42:00,170 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-04-27 02:42:00,391 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-04-27 02:42:00,393 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-04-27 02:42:00,407 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-27 02:42:00,506 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-27 02:42:02,229 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-27 02:42:02,254 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-27 02:42:03,410 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-27 02:42:03,549 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-27 02:42:05,744 core.py 122 DEBUG: ['registry']
[automat.core.handle_request] - 2020-04-27 02:47:19,422 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:47:29,724 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-04-27 02:47:30,355 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-04-27 02:47:30,372 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-04-27 02:47:30,442 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-27 02:47:30,521 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.util.async_client.async_get_json] - 2020-04-27 02:47:30,619 async_client.py 37 ERROR: Failed to get response from http://plater:8091/openapi.json.
[automat.util.async_client.async_get_json] - 2020-04-27 02:47:30,694 async_client.py 38 DEBUG: None
[automat.core.get_swagger_paths] - 2020-04-27 02:47:30,708 core.py 202 ERROR: Internal server error Cannot connect to host plater:8091 ssl:default [Connection refused]
[automat.core.handle_request] - 2020-04-27 02:47:32,769 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-04-27 02:47:33,053 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-04-27 02:47:33,085 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-04-27 02:47:33,101 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-27 02:47:33,138 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.util.async_client.async_get_json] - 2020-04-27 02:47:33,156 async_client.py 37 ERROR: Failed to get response from http://plater:8091/openapi.json.
[automat.util.async_client.async_get_json] - 2020-04-27 02:47:33,164 async_client.py 38 DEBUG: None
[automat.core.get_swagger_paths] - 2020-04-27 02:47:33,167 core.py 202 ERROR: Internal server error Cannot connect to host plater:8091 ssl:default [Connection refused]
[automat.core.handle_request] - 2020-04-27 02:47:34,968 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-04-27 02:47:35,176 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-04-27 02:47:35,208 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-04-27 02:47:35,221 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.util.async_client.async_get_json] - 2020-04-27 02:47:35,231 async_client.py 37 ERROR: Failed to get response from http://plater:8091/openapi.json.
[automat.util.async_client.async_get_json] - 2020-04-27 02:47:35,249 async_client.py 38 DEBUG: None
[automat.core.get_swagger_paths] - 2020-04-27 02:47:35,261 core.py 202 ERROR: Internal server error Cannot connect to host plater:8091 ssl:default [Connection refused]
[automat.core.handle_request] - 2020-04-27 02:47:35,282 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-27 02:47:36,068 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-04-27 02:47:36,213 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-04-27 02:47:36,216 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-04-27 02:47:36,238 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.util.async_client.async_get_json] - 2020-04-27 02:47:36,269 async_client.py 37 ERROR: Failed to get response from http://plater:8091/openapi.json.
[automat.util.async_client.async_get_json] - 2020-04-27 02:47:36,288 async_client.py 38 DEBUG: None
[automat.core.get_swagger_paths] - 2020-04-27 02:47:36,306 core.py 202 ERROR: Internal server error Cannot connect to host plater:8091 ssl:default [Connection refused]
[automat.core.handle_request] - 2020-04-27 02:47:36,321 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-27 02:47:37,010 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-04-27 02:47:37,168 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-04-27 02:47:37,174 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-04-27 02:47:37,191 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-27 02:47:37,213 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.util.async_client.async_get_json] - 2020-04-27 02:47:37,232 async_client.py 37 ERROR: Failed to get response from http://plater:8091/openapi.json.
[automat.util.async_client.async_get_json] - 2020-04-27 02:47:37,249 async_client.py 38 DEBUG: None
[automat.core.get_swagger_paths] - 2020-04-27 02:47:37,251 core.py 202 ERROR: Internal server error Cannot connect to host plater:8091 ssl:default [Connection refused]
[automat.core.handle_request] - 2020-04-27 02:47:49,496 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:48:19,595 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:48:29,295 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-04-27 02:48:29,492 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-04-27 02:48:29,507 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-04-27 02:48:29,520 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.util.async_client.async_get_json] - 2020-04-27 02:48:29,535 async_client.py 37 ERROR: Failed to get response from http://plater:8091/openapi.json.
[automat.util.async_client.async_get_json] - 2020-04-27 02:48:29,544 async_client.py 38 DEBUG: None
[automat.core.get_swagger_paths] - 2020-04-27 02:48:29,555 core.py 202 ERROR: Internal server error Cannot connect to host plater:8091 ssl:default [Connection refused]
[automat.core.handle_request] - 2020-04-27 02:48:29,558 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-27 02:48:30,634 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-04-27 02:48:30,803 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-04-27 02:48:30,841 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-04-27 02:48:30,849 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.util.async_client.async_get_json] - 2020-04-27 02:48:30,868 async_client.py 37 ERROR: Failed to get response from http://plater:8091/openapi.json.
[automat.util.async_client.async_get_json] - 2020-04-27 02:48:30,888 async_client.py 38 DEBUG: None
[automat.core.get_swagger_paths] - 2020-04-27 02:48:30,891 core.py 202 ERROR: Internal server error Cannot connect to host plater:8091 ssl:default [Connection refused]
[automat.core.handle_request] - 2020-04-27 02:48:30,896 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-27 02:48:31,588 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-04-27 02:48:31,755 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-04-27 02:48:31,769 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-04-27 02:48:31,778 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-27 02:48:31,805 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.util.async_client.async_get_json] - 2020-04-27 02:48:31,851 async_client.py 37 ERROR: Failed to get response from http://plater:8091/openapi.json.
[automat.util.async_client.async_get_json] - 2020-04-27 02:48:31,860 async_client.py 38 DEBUG: None
[automat.core.get_swagger_paths] - 2020-04-27 02:48:31,865 core.py 202 ERROR: Internal server error Cannot connect to host plater:8091 ssl:default [Connection refused]
[automat.core.handle_request] - 2020-04-27 02:48:32,548 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-04-27 02:48:32,710 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-04-27 02:48:32,719 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-04-27 02:48:32,752 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.util.async_client.async_get_json] - 2020-04-27 02:48:32,762 async_client.py 37 ERROR: Failed to get response from http://plater:8091/openapi.json.
[automat.util.async_client.async_get_json] - 2020-04-27 02:48:32,784 async_client.py 38 DEBUG: None
[automat.core.get_swagger_paths] - 2020-04-27 02:48:32,787 core.py 202 ERROR: Internal server error Cannot connect to host plater:8091 ssl:default [Connection refused]
[automat.core.handle_request] - 2020-04-27 02:48:32,797 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-27 02:48:33,444 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-04-27 02:48:33,634 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-04-27 02:48:33,640 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-04-27 02:48:33,671 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.util.async_client.async_get_json] - 2020-04-27 02:48:33,687 async_client.py 37 ERROR: Failed to get response from http://plater:8091/openapi.json.
[automat.util.async_client.async_get_json] - 2020-04-27 02:48:33,708 async_client.py 38 DEBUG: None
[automat.core.get_swagger_paths] - 2020-04-27 02:48:33,711 core.py 202 ERROR: Internal server error Cannot connect to host plater:8091 ssl:default [Connection refused]
[automat.core.handle_request] - 2020-04-27 02:48:33,729 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-27 02:48:34,340 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-04-27 02:48:34,470 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-04-27 02:48:34,481 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-04-27 02:48:34,496 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.util.async_client.async_get_json] - 2020-04-27 02:48:34,516 async_client.py 37 ERROR: Failed to get response from http://plater:8091/openapi.json.
[automat.util.async_client.async_get_json] - 2020-04-27 02:48:34,522 async_client.py 38 DEBUG: None
[automat.core.get_swagger_paths] - 2020-04-27 02:48:34,526 core.py 202 ERROR: Internal server error Cannot connect to host plater:8091 ssl:default [Connection refused]
[automat.core.handle_request] - 2020-04-27 02:48:34,540 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-27 02:48:38,646 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-04-27 02:48:38,830 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-04-27 02:48:38,837 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-04-27 02:48:38,866 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.util.async_client.async_get_json] - 2020-04-27 02:48:38,883 async_client.py 37 ERROR: Failed to get response from http://plater:8091/openapi.json.
[automat.util.async_client.async_get_json] - 2020-04-27 02:48:38,895 async_client.py 38 DEBUG: None
[automat.core.get_swagger_paths] - 2020-04-27 02:48:38,900 core.py 202 ERROR: Internal server error Cannot connect to host plater:8091 ssl:default [Connection refused]
[automat.core.handle_request] - 2020-04-27 02:48:38,905 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-27 02:48:39,822 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-04-27 02:48:39,998 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-04-27 02:48:40,000 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-04-27 02:48:40,002 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-27 02:48:40,021 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.util.async_client.async_get_json] - 2020-04-27 02:48:40,036 async_client.py 37 ERROR: Failed to get response from http://plater:8091/openapi.json.
[automat.util.async_client.async_get_json] - 2020-04-27 02:48:40,041 async_client.py 38 DEBUG: None
[automat.core.get_swagger_paths] - 2020-04-27 02:48:40,044 core.py 202 ERROR: Internal server error Cannot connect to host plater:8091 ssl:default [Connection refused]
[automat.core.handle_request] - 2020-04-27 02:48:49,672 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:49:11,544 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-04-27 02:49:11,731 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-04-27 02:49:11,736 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-04-27 02:49:11,752 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.util.async_client.async_get_json] - 2020-04-27 02:49:11,773 async_client.py 37 ERROR: Failed to get response from http://plater:8091/openapi.json.
[automat.util.async_client.async_get_json] - 2020-04-27 02:49:11,784 async_client.py 38 DEBUG: None
[automat.core.get_swagger_paths] - 2020-04-27 02:49:11,787 core.py 202 ERROR: Internal server error Cannot connect to host plater:8091 ssl:default [Connection refused]
[automat.core.handle_request] - 2020-04-27 02:49:11,791 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-27 02:49:12,821 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-04-27 02:49:12,996 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-04-27 02:49:13,009 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-04-27 02:49:13,012 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.util.async_client.async_get_json] - 2020-04-27 02:49:13,019 async_client.py 37 ERROR: Failed to get response from http://plater:8091/openapi.json.
[automat.util.async_client.async_get_json] - 2020-04-27 02:49:13,035 async_client.py 38 DEBUG: None
[automat.core.get_swagger_paths] - 2020-04-27 02:49:13,040 core.py 202 ERROR: Internal server error Cannot connect to host plater:8091 ssl:default [Connection refused]
[automat.core.handle_request] - 2020-04-27 02:49:13,048 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-27 02:49:13,713 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-04-27 02:49:13,877 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-04-27 02:49:13,910 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-04-27 02:49:13,917 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.util.async_client.async_get_json] - 2020-04-27 02:49:13,945 async_client.py 37 ERROR: Failed to get response from http://plater:8091/openapi.json.
[automat.util.async_client.async_get_json] - 2020-04-27 02:49:13,971 async_client.py 38 DEBUG: None
[automat.core.get_swagger_paths] - 2020-04-27 02:49:13,977 core.py 202 ERROR: Internal server error Cannot connect to host plater:8091 ssl:default [Connection refused]
[automat.core.handle_request] - 2020-04-27 02:49:13,985 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-27 02:49:19,738 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:49:39,524 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-04-27 02:49:39,741 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-04-27 02:49:39,745 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-04-27 02:49:39,765 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-27 02:49:39,823 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-27 02:49:49,863 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:50:19,968 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:50:50,047 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:51:20,106 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:51:50,149 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:52:20,223 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:52:50,276 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:53:20,343 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:53:50,415 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:54:20,472 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:54:50,516 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:55:20,564 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:55:50,612 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:56:20,687 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:56:50,762 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:57:20,815 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:57:50,876 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:58:20,975 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:58:51,066 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:59:21,133 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 02:59:51,201 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 03:00:21,274 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 03:00:51,336 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 03:01:21,394 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 03:01:51,432 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 03:02:21,475 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 03:02:51,546 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 03:03:21,654 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 03:03:51,763 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 03:04:21,914 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 03:04:51,980 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 03:05:22,051 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 03:05:52,134 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 03:06:22,189 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 03:06:52,300 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 03:07:22,390 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 03:07:52,442 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 03:08:22,522 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 03:08:52,650 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 03:09:22,753 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 03:09:52,812 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 03:10:22,894 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 03:10:52,971 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 03:11:23,071 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 03:11:52,581 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-27 03:11:52,601 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-27 03:11:52,621 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-27 03:11:53,111 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 03:11:53,406 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-27 03:11:53,424 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-27 03:11:55,501 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-27 03:11:55,521 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-27 03:12:09,407 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-27 03:12:09,422 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-27 03:12:14,285 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-27 03:12:14,303 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-27 03:12:17,971 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-27 03:12:17,985 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-27 03:12:23,197 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 03:12:53,299 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 03:13:23,369 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 03:13:53,420 core.py 122 DEBUG: ['heartbeat']
[__main__.<module>] - 2020-04-27 03:14:01,317 main.py 21 INFO: [0] Webserver listening at 0.0.0.0:8090
[__main__.<module>] - 2020-04-27 03:14:22,343 main.py 12 INFO: [0] Starting web server
[__main__.<module>] - 2020-04-27 03:14:23,280 main.py 21 INFO: [0] Webserver listening at 0.0.0.0:8090
[__main__.<module>] - 2020-04-27 03:16:54,298 main.py 12 INFO: [0] Starting web server
[automat.core.handle_request] - 2020-04-27 03:17:43,172 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 03:18:13,219 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 03:18:24,529 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-04-27 03:18:24,786 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-04-27 03:18:24,805 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-04-27 03:18:24,814 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.util.async_client.async_get_json] - 2020-04-27 03:18:24,828 async_client.py 37 ERROR: Failed to get response from http://plater:8091/openapi.json.
[automat.util.async_client.async_get_json] - 2020-04-27 03:18:24,849 async_client.py 38 DEBUG: None
[automat.core.get_swagger_paths] - 2020-04-27 03:18:24,851 core.py 202 ERROR: Internal server error Cannot connect to host plater:8091 ssl:default [Connection refused]
[automat.core.handle_request] - 2020-04-27 03:18:24,857 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-27 03:18:26,320 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-04-27 03:18:26,493 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-04-27 03:18:26,498 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-04-27 03:18:26,523 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.util.async_client.async_get_json] - 2020-04-27 03:18:26,543 async_client.py 37 ERROR: Failed to get response from http://plater:8091/openapi.json.
[automat.util.async_client.async_get_json] - 2020-04-27 03:18:26,626 async_client.py 38 DEBUG: None
[automat.core.get_swagger_paths] - 2020-04-27 03:18:26,660 core.py 202 ERROR: Internal server error Cannot connect to host plater:8091 ssl:default [Connection refused]
[automat.core.handle_request] - 2020-04-27 03:18:26,671 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-27 03:18:43,297 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 03:19:13,349 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 03:19:43,406 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 03:19:58,332 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-04-27 03:19:58,552 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-04-27 03:19:58,565 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-04-27 03:19:58,605 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-27 03:19:58,632 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-27 03:20:13,482 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 03:20:43,554 core.py 122 DEBUG: ['heartbeat']
[__main__.<module>] - 2020-04-27 03:20:50,465 main.py 21 INFO: [0] Webserver listening at 0.0.0.0:8090
[__main__.<module>] - 2020-04-27 14:42:00,228 main.py 12 INFO: [0] Starting web server
[__main__.<module>] - 2020-04-27 14:42:05,000 main.py 21 INFO: [0] Webserver listening at 127.0.0.1:8081
[__main__.<module>] - 2020-04-27 14:43:05,047 main.py 12 INFO: [0] Starting web server
[automat.core.handle_request] - 2020-04-27 14:46:59,016 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 14:47:11,784 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 14:48:20,197 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 14:50:41,839 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 14:51:26,228 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 14:51:56,236 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-04-27 14:52:06,852 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-04-27 14:52:07,224 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-04-27 14:52:07,225 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-04-27 14:52:07,322 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-27 14:52:07,334 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.get_swagger_paths] - 2020-04-27 14:52:10,247 core.py 204 DEBUG: {'openapi': '3.0.2', 'info': {'title': 'PLATER - mytag'}, 'paths': {'/named_thing/{curie}': {'get': {'description': 'Returns `named_thing` based on `curie`.', 'summary': 'Find named_thing by curie.', 'operationId': 'get_named_thing_by_curie', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of named_thing that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'synonyms': [], 'id': 'SOURCE:10', 'equivalent_identifiers': ['SOURCE:10']}]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/named_thing/named_thing/{curie}': {'get': {'description': 'Returns one hop paths from named_thing with `curie` to target type named_thing.', 'summary': 'Get one hop results from named_thing to named_thing.', 'operationId': 'get_one_hop_named_thing_to_named_thing', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of named_thing that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'id': 'SOURCE:10', 'equivalent_identifiers': ['SOURCE:10']}, {'relation_label': 'affects', 'predicate_id': 'SEMMEDDB:AFFECTS', 'edge_source': 'stress_tester', 'ctime': 'now', 'id': 'ea03ad62a88f7776f2b6620f495a201d', 'source_database': 'stress_tester', 'publications': [], 'relation': 'RO:0000052'}, {'synonyms': [], 'id': 'TARGER:10', 'equivalent_identifiers': ['TARGER:10']}]]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/named_thing/chemical_substance/{curie}': {'get': {'description': 'Returns one hop paths from named_thing with `curie` to target type chemical_substance.', 'summary': 'Get one hop results from named_thing to chemical_substance.', 'operationId': 'get_one_hop_named_thing_to_chemical_substance', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of named_thing that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'id': 'SOURCE:10', 'equivalent_identifiers': ['SOURCE:10']}, {'relation_label': 'affects', 'predicate_id': 'SEMMEDDB:AFFECTS', 'edge_source': 'stress_tester', 'ctime': 'now', 'id': 'ea03ad62a88f7776f2b6620f495a201d', 'source_database': 'stress_tester', 'publications': [], 'relation': 'RO:0000052'}, {'synonyms': [], 'id': 'TARGER:10', 'equivalent_identifiers': ['TARGER:10']}]]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/named_thing/gene/{curie}': {'get': {'description': 'Returns one hop paths from named_thing with `curie` to target type gene.', 'summary': 'Get one hop results from named_thing to gene.', 'operationId': 'get_one_hop_named_thing_to_gene', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of named_thing that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'mytag'}]}}, '/named_thing/molecular_entity/{curie}': {'get': {'description': 'Returns one hop paths from named_thing with `curie` to target type molecular_entity.', 'summary': 'Get one hop results from named_thing to molecular_entity.', 'operationId': 'get_one_hop_named_thing_to_molecular_entity', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of named_thing that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'mytag'}]}}, '/named_thing/biological_entity/{curie}': {'get': {'description': 'Returns one hop paths from named_thing with `curie` to target type biological_entity.', 'summary': 'Get one hop results from named_thing to biological_entity.', 'operationId': 'get_one_hop_named_thing_to_biological_entity', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of named_thing that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'RALGAPA1', 'id': 'NCBIGene:253959', 'equivalent_identifiers': ['NCBIGene:253959', 'ENSEMBL:ENSG00000174373', 'HGNC:17770', 'NCBIGene:253959', 'UniProtKB:Q6GYQ0']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.0856352, 'id': '94ae41bee1bd664b0bb858655f903392', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/named_thing/disease_or_phenotypic_feature/{curie}': {'get': {'description': 'Returns one hop paths from named_thing with `curie` to target type disease_or_phenotypic_feature.', 'summary': 'Get one hop results from named_thing to disease_or_phenotypic_feature.', 'operationId': 'get_one_hop_named_thing_to_disease_or_phenotypic_feature', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of named_thing that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'RALGAPA1', 'id': 'NCBIGene:253959', 'equivalent_identifiers': ['NCBIGene:253959', 'ENSEMBL:ENSG00000174373', 'HGNC:17770', 'NCBIGene:253959', 'UniProtKB:Q6GYQ0']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.0856352, 'id': '94ae41bee1bd664b0bb858655f903392', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/named_thing/disease/{curie}': {'get': {'description': 'Returns one hop paths from named_thing with `curie` to target type disease.', 'summary': 'Get one hop results from named_thing to disease.', 'operationId': 'get_one_hop_named_thing_to_disease', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of named_thing that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'RALGAPA1', 'id': 'NCBIGene:253959', 'equivalent_identifiers': ['NCBIGene:253959', 'ENSEMBL:ENSG00000174373', 'HGNC:17770', 'NCBIGene:253959', 'UniProtKB:Q6GYQ0']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.0856352, 'id': '94ae41bee1bd664b0bb858655f903392', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/named_thing/macromolecular_machine/{curie}': {'get': {'description': 'Returns one hop paths from named_thing with `curie` to target type macromolecular_machine.', 'summary': 'Get one hop results from named_thing to macromolecular_machine.', 'operationId': 'get_one_hop_named_thing_to_macromolecular_machine', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of named_thing that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'mytag'}]}}, '/named_thing/genomic_entity/{curie}': {'get': {'description': 'Returns one hop paths from named_thing with `curie` to target type genomic_entity.', 'summary': 'Get one hop results from named_thing to genomic_entity.', 'operationId': 'get_one_hop_named_thing_to_genomic_entity', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of named_thing that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'mytag'}]}}, '/named_thing/gene_or_gene_product/{curie}': {'get': {'description': 'Returns one hop paths from named_thing with `curie` to target type gene_or_gene_product.', 'summary': 'Get one hop results from named_thing to gene_or_gene_product.', 'operationId': 'get_one_hop_named_thing_to_gene_or_gene_product', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of named_thing that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'mytag'}]}}, '/chemical_substance/{curie}': {'get': {'description': 'Returns `chemical_substance` based on `curie`.', 'summary': 'Find chemical_substance by curie.', 'operationId': 'get_chemical_substance_by_curie', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of chemical_substance that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'synonyms': [], 'id': 'SOURCE:10', 'equivalent_identifiers': ['SOURCE:10']}]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/chemical_substance/named_thing/{curie}': {'get': {'description': 'Returns one hop paths from chemical_substance with `curie` to target type named_thing.', 'summary': 'Get one hop results from chemical_substance to named_thing.', 'operationId': 'get_one_hop_chemical_substance_to_named_thing', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of chemical_substance that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'id': 'SOURCE:10', 'equivalent_identifiers': ['SOURCE:10']}, {'relation_label': 'affects', 'predicate_id': 'SEMMEDDB:AFFECTS', 'edge_source': 'stress_tester', 'ctime': 'now', 'id': 'ea03ad62a88f7776f2b6620f495a201d', 'source_database': 'stress_tester', 'publications': [], 'relation': 'RO:0000052'}, {'synonyms': [], 'id': 'TARGER:10', 'equivalent_identifiers': ['TARGER:10']}]]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/chemical_substance/chemical_substance/{curie}': {'get': {'description': 'Returns one hop paths from chemical_substance with `curie` to target type chemical_substance.', 'summary': 'Get one hop results from chemical_substance to chemical_substance.', 'operationId': 'get_one_hop_chemical_substance_to_chemical_substance', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of chemical_substance that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'id': 'SOURCE:10', 'equivalent_identifiers': ['SOURCE:10']}, {'relation_label': 'affects', 'predicate_id': 'SEMMEDDB:AFFECTS', 'edge_source': 'stress_tester', 'ctime': 'now', 'id': 'ea03ad62a88f7776f2b6620f495a201d', 'source_database': 'stress_tester', 'publications': [], 'relation': 'RO:0000052'}, {'synonyms': [], 'id': 'TARGER:10', 'equivalent_identifiers': ['TARGER:10']}]]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/gene/{curie}': {'get': {'description': 'Returns `gene` based on `curie`.', 'summary': 'Find gene by curie.', 'operationId': 'get_gene_by_curie', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of gene that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'synonyms': [], 'name': 'BST2', 'id': 'NCBIGene:684', 'equivalent_identifiers': ['HGNC:1119', 'UniProtKB:Q10589', 'ENSEMBL:ENSG00000130303', 'NCBIGene:684', 'NCBIGene:684']}]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/gene/biological_entity/{curie}': {'get': {'description': 'Returns one hop paths from gene with `curie` to target type biological_entity.', 'summary': 'Get one hop results from gene to biological_entity.', 'operationId': 'get_one_hop_gene_to_biological_entity', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of gene that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'BST2', 'id': 'NCBIGene:684', 'equivalent_identifiers': ['HGNC:1119', 'UniProtKB:Q10589', 'ENSEMBL:ENSG00000130303', 'NCBIGene:684', 'NCBIGene:684']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.070162, 'id': '0417d8a3cf6e3e6eb4a175391141e8d1', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/gene/named_thing/{curie}': {'get': {'description': 'Returns one hop paths from gene with `curie` to target type named_thing.', 'summary': 'Get one hop results from gene to named_thing.', 'operationId': 'get_one_hop_gene_to_named_thing', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of gene that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'BST2', 'id': 'NCBIGene:684', 'equivalent_identifiers': ['HGNC:1119', 'UniProtKB:Q10589', 'ENSEMBL:ENSG00000130303', 'NCBIGene:684', 'NCBIGene:684']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.070162, 'id': '0417d8a3cf6e3e6eb4a175391141e8d1', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/gene/disease_or_phenotypic_feature/{curie}': {'get': {'description': 'Returns one hop paths from gene with `curie` to target type disease_or_phenotypic_feature.', 'summary': 'Get one hop results from gene to disease_or_phenotypic_feature.', 'operationId': 'get_one_hop_gene_to_disease_or_phenotypic_feature', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of gene that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'RALGAPA1', 'id': 'NCBIGene:253959', 'equivalent_identifiers': ['NCBIGene:253959', 'ENSEMBL:ENSG00000174373', 'HGNC:17770', 'NCBIGene:253959', 'UniProtKB:Q6GYQ0']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.0856352, 'id': '94ae41bee1bd664b0bb858655f903392', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/gene/disease/{curie}': {'get': {'description': 'Returns one hop paths from gene with `curie` to target type disease.', 'summary': 'Get one hop results from gene to disease.', 'operationId': 'get_one_hop_gene_to_disease', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of gene that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'RALGAPA1', 'id': 'NCBIGene:253959', 'equivalent_identifiers': ['NCBIGene:253959', 'ENSEMBL:ENSG00000174373', 'HGNC:17770', 'NCBIGene:253959', 'UniProtKB:Q6GYQ0']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.0856352, 'id': '94ae41bee1bd664b0bb858655f903392', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/biological_entity/{curie}': {'get': {'description': 'Returns `biological_entity` based on `curie`.', 'summary': 'Find biological_entity by curie.', 'operationId': 'get_biological_entity_by_curie', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of biological_entity that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/biological_entity/gene/{curie}': {'get': {'description': 'Returns one hop paths from biological_entity with `curie` to target type gene.', 'summary': 'Get one hop results from biological_entity to gene.', 'operationId': 'get_one_hop_biological_entity_to_gene', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of biological_entity that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'mytag'}]}}, '/biological_entity/molecular_entity/{curie}': {'get': {'description': 'Returns one hop paths from biological_entity with `curie` to target type molecular_entity.', 'summary': 'Get one hop results from biological_entity to molecular_entity.', 'operationId': 'get_one_hop_biological_entity_to_molecular_entity', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of biological_entity that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'mytag'}]}}, '/biological_entity/biological_entity/{curie}': {'get': {'description': 'Returns one hop paths from biological_entity with `curie` to target type biological_entity.', 'summary': 'Get one hop results from biological_entity to biological_entity.', 'operationId': 'get_one_hop_biological_entity_to_biological_entity', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of biological_entity that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'RALGAPA1', 'id': 'NCBIGene:253959', 'equivalent_identifiers': ['NCBIGene:253959', 'ENSEMBL:ENSG00000174373', 'HGNC:17770', 'NCBIGene:253959', 'UniProtKB:Q6GYQ0']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.0856352, 'id': '94ae41bee1bd664b0bb858655f903392', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/biological_entity/named_thing/{curie}': {'get': {'description': 'Returns one hop paths from biological_entity with `curie` to target type named_thing.', 'summary': 'Get one hop results from biological_entity to named_thing.', 'operationId': 'get_one_hop_biological_entity_to_named_thing', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of biological_entity that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'BST2', 'id': 'NCBIGene:684', 'equivalent_identifiers': ['HGNC:1119', 'UniProtKB:Q10589', 'ENSEMBL:ENSG00000130303', 'NCBIGene:684', 'NCBIGene:684']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.070162, 'id': '0417d8a3cf6e3e6eb4a175391141e8d1', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/biological_entity/disease_or_phenotypic_feature/{curie}': {'get': {'description': 'Returns one hop paths from biological_entity with `curie` to target type disease_or_phenotypic_feature.', 'summary': 'Get one hop results from biological_entity to disease_or_phenotypic_feature.', 'operationId': 'get_one_hop_biological_entity_to_disease_or_phenotypic_feature', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of biological_entity that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'RALGAPA1', 'id': 'NCBIGene:253959', 'equivalent_identifiers': ['NCBIGene:253959', 'ENSEMBL:ENSG00000174373', 'HGNC:17770', 'NCBIGene:253959', 'UniProtKB:Q6GYQ0']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.0856352, 'id': '94ae41bee1bd664b0bb858655f903392', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/biological_entity/disease/{curie}': {'get': {'description': 'Returns one hop paths from biological_entity with `curie` to target type disease.', 'summary': 'Get one hop results from biological_entity to disease.', 'operationId': 'get_one_hop_biological_entity_to_disease', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of biological_entity that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'RALGAPA1', 'id': 'NCBIGene:253959', 'equivalent_identifiers': ['NCBIGene:253959', 'ENSEMBL:ENSG00000174373', 'HGNC:17770', 'NCBIGene:253959', 'UniProtKB:Q6GYQ0']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.0856352, 'id': '94ae41bee1bd664b0bb858655f903392', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/biological_entity/macromolecular_machine/{curie}': {'get': {'description': 'Returns one hop paths from biological_entity with `curie` to target type macromolecular_machine.', 'summary': 'Get one hop results from biological_entity to macromolecular_machine.', 'operationId': 'get_one_hop_biological_entity_to_macromolecular_machine', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of biological_entity that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'mytag'}]}}, '/biological_entity/genomic_entity/{curie}': {'get': {'description': 'Returns one hop paths from biological_entity with `curie` to target type genomic_entity.', 'summary': 'Get one hop results from biological_entity to genomic_entity.', 'operationId': 'get_one_hop_biological_entity_to_genomic_entity', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of biological_entity that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'mytag'}]}}, '/biological_entity/gene_or_gene_product/{curie}': {'get': {'description': 'Returns one hop paths from biological_entity with `curie` to target type gene_or_gene_product.', 'summary': 'Get one hop results from biological_entity to gene_or_gene_product.', 'operationId': 'get_one_hop_biological_entity_to_gene_or_gene_product', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of biological_entity that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'mytag'}]}}, '/disease_or_phenotypic_feature/{curie}': {'get': {'description': 'Returns `disease_or_phenotypic_feature` based on `curie`.', 'summary': 'Find disease_or_phenotypic_feature by curie.', 'operationId': 'get_disease_or_phenotypic_feature_by_curie', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of disease_or_phenotypic_feature that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/disease_or_phenotypic_feature/gene/{curie}': {'get': {'description': 'Returns one hop paths from disease_or_phenotypic_feature with `curie` to target type gene.', 'summary': 'Get one hop results from disease_or_phenotypic_feature to gene.', 'operationId': 'get_one_hop_disease_or_phenotypic_feature_to_gene', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of disease_or_phenotypic_feature that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'mytag'}]}}, '/disease_or_phenotypic_feature/molecular_entity/{curie}': {'get': {'description': 'Returns one hop paths from disease_or_phenotypic_feature with `curie` to target type molecular_entity.', 'summary': 'Get one hop results from disease_or_phenotypic_feature to molecular_entity.', 'operationId': 'get_one_hop_disease_or_phenotypic_feature_to_molecular_entity', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of disease_or_phenotypic_feature that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'mytag'}]}}, '/disease_or_phenotypic_feature/biological_entity/{curie}': {'get': {'description': 'Returns one hop paths from disease_or_phenotypic_feature with `curie` to target type biological_entity.', 'summary': 'Get one hop results from disease_or_phenotypic_feature to biological_entity.', 'operationId': 'get_one_hop_disease_or_phenotypic_feature_to_biological_entity', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of disease_or_phenotypic_feature that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'mytag'}]}}, '/disease_or_phenotypic_feature/named_thing/{curie}': {'get': {'description': 'Returns one hop paths from disease_or_phenotypic_feature with `curie` to target type named_thing.', 'summary': 'Get one hop results from disease_or_phenotypic_feature to named_thing.', 'operationId': 'get_one_hop_disease_or_phenotypic_feature_to_named_thing', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of disease_or_phenotypic_feature that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'mytag'}]}}, '/disease_or_phenotypic_feature/macromolecular_machine/{curie}': {'get': {'description': 'Returns one hop paths from disease_or_phenotypic_feature with `curie` to target type macromolecular_machine.', 'summary': 'Get one hop results from disease_or_phenotypic_feature to macromolecular_machine.', 'operationId': 'get_one_hop_disease_or_phenotypic_feature_to_macromolecular_machine', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of disease_or_phenotypic_feature that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'mytag'}]}}, '/disease_or_phenotypic_feature/genomic_entity/{curie}': {'get': {'description': 'Returns one hop paths from disease_or_phenotypic_feature with `curie` to target type genomic_entity.', 'summary': 'Get one hop results from disease_or_phenotypic_feature to genomic_entity.', 'operationId': 'get_one_hop_disease_or_phenotypic_feature_to_genomic_entity', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of disease_or_phenotypic_feature that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'mytag'}]}}, '/disease_or_phenotypic_feature/gene_or_gene_product/{curie}': {'get': {'description': 'Returns one hop paths from disease_or_phenotypic_feature with `curie` to target type gene_or_gene_product.', 'summary': 'Get one hop results from disease_or_phenotypic_feature to gene_or_gene_product.', 'operationId': 'get_one_hop_disease_or_phenotypic_feature_to_gene_or_gene_product', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of disease_or_phenotypic_feature that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'mytag'}]}}, '/disease/{curie}': {'get': {'description': 'Returns `disease` based on `curie`.', 'summary': 'Find disease by curie.', 'operationId': 'get_disease_by_curie', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of disease that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/disease/gene/{curie}': {'get': {'description': 'Returns one hop paths from disease with `curie` to target type gene.', 'summary': 'Get one hop results from disease to gene.', 'operationId': 'get_one_hop_disease_to_gene', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of disease that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'mytag'}]}}, '/disease/molecular_entity/{curie}': {'get': {'description': 'Returns one hop paths from disease with `curie` to target type molecular_entity.', 'summary': 'Get one hop results from disease to molecular_entity.', 'operationId': 'get_one_hop_disease_to_molecular_entity', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of disease that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'mytag'}]}}, '/disease/biological_entity/{curie}': {'get': {'description': 'Returns one hop paths from disease with `curie` to target type biological_entity.', 'summary': 'Get one hop results from disease to biological_entity.', 'operationId': 'get_one_hop_disease_to_biological_entity', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of disease that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'mytag'}]}}, '/disease/named_thing/{curie}': {'get': {'description': 'Returns one hop paths from disease with `curie` to target type named_thing.', 'summary': 'Get one hop results from disease to named_thing.', 'operationId': 'get_one_hop_disease_to_named_thing', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of disease that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'mytag'}]}}, '/disease/macromolecular_machine/{curie}': {'get': {'description': 'Returns one hop paths from disease with `curie` to target type macromolecular_machine.', 'summary': 'Get one hop results from disease to macromolecular_machine.', 'operationId': 'get_one_hop_disease_to_macromolecular_machine', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of disease that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'mytag'}]}}, '/disease/genomic_entity/{curie}': {'get': {'description': 'Returns one hop paths from disease with `curie` to target type genomic_entity.', 'summary': 'Get one hop results from disease to genomic_entity.', 'operationId': 'get_one_hop_disease_to_genomic_entity', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of disease that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'mytag'}]}}, '/disease/gene_or_gene_product/{curie}': {'get': {'description': 'Returns one hop paths from disease with `curie` to target type gene_or_gene_product.', 'summary': 'Get one hop results from disease to gene_or_gene_product.', 'operationId': 'get_one_hop_disease_to_gene_or_gene_product', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of disease that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': []}}}}}, 'tags': [{'name': 'mytag'}]}}, '/molecular_entity/{curie}': {'get': {'description': 'Returns `molecular_entity` based on `curie`.', 'summary': 'Find molecular_entity by curie.', 'operationId': 'get_molecular_entity_by_curie', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of molecular_entity that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'synonyms': [], 'name': 'BST2', 'id': 'NCBIGene:684', 'equivalent_identifiers': ['HGNC:1119', 'UniProtKB:Q10589', 'ENSEMBL:ENSG00000130303', 'NCBIGene:684', 'NCBIGene:684']}]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/molecular_entity/biological_entity/{curie}': {'get': {'description': 'Returns one hop paths from molecular_entity with `curie` to target type biological_entity.', 'summary': 'Get one hop results from molecular_entity to biological_entity.', 'operationId': 'get_one_hop_molecular_entity_to_biological_entity', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of molecular_entity that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'BST2', 'id': 'NCBIGene:684', 'equivalent_identifiers': ['HGNC:1119', 'UniProtKB:Q10589', 'ENSEMBL:ENSG00000130303', 'NCBIGene:684', 'NCBIGene:684']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.070162, 'id': '0417d8a3cf6e3e6eb4a175391141e8d1', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/molecular_entity/named_thing/{curie}': {'get': {'description': 'Returns one hop paths from molecular_entity with `curie` to target type named_thing.', 'summary': 'Get one hop results from molecular_entity to named_thing.', 'operationId': 'get_one_hop_molecular_entity_to_named_thing', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of molecular_entity that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'BST2', 'id': 'NCBIGene:684', 'equivalent_identifiers': ['HGNC:1119', 'UniProtKB:Q10589', 'ENSEMBL:ENSG00000130303', 'NCBIGene:684', 'NCBIGene:684']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.070162, 'id': '0417d8a3cf6e3e6eb4a175391141e8d1', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/molecular_entity/disease_or_phenotypic_feature/{curie}': {'get': {'description': 'Returns one hop paths from molecular_entity with `curie` to target type disease_or_phenotypic_feature.', 'summary': 'Get one hop results from molecular_entity to disease_or_phenotypic_feature.', 'operationId': 'get_one_hop_molecular_entity_to_disease_or_phenotypic_feature', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of molecular_entity that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'RALGAPA1', 'id': 'NCBIGene:253959', 'equivalent_identifiers': ['NCBIGene:253959', 'ENSEMBL:ENSG00000174373', 'HGNC:17770', 'NCBIGene:253959', 'UniProtKB:Q6GYQ0']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.0856352, 'id': '94ae41bee1bd664b0bb858655f903392', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/molecular_entity/disease/{curie}': {'get': {'description': 'Returns one hop paths from molecular_entity with `curie` to target type disease.', 'summary': 'Get one hop results from molecular_entity to disease.', 'operationId': 'get_one_hop_molecular_entity_to_disease', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of molecular_entity that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'RALGAPA1', 'id': 'NCBIGene:253959', 'equivalent_identifiers': ['NCBIGene:253959', 'ENSEMBL:ENSG00000174373', 'HGNC:17770', 'NCBIGene:253959', 'UniProtKB:Q6GYQ0']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.0856352, 'id': '94ae41bee1bd664b0bb858655f903392', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/macromolecular_machine/{curie}': {'get': {'description': 'Returns `macromolecular_machine` based on `curie`.', 'summary': 'Find macromolecular_machine by curie.', 'operationId': 'get_macromolecular_machine_by_curie', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of macromolecular_machine that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'synonyms': [], 'name': 'BST2', 'id': 'NCBIGene:684', 'equivalent_identifiers': ['HGNC:1119', 'UniProtKB:Q10589', 'ENSEMBL:ENSG00000130303', 'NCBIGene:684', 'NCBIGene:684']}]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/macromolecular_machine/biological_entity/{curie}': {'get': {'description': 'Returns one hop paths from macromolecular_machine with `curie` to target type biological_entity.', 'summary': 'Get one hop results from macromolecular_machine to biological_entity.', 'operationId': 'get_one_hop_macromolecular_machine_to_biological_entity', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of macromolecular_machine that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'BST2', 'id': 'NCBIGene:684', 'equivalent_identifiers': ['HGNC:1119', 'UniProtKB:Q10589', 'ENSEMBL:ENSG00000130303', 'NCBIGene:684', 'NCBIGene:684']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.070162, 'id': '0417d8a3cf6e3e6eb4a175391141e8d1', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/macromolecular_machine/named_thing/{curie}': {'get': {'description': 'Returns one hop paths from macromolecular_machine with `curie` to target type named_thing.', 'summary': 'Get one hop results from macromolecular_machine to named_thing.', 'operationId': 'get_one_hop_macromolecular_machine_to_named_thing', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of macromolecular_machine that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'BST2', 'id': 'NCBIGene:684', 'equivalent_identifiers': ['HGNC:1119', 'UniProtKB:Q10589', 'ENSEMBL:ENSG00000130303', 'NCBIGene:684', 'NCBIGene:684']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.070162, 'id': '0417d8a3cf6e3e6eb4a175391141e8d1', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/macromolecular_machine/disease_or_phenotypic_feature/{curie}': {'get': {'description': 'Returns one hop paths from macromolecular_machine with `curie` to target type disease_or_phenotypic_feature.', 'summary': 'Get one hop results from macromolecular_machine to disease_or_phenotypic_feature.', 'operationId': 'get_one_hop_macromolecular_machine_to_disease_or_phenotypic_feature', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of macromolecular_machine that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'RALGAPA1', 'id': 'NCBIGene:253959', 'equivalent_identifiers': ['NCBIGene:253959', 'ENSEMBL:ENSG00000174373', 'HGNC:17770', 'NCBIGene:253959', 'UniProtKB:Q6GYQ0']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.0856352, 'id': '94ae41bee1bd664b0bb858655f903392', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/macromolecular_machine/disease/{curie}': {'get': {'description': 'Returns one hop paths from macromolecular_machine with `curie` to target type disease.', 'summary': 'Get one hop results from macromolecular_machine to disease.', 'operationId': 'get_one_hop_macromolecular_machine_to_disease', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of macromolecular_machine that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'RALGAPA1', 'id': 'NCBIGene:253959', 'equivalent_identifiers': ['NCBIGene:253959', 'ENSEMBL:ENSG00000174373', 'HGNC:17770', 'NCBIGene:253959', 'UniProtKB:Q6GYQ0']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.0856352, 'id': '94ae41bee1bd664b0bb858655f903392', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/genomic_entity/{curie}': {'get': {'description': 'Returns `genomic_entity` based on `curie`.', 'summary': 'Find genomic_entity by curie.', 'operationId': 'get_genomic_entity_by_curie', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of genomic_entity that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'synonyms': [], 'name': 'BST2', 'id': 'NCBIGene:684', 'equivalent_identifiers': ['HGNC:1119', 'UniProtKB:Q10589', 'ENSEMBL:ENSG00000130303', 'NCBIGene:684', 'NCBIGene:684']}]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/genomic_entity/biological_entity/{curie}': {'get': {'description': 'Returns one hop paths from genomic_entity with `curie` to target type biological_entity.', 'summary': 'Get one hop results from genomic_entity to biological_entity.', 'operationId': 'get_one_hop_genomic_entity_to_biological_entity', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of genomic_entity that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'BST2', 'id': 'NCBIGene:684', 'equivalent_identifiers': ['HGNC:1119', 'UniProtKB:Q10589', 'ENSEMBL:ENSG00000130303', 'NCBIGene:684', 'NCBIGene:684']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.070162, 'id': '0417d8a3cf6e3e6eb4a175391141e8d1', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/genomic_entity/named_thing/{curie}': {'get': {'description': 'Returns one hop paths from genomic_entity with `curie` to target type named_thing.', 'summary': 'Get one hop results from genomic_entity to named_thing.', 'operationId': 'get_one_hop_genomic_entity_to_named_thing', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of genomic_entity that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'BST2', 'id': 'NCBIGene:684', 'equivalent_identifiers': ['HGNC:1119', 'UniProtKB:Q10589', 'ENSEMBL:ENSG00000130303', 'NCBIGene:684', 'NCBIGene:684']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.070162, 'id': '0417d8a3cf6e3e6eb4a175391141e8d1', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/genomic_entity/disease_or_phenotypic_feature/{curie}': {'get': {'description': 'Returns one hop paths from genomic_entity with `curie` to target type disease_or_phenotypic_feature.', 'summary': 'Get one hop results from genomic_entity to disease_or_phenotypic_feature.', 'operationId': 'get_one_hop_genomic_entity_to_disease_or_phenotypic_feature', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of genomic_entity that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'RALGAPA1', 'id': 'NCBIGene:253959', 'equivalent_identifiers': ['NCBIGene:253959', 'ENSEMBL:ENSG00000174373', 'HGNC:17770', 'NCBIGene:253959', 'UniProtKB:Q6GYQ0']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.0856352, 'id': '94ae41bee1bd664b0bb858655f903392', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/genomic_entity/disease/{curie}': {'get': {'description': 'Returns one hop paths from genomic_entity with `curie` to target type disease.', 'summary': 'Get one hop results from genomic_entity to disease.', 'operationId': 'get_one_hop_genomic_entity_to_disease', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of genomic_entity that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'RALGAPA1', 'id': 'NCBIGene:253959', 'equivalent_identifiers': ['NCBIGene:253959', 'ENSEMBL:ENSG00000174373', 'HGNC:17770', 'NCBIGene:253959', 'UniProtKB:Q6GYQ0']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.0856352, 'id': '94ae41bee1bd664b0bb858655f903392', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/gene_or_gene_product/{curie}': {'get': {'description': 'Returns `gene_or_gene_product` based on `curie`.', 'summary': 'Find gene_or_gene_product by curie.', 'operationId': 'get_gene_or_gene_product_by_curie', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of gene_or_gene_product that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'synonyms': [], 'name': 'BST2', 'id': 'NCBIGene:684', 'equivalent_identifiers': ['HGNC:1119', 'UniProtKB:Q10589', 'ENSEMBL:ENSG00000130303', 'NCBIGene:684', 'NCBIGene:684']}]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/gene_or_gene_product/biological_entity/{curie}': {'get': {'description': 'Returns one hop paths from gene_or_gene_product with `curie` to target type biological_entity.', 'summary': 'Get one hop results from gene_or_gene_product to biological_entity.', 'operationId': 'get_one_hop_gene_or_gene_product_to_biological_entity', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of gene_or_gene_product that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'BST2', 'id': 'NCBIGene:684', 'equivalent_identifiers': ['HGNC:1119', 'UniProtKB:Q10589', 'ENSEMBL:ENSG00000130303', 'NCBIGene:684', 'NCBIGene:684']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.070162, 'id': '0417d8a3cf6e3e6eb4a175391141e8d1', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/gene_or_gene_product/named_thing/{curie}': {'get': {'description': 'Returns one hop paths from gene_or_gene_product with `curie` to target type named_thing.', 'summary': 'Get one hop results from gene_or_gene_product to named_thing.', 'operationId': 'get_one_hop_gene_or_gene_product_to_named_thing', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of gene_or_gene_product that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'BST2', 'id': 'NCBIGene:684', 'equivalent_identifiers': ['HGNC:1119', 'UniProtKB:Q10589', 'ENSEMBL:ENSG00000130303', 'NCBIGene:684', 'NCBIGene:684']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.070162, 'id': '0417d8a3cf6e3e6eb4a175391141e8d1', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/gene_or_gene_product/disease_or_phenotypic_feature/{curie}': {'get': {'description': 'Returns one hop paths from gene_or_gene_product with `curie` to target type disease_or_phenotypic_feature.', 'summary': 'Get one hop results from gene_or_gene_product to disease_or_phenotypic_feature.', 'operationId': 'get_one_hop_gene_or_gene_product_to_disease_or_phenotypic_feature', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of gene_or_gene_product that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'RALGAPA1', 'id': 'NCBIGene:253959', 'equivalent_identifiers': ['NCBIGene:253959', 'ENSEMBL:ENSG00000174373', 'HGNC:17770', 'NCBIGene:253959', 'UniProtKB:Q6GYQ0']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.0856352, 'id': '94ae41bee1bd664b0bb858655f903392', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/gene_or_gene_product/disease/{curie}': {'get': {'description': 'Returns one hop paths from gene_or_gene_product with `curie` to target type disease.', 'summary': 'Get one hop results from gene_or_gene_product to disease.', 'operationId': 'get_one_hop_gene_or_gene_product_to_disease', 'parameters': [{'name': 'curie', 'in': 'path', 'description': 'The curie of gene_or_gene_product that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'synonyms': [], 'name': 'RALGAPA1', 'id': 'NCBIGene:253959', 'equivalent_identifiers': ['NCBIGene:253959', 'ENSEMBL:ENSG00000174373', 'HGNC:17770', 'NCBIGene:253959', 'UniProtKB:Q6GYQ0']}, {'predicate_id': 'WD:P2293', 'relation_label': 'gene_involved', 'edge_source': 'pharos.disease_get_gene', 'ctime': 1587820073.0856352, 'id': '94ae41bee1bd664b0bb858655f903392', 'source_database': 'pharos', 'relation': 'WD:P2293', 'publications': []}, {'synonyms': ['Ebola', 'Ebola fever', 'Ebola hemorrhagic fever', 'Ebola virus disease', 'Ebolavirus caused disease or disorder', 'Ebolavirus disease or disorder', 'Ebolavirus infectious disease', 'EHF', 'Hemorrhagic Fever, Ebola'], 'name': 'Ebola hemorrhagic fever', 'id': 'MONDO:0005737', 'equivalent_identifiers': ['ORPHANET:319218', 'EFO:0007243', 'MESH:D019142', 'MEDDRA:10014071', 'SNOMEDCT:37109004', 'MONDO:0005737', 'DOID:4325', 'NCIT:C36171', 'UMLS:C0282687']}]]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/graph/schema': {'get': {'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_graph_schema', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': [{'name': 'mytag'}]}}, '/cypher': {'post': {'summary': 'Run cypher query.', 'description': 'Runs cypher query against the Neo4j instance, and returns an equivalent response exepected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).', 'requestBody': {'description': 'Cypher query.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query': 'MATCH (c) return c limit 1'}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'results': [{'columns': ['c'], 'data': [{'row': [{'synonyms': [], 'id': 'SOURCE:10', 'equivalent_identifiers': ['SOURCE:10']}], 'meta': [{'id': 198107, 'type': 'node', 'deleted': False}]}]}], 'errors': []}}}}}}, 'tags': [{'name': 'mytag'}]}}, '/reasonerapi': {'get': {'description': 'Returns a list of question templates that can be used to query this plater instance/', 'operationId': 'get_question_templates', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}]}}}}}, 'tags': [{'name': 'mytag'}]}, 'post': {'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_question', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}, 'tags': [{'name': 'mytag'}]}}, '/simple_spec': {'get': {'description': 'Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.', 'operationId': 'get_simple_spec', 'parameters': [{'name': 'source', 'in': 'query', 'description': 'The curie of source that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'CHEBI:33216'}}, {'name': 'target', 'in': 'query', 'description': 'The curie of target that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'NCBIGene:1'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'source_type': 'chemical_substance', 'target_type': 'chemical_substance', 'edge_type': 'similar_to'}]}}}}}, 'tags': [{'name': 'mytag'}]}}, '/graph/summary': {'get': {'description': 'Returns summary of the graph', 'operationId': 'get_graph_summary', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance:molecular_entity:named_thing': {'gene:biological_entity:named_thing': {'directly_interacts_with': 20}}}}}}}}, 'tags': [{'name': 'mytag'}]}}}}
[automat.core.handle_request] - 2020-04-27 14:52:12,148 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-04-27 14:52:12,460 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-04-27 14:56:27,101 core.py 122 DEBUG: ['heartbeat']
[__main__.<module>] - 2020-05-04 13:34:01,624 main.py 21 INFO: [0] Webserver listening at 127.0.0.1:8081
[__main__.<module>] - 2020-05-04 13:34:05,816 main.py 12 INFO: [0] Starting web server
[__main__.<module>] - 2020-05-06 10:16:27,603 main.py 21 INFO: [0] Webserver listening at 127.0.0.1:8081
[__main__.<module>] - 2020-08-20 15:00:25,319 main.py 12 INFO: [0] Starting web server
[automat.core.handle_request] - 2020-08-20 15:01:12,522 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:01:19,940 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-08-20 15:01:20,554 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-08-20 15:01:20,555 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-08-20 15:01:20,665 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:01:20,688 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.util.async_client.async_get_json] - 2020-08-20 15:01:24,595 async_client.py 37 ERROR: Failed to get response from http://localhost:8091/openapi.json.
[automat.util.async_client.async_get_json] - 2020-08-20 15:01:24,647 async_client.py 38 DEBUG: None
[automat.core.get_swagger_paths] - 2020-08-20 15:01:24,647 core.py 202 ERROR: Internal server error Cannot connect to host localhost:8091 ssl:default [Connect call failed ('127.0.0.1', 8091)]
[automat.core.handle_request] - 2020-08-20 15:01:34,845 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-08-20 15:01:34,967 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-08-20 15:01:34,967 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-08-20 15:01:34,999 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:01:35,005 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.get_swagger_paths] - 2020-08-20 15:01:37,404 core.py 204 DEBUG: {'openapi': '3.0.2', 'info': {'title': 'PLATER - new_changes'}, 'paths': {'/{node_type}/{curie}': {'get': {'description': 'Returns `node` matching `curie`.', 'summary': 'Find `node` by `curie`.', 'operationId': 'get_source_node_by_curie', 'parameters': [{'name': 'node_type', 'in': 'path', 'description': 'Type of the to look for.', 'required': True, 'schema': {'type': 'string', 'enum': ['cellular_component', 'biological_entity', 'gene', 'named_thing', 'molecular_entity', 'anatomical_entity', 'gene_or_gene_product', 'organismal_entity', 'disease_or_phenotypic_feature', 'cell', 'chemical_substance', 'phenotypic_feature', 'clinical_modifier', 'biological_process_or_activity', 'biological_process', 'macromolecular_machine', 'biolink:NamedThing', 'genomic_entity', 'molecular_activity', 'disease', 'information_content_entity', 'clinical_trial']}}, {'name': 'curie', 'in': 'path', 'description': 'The curie of `source_node` that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'id': 'PATO:0000070', 'category': ['named_thing']}]}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/{source_node_type}/{target_node_type}/{curie}': {'get': {'description': 'Returns one hop paths from `source_node_type`  with `curie` to `target node type`.', 'summary': 'Get one hop results from source type to target type. Note: Please refer to `graph/schema` endpoint output to determine what target goes with a source', 'operationId': 'get_one_hop_source_node_type_to_target_node_type', 'parameters': [{'name': 'source_node_type', 'in': 'path', 'description': 'The node type of source node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['cellular_component', 'biological_entity', 'gene', 'named_thing', 'molecular_entity', 'anatomical_entity', 'gene_or_gene_product', 'organismal_entity', 'disease_or_phenotypic_feature', 'cell', 'chemical_substance', 'phenotypic_feature', 'clinical_modifier', 'biological_process_or_activity', 'biological_process', 'macromolecular_machine', 'biolink:NamedThing', 'genomic_entity', 'molecular_activity', 'disease', 'information_content_entity', 'clinical_trial']}}, {'name': 'target_node_type', 'in': 'path', 'description': 'The node type of target node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['cellular_component', 'biological_entity', 'gene', 'named_thing', 'molecular_entity', 'anatomical_entity', 'gene_or_gene_product', 'organismal_entity', 'disease_or_phenotypic_feature', 'cell', 'chemical_substance', 'phenotypic_feature', 'clinical_modifier', 'biological_process_or_activity', 'biological_process', 'macromolecular_machine', 'biolink:NamedThing', 'genomic_entity', 'molecular_activity', 'disease', 'information_content_entity', 'clinical_trial']}}, {'name': 'curie', 'in': 'path', 'description': 'The `curie` for the `source_node_type` that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'id': 'PATO:0000070', 'category': ['named_thing']}, {'predicate': 'OBO:RO_0002434', 'subject': 'PATO:0000070', 'provided_by': ['renci.bdc.semanticsearch.annotator'], 'id': '9af7d330f6935a5ef6a0068ff928ba0b', 'category': ['association'], 'edge_label': 'association', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type': 'OBAN:association', 'object': 'TOPMED.TAG:1'}, {'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}]]}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/graph/schema': {'get': {'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_graph_schema', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/cypher': {'post': {'summary': 'Run cypher query.', 'description': 'Runs cypher query against the Neo4j instance, and returns an equivalent response exepected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).', 'requestBody': {'description': 'Cypher query.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query': 'MATCH (c) return c limit 1'}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'results': [{'columns': ['c'], 'data': [{'row': [{'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}], 'meta': [{'id': 0, 'type': 'node', 'deleted': False}]}]}], 'errors': []}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/reasonerapi': {'get': {'description': 'Returns a list of question templates that can be used to query this plater instance/', 'operationId': 'get_question_templates', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}]}}}}}, 'tags': [{'name': 'new_changes'}]}, 'post': {'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_question', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/simple_spec': {'get': {'description': 'Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.', 'operationId': 'get_simple_spec', 'parameters': [{'name': 'source', 'in': 'query', 'description': 'The curie of source that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'CHEBI:33216'}}, {'name': 'target', 'in': 'query', 'description': 'The curie of target that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'NCBIGene:1'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'source_type': 'chemical_substance', 'target_type': 'chemical_substance', 'edge_type': 'similar_to'}]}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/graph/summary': {'get': {'description': 'Returns summary of the graph', 'operationId': 'get_graph_summary', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance:molecular_entity:named_thing': {'gene:biological_entity:named_thing': {'directly_interacts_with': 20}}}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/overlay': {'post': {'description': 'Given a reasonerAPI graph add support edges for any nodes linked in result bindings.', 'operationId': 'post_reasoner_api_graph', 'requestBody': {'description': 'Reasoner api graph.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}, {'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'support_edge_id', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}, {'kg_id': 'support_edge_id', 'q_id': 's_0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}}}, 'tags': [{'name': 'new_changes'}]}}}}
[automat.core.handle_request] - 2020-08-20 15:01:42,628 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:01:42,637 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 15:01:43,038 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:02:13,557 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:02:44,066 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:03:14,583 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:03:45,099 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:04:15,608 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:04:46,126 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:05:06,114 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:05:23,995 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-08-20 15:05:24,127 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-08-20 15:05:24,127 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-08-20 15:05:24,147 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:05:24,160 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.get_swagger_paths] - 2020-08-20 15:05:26,293 core.py 204 DEBUG: {'openapi': '3.0.2', 'info': {'title': 'PLATER - new_changes'}, 'paths': {'/{node_type}/{curie}': {'get': {'description': 'Returns `node` matching `curie`.', 'summary': 'Find `node` by `curie`.', 'operationId': 'get_source_node_by_curie', 'parameters': [{'name': 'node_type', 'in': 'path', 'description': 'Type of the to look for.', 'required': True, 'schema': {'type': 'string', 'enum': ['cellular_component', 'phenotypic_feature', 'chemical_substance', 'information_content_entity', 'molecular_entity', 'disease_or_phenotypic_feature', 'clinical_trial', 'gene_or_gene_product', 'biolink:NamedThing', 'molecular_activity', 'macromolecular_machine', 'anatomical_entity', 'biological_entity', 'clinical_modifier', 'cell', 'biological_process', 'biological_process_or_activity', 'organismal_entity', 'named_thing', 'disease', 'gene', 'genomic_entity']}}, {'name': 'curie', 'in': 'path', 'description': 'The curie of `source_node` that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'id': 'PATO:0000070', 'category': ['named_thing']}]}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/{source_node_type}/{target_node_type}/{curie}': {'get': {'description': 'Returns one hop paths from `source_node_type`  with `curie` to `target node type`.', 'summary': 'Get one hop results from source type to target type. Note: Please refer to `graph/schema` endpoint output to determine what target goes with a source', 'operationId': 'get_one_hop_source_node_type_to_target_node_type', 'parameters': [{'name': 'source_node_type', 'in': 'path', 'description': 'The node type of source node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['cellular_component', 'phenotypic_feature', 'chemical_substance', 'information_content_entity', 'molecular_entity', 'disease_or_phenotypic_feature', 'clinical_trial', 'gene_or_gene_product', 'biolink:NamedThing', 'molecular_activity', 'macromolecular_machine', 'anatomical_entity', 'biological_entity', 'clinical_modifier', 'cell', 'biological_process', 'biological_process_or_activity', 'organismal_entity', 'named_thing', 'disease', 'gene', 'genomic_entity']}}, {'name': 'target_node_type', 'in': 'path', 'description': 'The node type of target node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['cellular_component', 'phenotypic_feature', 'chemical_substance', 'information_content_entity', 'molecular_entity', 'disease_or_phenotypic_feature', 'clinical_trial', 'gene_or_gene_product', 'biolink:NamedThing', 'molecular_activity', 'macromolecular_machine', 'anatomical_entity', 'biological_entity', 'clinical_modifier', 'cell', 'biological_process', 'biological_process_or_activity', 'organismal_entity', 'named_thing', 'disease', 'gene', 'genomic_entity']}}, {'name': 'curie', 'in': 'path', 'description': 'The `curie` for the `source_node_type` that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'id': 'PATO:0000070', 'category': ['named_thing']}, {'predicate': 'OBO:RO_0002434', 'subject': 'PATO:0000070', 'provided_by': ['renci.bdc.semanticsearch.annotator'], 'id': '9af7d330f6935a5ef6a0068ff928ba0b', 'category': ['association'], 'edge_label': 'association', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type': 'OBAN:association', 'object': 'TOPMED.TAG:1'}, {'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}]]}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/graph/schema': {'get': {'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_graph_schema', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/cypher': {'post': {'summary': 'Run cypher query.', 'description': 'Runs cypher query against the Neo4j instance, and returns an equivalent response exepected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).', 'requestBody': {'description': 'Cypher query.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query': 'MATCH (c) return c limit 1'}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'results': [{'columns': ['c'], 'data': [{'row': [{'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}], 'meta': [{'id': 0, 'type': 'node', 'deleted': False}]}]}], 'errors': []}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/reasonerapi': {'get': {'description': 'Returns a list of question templates that can be used to query this plater instance/', 'operationId': 'get_question_templates', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}]}}}}}, 'tags': [{'name': 'new_changes'}]}, 'post': {'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_question', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/simple_spec': {'get': {'description': 'Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.', 'operationId': 'get_simple_spec', 'parameters': [{'name': 'source', 'in': 'query', 'description': 'The curie of source that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'CHEBI:33216'}}, {'name': 'target', 'in': 'query', 'description': 'The curie of target that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'NCBIGene:1'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'source_type': 'chemical_substance', 'target_type': 'chemical_substance', 'edge_type': 'similar_to'}]}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/graph/summary': {'get': {'description': 'Returns summary of the graph', 'operationId': 'get_graph_summary', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance:molecular_entity:named_thing': {'gene:biological_entity:named_thing': {'directly_interacts_with': 20}}}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/overlay': {'post': {'description': 'Given a reasonerAPI graph add support edges for any nodes linked in result bindings.', 'operationId': 'post_reasoner_api_graph', 'requestBody': {'description': 'Reasoner api graph.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}, {'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'support_edge_id', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}, {'kg_id': 'support_edge_id', 'q_id': 's_0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}}}, 'tags': [{'name': 'new_changes'}]}}}}
[automat.core.handle_request] - 2020-08-20 15:05:27,461 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:05:27,483 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 15:05:36,622 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:06:07,130 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:06:37,637 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:06:45,480 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:06:45,490 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 15:07:08,153 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:07:38,668 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:08:09,183 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:08:39,689 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:08:50,759 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:08:52,739 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-08-20 15:08:53,338 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-08-20 15:08:53,338 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-08-20 15:08:53,425 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:08:53,436 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.util.async_client.async_get_json] - 2020-08-20 15:08:57,349 async_client.py 37 ERROR: Failed to get response from http://localhost:8091/openapi.json.
[automat.util.async_client.async_get_json] - 2020-08-20 15:08:57,350 async_client.py 38 DEBUG: None
[automat.core.get_swagger_paths] - 2020-08-20 15:08:57,350 core.py 202 ERROR: Internal server error Cannot connect to host localhost:8091 ssl:default [Connect call failed ('127.0.0.1', 8091)]
[automat.core.handle_request] - 2020-08-20 15:09:00,207 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-08-20 15:09:00,803 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-08-20 15:09:00,804 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-08-20 15:09:00,899 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:09:00,917 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.util.async_client.async_get_json] - 2020-08-20 15:09:04,822 async_client.py 37 ERROR: Failed to get response from http://localhost:8091/openapi.json.
[automat.util.async_client.async_get_json] - 2020-08-20 15:09:04,824 async_client.py 38 DEBUG: None
[automat.core.get_swagger_paths] - 2020-08-20 15:09:04,824 core.py 202 ERROR: Internal server error Cannot connect to host localhost:8091 ssl:default [Connect call failed ('127.0.0.1', 8091)]
[automat.core.handle_request] - 2020-08-20 15:09:08,584 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-08-20 15:09:09,017 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-08-20 15:09:09,017 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-08-20 15:09:09,063 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:09:09,099 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.get_swagger_paths] - 2020-08-20 15:09:11,206 core.py 204 DEBUG: {'openapi': '3.0.2', 'info': {'title': 'PLATER - new_changes'}, 'paths': {'/{node_type}/{curie}': {'get': {'description': 'Returns `node` matching `curie`.', 'summary': 'Find `node` by `curie`.', 'operationId': 'get_source_node_by_curie', 'parameters': [{'name': 'node_type', 'in': 'path', 'description': 'Type of the to look for.', 'required': True, 'schema': {'type': 'string', 'enum': ['biological_process_or_activity', 'cellular_component', 'macromolecular_machine', 'biological_process', 'chemical_substance', 'disease_or_phenotypic_feature', 'organismal_entity', 'cell', 'gene_or_gene_product', 'clinical_trial', 'molecular_entity', 'biological_entity', 'gene', 'clinical_modifier', 'molecular_activity', 'anatomical_entity', 'biolink:NamedThing', 'information_content_entity', 'genomic_entity', 'disease', 'phenotypic_feature', 'named_thing']}}, {'name': 'curie', 'in': 'path', 'description': 'The curie of `source_node` that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'id': 'PATO:0000070', 'category': ['named_thing']}]}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/{source_node_type}/{target_node_type}/{curie}': {'get': {'description': 'Returns one hop paths from `source_node_type`  with `curie` to `target node type`.', 'summary': 'Get one hop results from source type to target type. Note: Please refer to `graph/schema` endpoint output to determine what target goes with a source', 'operationId': 'get_one_hop_source_node_type_to_target_node_type', 'parameters': [{'name': 'source_node_type', 'in': 'path', 'description': 'The node type of source node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['biological_process_or_activity', 'cellular_component', 'macromolecular_machine', 'biological_process', 'chemical_substance', 'disease_or_phenotypic_feature', 'organismal_entity', 'cell', 'gene_or_gene_product', 'clinical_trial', 'molecular_entity', 'biological_entity', 'gene', 'clinical_modifier', 'molecular_activity', 'anatomical_entity', 'biolink:NamedThing', 'information_content_entity', 'genomic_entity', 'disease', 'phenotypic_feature', 'named_thing']}}, {'name': 'target_node_type', 'in': 'path', 'description': 'The node type of target node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['biological_process_or_activity', 'cellular_component', 'macromolecular_machine', 'biological_process', 'chemical_substance', 'disease_or_phenotypic_feature', 'organismal_entity', 'cell', 'gene_or_gene_product', 'clinical_trial', 'molecular_entity', 'biological_entity', 'gene', 'clinical_modifier', 'molecular_activity', 'anatomical_entity', 'biolink:NamedThing', 'information_content_entity', 'genomic_entity', 'disease', 'phenotypic_feature', 'named_thing']}}, {'name': 'curie', 'in': 'path', 'description': 'The `curie` for the `source_node_type` that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'id': 'PATO:0000070', 'category': ['named_thing']}, {'predicate': 'OBO:RO_0002434', 'subject': 'PATO:0000070', 'provided_by': ['renci.bdc.semanticsearch.annotator'], 'id': '9af7d330f6935a5ef6a0068ff928ba0b', 'category': ['association'], 'edge_label': 'association', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type': 'OBAN:association', 'object': 'TOPMED.TAG:1'}, {'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}]]}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/graph/schema': {'get': {'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_graph_schema', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/cypher': {'post': {'summary': 'Run cypher query.', 'description': 'Runs cypher query against the Neo4j instance, and returns an equivalent response exepected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).', 'requestBody': {'description': 'Cypher query.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query': 'MATCH (c) return c limit 1'}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'results': [{'columns': ['c'], 'data': [{'row': [{'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}], 'meta': [{'id': 0, 'type': 'node', 'deleted': False}]}]}], 'errors': []}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/reasonerapi': {'get': {'description': 'Returns a list of question templates that can be used to query this plater instance/', 'operationId': 'get_question_templates', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}]}}}}}, 'tags': [{'name': 'new_changes'}]}, 'post': {'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_question', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/simple_spec': {'get': {'description': 'Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.', 'operationId': 'get_simple_spec', 'parameters': [{'name': 'source', 'in': 'query', 'description': 'The curie of source that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'CHEBI:33216'}}, {'name': 'target', 'in': 'query', 'description': 'The curie of target that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'NCBIGene:1'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'source_type': 'chemical_substance', 'target_type': 'chemical_substance', 'edge_type': 'similar_to'}]}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/graph/summary': {'get': {'description': 'Returns summary of the graph', 'operationId': 'get_graph_summary', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance:molecular_entity:named_thing': {'gene:biological_entity:named_thing': {'directly_interacts_with': 20}}}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/overlay': {'post': {'description': 'Given a reasonerAPI graph add support edges for any nodes linked in result bindings.', 'operationId': 'post_reasoner_api_graph', 'requestBody': {'description': 'Reasoner api graph.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}, {'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'support_edge_id', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}, {'kg_id': 'support_edge_id', 'q_id': 's_0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}}}, 'tags': [{'name': 'new_changes'}]}}}, 'tags': [{'name': 'new_changes', 'description': 'hhhhhhh'}]}
[automat.core.handle_request] - 2020-08-20 15:09:12,307 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:09:12,315 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 15:09:15,723 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:09:15,901 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 15:09:16,604 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:09:16,612 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 15:09:17,631 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:09:17,661 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 15:09:21,266 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:09:51,782 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:10:22,299 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:10:52,804 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:11:23,320 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:11:53,826 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:12:24,341 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:12:54,848 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:13:25,354 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:13:55,869 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:14:26,383 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:14:56,900 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:15:27,406 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:15:57,921 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:16:28,437 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:16:58,943 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:17:29,460 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:17:59,975 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:18:30,490 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:19:00,997 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:19:31,513 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:20:02,027 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:20:32,541 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:21:03,048 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:21:33,553 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:22:04,060 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:22:34,579 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:23:05,094 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:23:35,610 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:23:48,404 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-08-20 15:23:48,404 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.get_swagger_paths] - 2020-08-20 15:23:50,561 core.py 204 DEBUG: {'openapi': '3.0.2', 'info': {'title': 'PLATER - new_changes'}, 'paths': {'/{node_type}/{curie}': {'get': {'description': 'Returns `node` matching `curie`.', 'summary': 'Find `node` by `curie`.', 'operationId': 'get_source_node_by_curie', 'parameters': [{'name': 'node_type', 'in': 'path', 'description': 'Type of the to look for.', 'required': True, 'schema': {'type': 'string', 'enum': ['biological_process_or_activity', 'cellular_component', 'macromolecular_machine', 'biological_process', 'chemical_substance', 'disease_or_phenotypic_feature', 'organismal_entity', 'cell', 'gene_or_gene_product', 'clinical_trial', 'molecular_entity', 'biological_entity', 'gene', 'clinical_modifier', 'molecular_activity', 'anatomical_entity', 'biolink:NamedThing', 'information_content_entity', 'genomic_entity', 'disease', 'phenotypic_feature', 'named_thing']}}, {'name': 'curie', 'in': 'path', 'description': 'The curie of `source_node` that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'id': 'PATO:0000070', 'category': ['named_thing']}]}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/{source_node_type}/{target_node_type}/{curie}': {'get': {'description': 'Returns one hop paths from `source_node_type`  with `curie` to `target node type`.', 'summary': 'Get one hop results from source type to target type. Note: Please refer to `graph/schema` endpoint output to determine what target goes with a source', 'operationId': 'get_one_hop_source_node_type_to_target_node_type', 'parameters': [{'name': 'source_node_type', 'in': 'path', 'description': 'The node type of source node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['biological_process_or_activity', 'cellular_component', 'macromolecular_machine', 'biological_process', 'chemical_substance', 'disease_or_phenotypic_feature', 'organismal_entity', 'cell', 'gene_or_gene_product', 'clinical_trial', 'molecular_entity', 'biological_entity', 'gene', 'clinical_modifier', 'molecular_activity', 'anatomical_entity', 'biolink:NamedThing', 'information_content_entity', 'genomic_entity', 'disease', 'phenotypic_feature', 'named_thing']}}, {'name': 'target_node_type', 'in': 'path', 'description': 'The node type of target node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['biological_process_or_activity', 'cellular_component', 'macromolecular_machine', 'biological_process', 'chemical_substance', 'disease_or_phenotypic_feature', 'organismal_entity', 'cell', 'gene_or_gene_product', 'clinical_trial', 'molecular_entity', 'biological_entity', 'gene', 'clinical_modifier', 'molecular_activity', 'anatomical_entity', 'biolink:NamedThing', 'information_content_entity', 'genomic_entity', 'disease', 'phenotypic_feature', 'named_thing']}}, {'name': 'curie', 'in': 'path', 'description': 'The `curie` for the `source_node_type` that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'id': 'PATO:0000070', 'category': ['named_thing']}, {'predicate': 'OBO:RO_0002434', 'subject': 'PATO:0000070', 'provided_by': ['renci.bdc.semanticsearch.annotator'], 'id': '9af7d330f6935a5ef6a0068ff928ba0b', 'category': ['association'], 'edge_label': 'association', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type': 'OBAN:association', 'object': 'TOPMED.TAG:1'}, {'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}]]}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/graph/schema': {'get': {'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_graph_schema', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/cypher': {'post': {'summary': 'Run cypher query.', 'description': 'Runs cypher query against the Neo4j instance, and returns an equivalent response exepected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).', 'requestBody': {'description': 'Cypher query.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query': 'MATCH (c) return c limit 1'}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'results': [{'columns': ['c'], 'data': [{'row': [{'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}], 'meta': [{'id': 0, 'type': 'node', 'deleted': False}]}]}], 'errors': []}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/reasonerapi': {'get': {'description': 'Returns a list of question templates that can be used to query this plater instance/', 'operationId': 'get_question_templates', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}]}}}}}, 'tags': [{'name': 'new_changes'}]}, 'post': {'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_question', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/simple_spec': {'get': {'description': 'Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.', 'operationId': 'get_simple_spec', 'parameters': [{'name': 'source', 'in': 'query', 'description': 'The curie of source that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'CHEBI:33216'}}, {'name': 'target', 'in': 'query', 'description': 'The curie of target that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'NCBIGene:1'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'source_type': 'chemical_substance', 'target_type': 'chemical_substance', 'edge_type': 'similar_to'}]}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/graph/summary': {'get': {'description': 'Returns summary of the graph', 'operationId': 'get_graph_summary', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance:molecular_entity:named_thing': {'gene:biological_entity:named_thing': {'directly_interacts_with': 20}}}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/overlay': {'post': {'description': 'Given a reasonerAPI graph add support edges for any nodes linked in result bindings.', 'operationId': 'post_reasoner_api_graph', 'requestBody': {'description': 'Reasoner api graph.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}, {'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'support_edge_id', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}, {'kg_id': 'support_edge_id', 'q_id': 's_0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}}}, 'tags': [{'name': 'new_changes'}]}}}, 'tags': [{'name': 'new_changes', 'description': 'hhhhhhh'}]}
[automat.core.handle_request] - 2020-08-20 15:23:50,726 core.py 122 DEBUG: ['favicon.ico']
[automat.core.handle_request] - 2020-08-20 15:24:06,125 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:24:36,641 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:25:07,145 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:25:37,662 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:26:08,178 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:26:38,692 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:27:09,198 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:27:39,704 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:28:10,295 core.py 122 DEBUG: ['heartbeat']
[__main__.<module>] - 2020-08-20 15:28:21,437 main.py 12 INFO: [0] Starting web server
[automat.core.handle_request] - 2020-08-20 15:28:40,801 core.py 126 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:28:51,073 core.py 126 DEBUG: []
[automat.core.handle_request] - 2020-08-20 15:28:51,499 core.py 126 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-08-20 15:28:51,500 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-08-20 15:28:51,573 core.py 126 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:28:51,580 core.py 126 DEBUG: ['favicon-16x16.png']
[automat.core.get_swagger_paths] - 2020-08-20 15:28:53,680 core.py 208 DEBUG: {'openapi': '3.0.2', 'info': {'title': 'PLATER - new_changes'}, 'paths': {'/{node_type}/{curie}': {'get': {'description': 'Returns `node` matching `curie`.', 'summary': 'Find `node` by `curie`.', 'operationId': 'get_source_node_by_curie', 'parameters': [{'name': 'node_type', 'in': 'path', 'description': 'Type of the to look for.', 'required': True, 'schema': {'type': 'string', 'enum': ['biological_process_or_activity', 'cellular_component', 'macromolecular_machine', 'biological_process', 'chemical_substance', 'disease_or_phenotypic_feature', 'organismal_entity', 'cell', 'gene_or_gene_product', 'clinical_trial', 'molecular_entity', 'biological_entity', 'gene', 'clinical_modifier', 'molecular_activity', 'anatomical_entity', 'biolink:NamedThing', 'information_content_entity', 'genomic_entity', 'disease', 'phenotypic_feature', 'named_thing']}}, {'name': 'curie', 'in': 'path', 'description': 'The curie of `source_node` that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'id': 'PATO:0000070', 'category': ['named_thing']}]}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/{source_node_type}/{target_node_type}/{curie}': {'get': {'description': 'Returns one hop paths from `source_node_type`  with `curie` to `target node type`.', 'summary': 'Get one hop results from source type to target type. Note: Please refer to `graph/schema` endpoint output to determine what target goes with a source', 'operationId': 'get_one_hop_source_node_type_to_target_node_type', 'parameters': [{'name': 'source_node_type', 'in': 'path', 'description': 'The node type of source node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['biological_process_or_activity', 'cellular_component', 'macromolecular_machine', 'biological_process', 'chemical_substance', 'disease_or_phenotypic_feature', 'organismal_entity', 'cell', 'gene_or_gene_product', 'clinical_trial', 'molecular_entity', 'biological_entity', 'gene', 'clinical_modifier', 'molecular_activity', 'anatomical_entity', 'biolink:NamedThing', 'information_content_entity', 'genomic_entity', 'disease', 'phenotypic_feature', 'named_thing']}}, {'name': 'target_node_type', 'in': 'path', 'description': 'The node type of target node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['biological_process_or_activity', 'cellular_component', 'macromolecular_machine', 'biological_process', 'chemical_substance', 'disease_or_phenotypic_feature', 'organismal_entity', 'cell', 'gene_or_gene_product', 'clinical_trial', 'molecular_entity', 'biological_entity', 'gene', 'clinical_modifier', 'molecular_activity', 'anatomical_entity', 'biolink:NamedThing', 'information_content_entity', 'genomic_entity', 'disease', 'phenotypic_feature', 'named_thing']}}, {'name': 'curie', 'in': 'path', 'description': 'The `curie` for the `source_node_type` that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'id': 'PATO:0000070', 'category': ['named_thing']}, {'predicate': 'OBO:RO_0002434', 'subject': 'PATO:0000070', 'provided_by': ['renci.bdc.semanticsearch.annotator'], 'id': '9af7d330f6935a5ef6a0068ff928ba0b', 'category': ['association'], 'edge_label': 'association', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type': 'OBAN:association', 'object': 'TOPMED.TAG:1'}, {'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}]]}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/graph/schema': {'get': {'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_graph_schema', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/cypher': {'post': {'summary': 'Run cypher query.', 'description': 'Runs cypher query against the Neo4j instance, and returns an equivalent response exepected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).', 'requestBody': {'description': 'Cypher query.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query': 'MATCH (c) return c limit 1'}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'results': [{'columns': ['c'], 'data': [{'row': [{'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}], 'meta': [{'id': 0, 'type': 'node', 'deleted': False}]}]}], 'errors': []}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/reasonerapi': {'get': {'description': 'Returns a list of question templates that can be used to query this plater instance/', 'operationId': 'get_question_templates', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}]}}}}}, 'tags': [{'name': 'new_changes'}]}, 'post': {'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_question', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/simple_spec': {'get': {'description': 'Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.', 'operationId': 'get_simple_spec', 'parameters': [{'name': 'source', 'in': 'query', 'description': 'The curie of source that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'CHEBI:33216'}}, {'name': 'target', 'in': 'query', 'description': 'The curie of target that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'NCBIGene:1'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'source_type': 'chemical_substance', 'target_type': 'chemical_substance', 'edge_type': 'similar_to'}]}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/graph/summary': {'get': {'description': 'Returns summary of the graph', 'operationId': 'get_graph_summary', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance:molecular_entity:named_thing': {'gene:biological_entity:named_thing': {'directly_interacts_with': 20}}}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/overlay': {'post': {'description': 'Given a reasonerAPI graph add support edges for any nodes linked in result bindings.', 'operationId': 'post_reasoner_api_graph', 'requestBody': {'description': 'Reasoner api graph.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}, {'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'support_edge_id', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}, {'kg_id': 'support_edge_id', 'q_id': 's_0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}}}, 'tags': [{'name': 'new_changes'}]}}}, 'tags': [{'name': 'new_changes', 'description': 'hhhhhhh'}]}
[automat.core.handle_request] - 2020-08-20 15:28:56,395 core.py 126 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:28:56,403 core.py 126 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 15:28:58,031 core.py 126 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:28:58,036 core.py 126 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 15:28:58,879 core.py 126 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:28:58,886 core.py 126 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 15:28:59,709 core.py 126 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:28:59,715 core.py 126 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 15:29:00,589 core.py 126 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:29:00,594 core.py 126 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 15:29:01,505 core.py 126 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:29:01,512 core.py 126 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 15:29:01,720 core.py 126 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:29:01,726 core.py 126 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 15:29:02,600 core.py 126 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:29:02,608 core.py 126 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 15:29:02,785 core.py 126 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:29:02,792 core.py 126 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 15:29:03,004 core.py 126 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:29:03,012 core.py 126 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 15:29:03,439 core.py 126 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:29:03,445 core.py 126 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 15:29:03,978 core.py 126 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:29:03,984 core.py 126 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 15:29:04,963 core.py 126 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:29:04,969 core.py 126 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 15:29:06,048 core.py 126 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:29:06,053 core.py 126 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 15:29:07,341 core.py 126 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:29:07,346 core.py 126 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 15:29:11,306 core.py 126 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:29:22,456 core.py 126 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:29:22,463 core.py 126 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 15:29:25,239 core.py 126 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:29:25,244 core.py 126 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 15:29:41,822 core.py 126 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:29:52,297 core.py 126 DEBUG: []
[automat.core.handle_request] - 2020-08-20 15:29:52,575 core.py 126 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-08-20 15:29:52,575 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-08-20 15:29:52,633 core.py 126 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:29:52,641 core.py 126 DEBUG: ['favicon-16x16.png']
[automat.core.get_swagger_paths] - 2020-08-20 15:29:54,749 core.py 208 DEBUG: {'openapi': '3.0.2', 'info': {'title': 'PLATER - new_changes'}, 'paths': {'/{node_type}/{curie}': {'get': {'description': 'Returns `node` matching `curie`.', 'summary': 'Find `node` by `curie`.', 'operationId': 'get_source_node_by_curie', 'parameters': [{'name': 'node_type', 'in': 'path', 'description': 'Type of the to look for.', 'required': True, 'schema': {'type': 'string', 'enum': ['biological_process_or_activity', 'cellular_component', 'macromolecular_machine', 'biological_process', 'chemical_substance', 'disease_or_phenotypic_feature', 'organismal_entity', 'cell', 'gene_or_gene_product', 'clinical_trial', 'molecular_entity', 'biological_entity', 'gene', 'clinical_modifier', 'molecular_activity', 'anatomical_entity', 'biolink:NamedThing', 'information_content_entity', 'genomic_entity', 'disease', 'phenotypic_feature', 'named_thing']}}, {'name': 'curie', 'in': 'path', 'description': 'The curie of `source_node` that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'id': 'PATO:0000070', 'category': ['named_thing']}]}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/{source_node_type}/{target_node_type}/{curie}': {'get': {'description': 'Returns one hop paths from `source_node_type`  with `curie` to `target node type`.', 'summary': 'Get one hop results from source type to target type. Note: Please refer to `graph/schema` endpoint output to determine what target goes with a source', 'operationId': 'get_one_hop_source_node_type_to_target_node_type', 'parameters': [{'name': 'source_node_type', 'in': 'path', 'description': 'The node type of source node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['biological_process_or_activity', 'cellular_component', 'macromolecular_machine', 'biological_process', 'chemical_substance', 'disease_or_phenotypic_feature', 'organismal_entity', 'cell', 'gene_or_gene_product', 'clinical_trial', 'molecular_entity', 'biological_entity', 'gene', 'clinical_modifier', 'molecular_activity', 'anatomical_entity', 'biolink:NamedThing', 'information_content_entity', 'genomic_entity', 'disease', 'phenotypic_feature', 'named_thing']}}, {'name': 'target_node_type', 'in': 'path', 'description': 'The node type of target node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['biological_process_or_activity', 'cellular_component', 'macromolecular_machine', 'biological_process', 'chemical_substance', 'disease_or_phenotypic_feature', 'organismal_entity', 'cell', 'gene_or_gene_product', 'clinical_trial', 'molecular_entity', 'biological_entity', 'gene', 'clinical_modifier', 'molecular_activity', 'anatomical_entity', 'biolink:NamedThing', 'information_content_entity', 'genomic_entity', 'disease', 'phenotypic_feature', 'named_thing']}}, {'name': 'curie', 'in': 'path', 'description': 'The `curie` for the `source_node_type` that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'id': 'PATO:0000070', 'category': ['named_thing']}, {'predicate': 'OBO:RO_0002434', 'subject': 'PATO:0000070', 'provided_by': ['renci.bdc.semanticsearch.annotator'], 'id': '9af7d330f6935a5ef6a0068ff928ba0b', 'category': ['association'], 'edge_label': 'association', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type': 'OBAN:association', 'object': 'TOPMED.TAG:1'}, {'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}]]}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/graph/schema': {'get': {'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_graph_schema', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/cypher': {'post': {'summary': 'Run cypher query.', 'description': 'Runs cypher query against the Neo4j instance, and returns an equivalent response exepected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).', 'requestBody': {'description': 'Cypher query.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query': 'MATCH (c) return c limit 1'}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'results': [{'columns': ['c'], 'data': [{'row': [{'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}], 'meta': [{'id': 0, 'type': 'node', 'deleted': False}]}]}], 'errors': []}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/reasonerapi': {'get': {'description': 'Returns a list of question templates that can be used to query this plater instance/', 'operationId': 'get_question_templates', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}]}}}}}, 'tags': [{'name': 'new_changes'}]}, 'post': {'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_question', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/simple_spec': {'get': {'description': 'Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.', 'operationId': 'get_simple_spec', 'parameters': [{'name': 'source', 'in': 'query', 'description': 'The curie of source that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'CHEBI:33216'}}, {'name': 'target', 'in': 'query', 'description': 'The curie of target that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'NCBIGene:1'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'source_type': 'chemical_substance', 'target_type': 'chemical_substance', 'edge_type': 'similar_to'}]}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/graph/summary': {'get': {'description': 'Returns summary of the graph', 'operationId': 'get_graph_summary', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance:molecular_entity:named_thing': {'gene:biological_entity:named_thing': {'directly_interacts_with': 20}}}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/overlay': {'post': {'description': 'Given a reasonerAPI graph add support edges for any nodes linked in result bindings.', 'operationId': 'post_reasoner_api_graph', 'requestBody': {'description': 'Reasoner api graph.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}, {'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'support_edge_id', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}, {'kg_id': 'support_edge_id', 'q_id': 's_0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}}}, 'tags': [{'name': 'new_changes'}]}}}, 'tags': [{'name': 'new_changes', 'description': 'hhhhhhh'}]}
[automat.core.handle_request] - 2020-08-20 15:30:12,337 core.py 126 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:30:42,853 core.py 126 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:31:13,370 core.py 126 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:31:43,874 core.py 126 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:32:14,389 core.py 126 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:32:44,904 core.py 126 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:33:15,420 core.py 126 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:33:45,926 core.py 126 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:34:16,441 core.py 126 DEBUG: ['heartbeat']
[__main__.<module>] - 2020-08-20 15:34:35,587 main.py 12 INFO: [0] Starting web server
[automat.core.handle_request] - 2020-08-20 15:34:46,947 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:35:17,464 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:35:47,979 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:36:18,493 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:36:49,009 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:37:19,525 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:37:50,031 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:38:20,538 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:38:51,053 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:39:20,072 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:39:41,379 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-08-20 15:39:41,476 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-08-20 15:39:41,476 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-08-20 15:39:41,509 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:39:41,631 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.get_swagger_paths] - 2020-08-20 15:39:43,655 core.py 204 DEBUG: {'openapi': '3.0.2', 'info': {'title': 'PLATER - new_changes'}, 'paths': {'/{node_type}/{curie}': {'get': {'description': 'Returns `node` matching `curie`.', 'summary': 'Find `node` by `curie`.', 'operationId': 'get_source_node_by_curie', 'parameters': [{'name': 'node_type', 'in': 'path', 'description': 'Type of the to look for.', 'required': True, 'schema': {'type': 'string', 'enum': ['cell', 'biological_process_or_activity', 'biological_process', 'clinical_trial', 'anatomical_entity', 'phenotypic_feature', 'genomic_entity', 'clinical_modifier', 'biological_entity', 'gene_or_gene_product', 'macromolecular_machine', 'disease_or_phenotypic_feature', 'gene', 'molecular_activity', 'organismal_entity', 'molecular_entity', 'named_thing', 'biolink:NamedThing', 'chemical_substance', 'disease', 'cellular_component', 'information_content_entity']}}, {'name': 'curie', 'in': 'path', 'description': 'The curie of `source_node` that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'id': 'PATO:0000070', 'category': ['named_thing']}]}}}}}, 'tags': [{'name': 'new_changes', 'description': 'some desc'}]}}, '/{source_node_type}/{target_node_type}/{curie}': {'get': {'description': 'Returns one hop paths from `source_node_type`  with `curie` to `target node type`.', 'summary': 'Get one hop results from source type to target type. Note: Please refer to `graph/schema` endpoint output to determine what target goes with a source', 'operationId': 'get_one_hop_source_node_type_to_target_node_type', 'parameters': [{'name': 'source_node_type', 'in': 'path', 'description': 'The node type of source node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['cell', 'biological_process_or_activity', 'biological_process', 'clinical_trial', 'anatomical_entity', 'phenotypic_feature', 'genomic_entity', 'clinical_modifier', 'biological_entity', 'gene_or_gene_product', 'macromolecular_machine', 'disease_or_phenotypic_feature', 'gene', 'molecular_activity', 'organismal_entity', 'molecular_entity', 'named_thing', 'biolink:NamedThing', 'chemical_substance', 'disease', 'cellular_component', 'information_content_entity']}}, {'name': 'target_node_type', 'in': 'path', 'description': 'The node type of target node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['cell', 'biological_process_or_activity', 'biological_process', 'clinical_trial', 'anatomical_entity', 'phenotypic_feature', 'genomic_entity', 'clinical_modifier', 'biological_entity', 'gene_or_gene_product', 'macromolecular_machine', 'disease_or_phenotypic_feature', 'gene', 'molecular_activity', 'organismal_entity', 'molecular_entity', 'named_thing', 'biolink:NamedThing', 'chemical_substance', 'disease', 'cellular_component', 'information_content_entity']}}, {'name': 'curie', 'in': 'path', 'description': 'The `curie` for the `source_node_type` that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'id': 'PATO:0000070', 'category': ['named_thing']}, {'predicate': 'OBO:RO_0002434', 'subject': 'PATO:0000070', 'provided_by': ['renci.bdc.semanticsearch.annotator'], 'id': '9af7d330f6935a5ef6a0068ff928ba0b', 'category': ['association'], 'edge_label': 'association', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type': 'OBAN:association', 'object': 'TOPMED.TAG:1'}, {'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}]]}}}}}, 'tags': [{'name': 'new_changes', 'description': 'some desc'}]}}, '/graph/schema': {'get': {'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_graph_schema', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': [{'name': 'new_changes', 'description': 'some desc'}]}}, '/cypher': {'post': {'summary': 'Run cypher query.', 'description': 'Runs cypher query against the Neo4j instance, and returns an equivalent response exepected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).', 'requestBody': {'description': 'Cypher query.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query': 'MATCH (c) return c limit 1'}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'results': [{'columns': ['c'], 'data': [{'row': [{'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}], 'meta': [{'id': 0, 'type': 'node', 'deleted': False}]}]}], 'errors': []}}}}}}, 'tags': [{'name': 'new_changes', 'description': 'some desc'}]}}, '/reasonerapi': {'get': {'description': 'Returns a list of question templates that can be used to query this plater instance/', 'operationId': 'get_question_templates', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}]}}}}}, 'tags': [{'name': 'new_changes', 'description': 'some desc'}]}, 'post': {'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_question', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}, 'tags': [{'name': 'new_changes', 'description': 'some desc'}]}}, '/simple_spec': {'get': {'description': 'Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.', 'operationId': 'get_simple_spec', 'parameters': [{'name': 'source', 'in': 'query', 'description': 'The curie of source that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'CHEBI:33216'}}, {'name': 'target', 'in': 'query', 'description': 'The curie of target that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'NCBIGene:1'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'source_type': 'chemical_substance', 'target_type': 'chemical_substance', 'edge_type': 'similar_to'}]}}}}}, 'tags': [{'name': 'new_changes', 'description': 'some desc'}]}}, '/graph/summary': {'get': {'description': 'Returns summary of the graph', 'operationId': 'get_graph_summary', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance:molecular_entity:named_thing': {'gene:biological_entity:named_thing': {'directly_interacts_with': 20}}}}}}}}, 'tags': [{'name': 'new_changes', 'description': 'some desc'}]}}, '/overlay': {'post': {'description': 'Given a reasonerAPI graph add support edges for any nodes linked in result bindings.', 'operationId': 'post_reasoner_api_graph', 'requestBody': {'description': 'Reasoner api graph.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}, {'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'support_edge_id', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}, {'kg_id': 'support_edge_id', 'q_id': 's_0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}}}, 'tags': [{'name': 'new_changes', 'description': 'some desc'}]}}}}
[automat.core.handle_request] - 2020-08-20 15:39:45,734 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:39:46,043 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 15:39:50,588 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:40:05,422 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:40:05,673 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 15:40:07,524 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:40:07,833 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 15:40:08,457 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:40:08,766 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 15:40:21,096 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:40:51,612 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:41:22,118 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:41:52,633 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:42:23,148 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:42:53,664 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:43:24,169 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:43:37,697 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:43:37,948 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 15:43:40,439 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:43:40,829 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 15:43:44,471 core.py 122 DEBUG: ['new_changes', 'graph', 'summary']
[automat.core.handle_request] - 2020-08-20 15:43:44,471 core.py 149 DEBUG: [0] found entry for backend server new_changes --- localhost:8091
[automat.core.handle_route_to_backend] - 2020-08-20 15:43:44,471 core.py 96 DEBUG: [0] proxing request to http://localhost:8091/graph/summary?
[automat.core.handle_request] - 2020-08-20 15:43:54,675 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:43:58,520 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:43:58,772 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 15:44:00,202 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:44:00,513 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 15:44:25,192 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:44:55,698 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:45:26,213 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:45:56,729 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:46:27,245 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:46:57,760 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:47:28,264 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:47:33,383 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:47:33,634 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 15:47:33,828 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 15:47:34,136 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 15:47:58,782 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:48:29,297 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:48:59,813 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:49:30,319 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:50:00,828 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:50:31,334 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:51:01,851 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:51:32,357 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:52:02,873 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:52:33,388 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:53:03,903 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:53:34,419 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:54:04,935 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:54:35,450 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:55:05,966 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:55:36,480 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:56:06,995 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:56:37,502 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:57:08,018 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:57:38,535 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:58:09,050 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:58:39,565 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:59:10,072 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 15:59:40,577 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:00:02,997 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-08-20 16:00:03,114 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-08-20 16:00:03,114 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-08-20 16:00:03,138 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 16:00:03,148 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.get_swagger_paths] - 2020-08-20 16:00:05,275 core.py 204 DEBUG: {'openapi': '3.0.2', 'info': {'title': 'PLATER - new_changes'}, 'paths': {'/{node_type}/{curie}': {'get': {'description': 'Returns `node` matching `curie`.', 'summary': 'Find `node` by `curie`.', 'operationId': 'get_source_node_by_curie', 'parameters': [{'name': 'node_type', 'in': 'path', 'description': 'Type of the to look for.', 'required': True, 'schema': {'type': 'string', 'enum': ['cell', 'biological_process_or_activity', 'biological_process', 'clinical_trial', 'anatomical_entity', 'phenotypic_feature', 'genomic_entity', 'clinical_modifier', 'biological_entity', 'gene_or_gene_product', 'macromolecular_machine', 'disease_or_phenotypic_feature', 'gene', 'molecular_activity', 'organismal_entity', 'molecular_entity', 'named_thing', 'biolink:NamedThing', 'chemical_substance', 'disease', 'cellular_component', 'information_content_entity']}}, {'name': 'curie', 'in': 'path', 'description': 'The curie of `source_node` that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'id': 'PATO:0000070', 'category': ['named_thing']}]}}}}}, 'tags': [{'name': 'new_changes', 'description': 'some desc'}]}}, '/{source_node_type}/{target_node_type}/{curie}': {'get': {'description': 'Returns one hop paths from `source_node_type`  with `curie` to `target node type`.', 'summary': 'Get one hop results from source type to target type. Note: Please refer to `graph/schema` endpoint output to determine what target goes with a source', 'operationId': 'get_one_hop_source_node_type_to_target_node_type', 'parameters': [{'name': 'source_node_type', 'in': 'path', 'description': 'The node type of source node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['cell', 'biological_process_or_activity', 'biological_process', 'clinical_trial', 'anatomical_entity', 'phenotypic_feature', 'genomic_entity', 'clinical_modifier', 'biological_entity', 'gene_or_gene_product', 'macromolecular_machine', 'disease_or_phenotypic_feature', 'gene', 'molecular_activity', 'organismal_entity', 'molecular_entity', 'named_thing', 'biolink:NamedThing', 'chemical_substance', 'disease', 'cellular_component', 'information_content_entity']}}, {'name': 'target_node_type', 'in': 'path', 'description': 'The node type of target node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['cell', 'biological_process_or_activity', 'biological_process', 'clinical_trial', 'anatomical_entity', 'phenotypic_feature', 'genomic_entity', 'clinical_modifier', 'biological_entity', 'gene_or_gene_product', 'macromolecular_machine', 'disease_or_phenotypic_feature', 'gene', 'molecular_activity', 'organismal_entity', 'molecular_entity', 'named_thing', 'biolink:NamedThing', 'chemical_substance', 'disease', 'cellular_component', 'information_content_entity']}}, {'name': 'curie', 'in': 'path', 'description': 'The `curie` for the `source_node_type` that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'id': 'PATO:0000070', 'category': ['named_thing']}, {'predicate': 'OBO:RO_0002434', 'subject': 'PATO:0000070', 'provided_by': ['renci.bdc.semanticsearch.annotator'], 'id': '9af7d330f6935a5ef6a0068ff928ba0b', 'category': ['association'], 'edge_label': 'association', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type': 'OBAN:association', 'object': 'TOPMED.TAG:1'}, {'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}]]}}}}}, 'tags': [{'name': 'new_changes', 'description': 'some desc'}]}}, '/graph/schema': {'get': {'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_graph_schema', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': [{'name': 'new_changes', 'description': 'some desc'}]}}, '/cypher': {'post': {'summary': 'Run cypher query.', 'description': 'Runs cypher query against the Neo4j instance, and returns an equivalent response exepected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).', 'requestBody': {'description': 'Cypher query.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query': 'MATCH (c) return c limit 1'}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'results': [{'columns': ['c'], 'data': [{'row': [{'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}], 'meta': [{'id': 0, 'type': 'node', 'deleted': False}]}]}], 'errors': []}}}}}}, 'tags': [{'name': 'new_changes', 'description': 'some desc'}]}}, '/reasonerapi': {'get': {'description': 'Returns a list of question templates that can be used to query this plater instance/', 'operationId': 'get_question_templates', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}]}}}}}, 'tags': [{'name': 'new_changes', 'description': 'some desc'}]}, 'post': {'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_question', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}, 'tags': [{'name': 'new_changes', 'description': 'some desc'}]}}, '/simple_spec': {'get': {'description': 'Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.', 'operationId': 'get_simple_spec', 'parameters': [{'name': 'source', 'in': 'query', 'description': 'The curie of source that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'CHEBI:33216'}}, {'name': 'target', 'in': 'query', 'description': 'The curie of target that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'NCBIGene:1'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'source_type': 'chemical_substance', 'target_type': 'chemical_substance', 'edge_type': 'similar_to'}]}}}}}, 'tags': [{'name': 'new_changes', 'description': 'some desc'}]}}, '/graph/summary': {'get': {'description': 'Returns summary of the graph', 'operationId': 'get_graph_summary', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance:molecular_entity:named_thing': {'gene:biological_entity:named_thing': {'directly_interacts_with': 20}}}}}}}}, 'tags': [{'name': 'new_changes', 'description': 'some desc'}]}}, '/overlay': {'post': {'description': 'Given a reasonerAPI graph add support edges for any nodes linked in result bindings.', 'operationId': 'post_reasoner_api_graph', 'requestBody': {'description': 'Reasoner api graph.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}, {'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'support_edge_id', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}, {'kg_id': 'support_edge_id', 'q_id': 's_0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}}}, 'tags': [{'name': 'new_changes', 'description': 'some desc'}]}}}}
[automat.core.handle_request] - 2020-08-20 16:00:06,965 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 16:00:06,970 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 16:00:06,981 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 16:00:09,010 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 16:00:09,032 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 16:00:11,094 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:00:41,609 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:01:12,124 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:01:42,629 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:02:16,609 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:02:37,007 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-08-20 16:02:37,404 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-08-20 16:02:37,405 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-08-20 16:02:37,468 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 16:02:37,475 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.get_swagger_paths] - 2020-08-20 16:02:39,851 core.py 204 DEBUG: {'openapi': '3.0.2', 'info': {'title': 'PLATER - new_changes'}, 'paths': {'/{node_type}/{curie}': {'get': {'description': 'Returns `node` matching `curie`.', 'summary': 'Find `node` by `curie`.', 'operationId': 'get_source_node_by_curie', 'parameters': [{'name': 'node_type', 'in': 'path', 'description': 'Type of the to look for.', 'required': True, 'schema': {'type': 'string', 'enum': ['biological_process', 'biological_process_or_activity', 'organismal_entity', 'clinical_trial', 'biological_entity', 'information_content_entity', 'gene_or_gene_product', 'disease', 'cellular_component', 'phenotypic_feature', 'biolink:NamedThing', 'anatomical_entity', 'chemical_substance', 'gene', 'clinical_modifier', 'cell', 'named_thing', 'molecular_entity', 'genomic_entity', 'disease_or_phenotypic_feature', 'molecular_activity', 'macromolecular_machine']}}, {'name': 'curie', 'in': 'path', 'description': 'The curie of `source_node` that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'id': 'PATO:0000070', 'category': ['named_thing']}]}}}}}, 'tags': ['new_changes']}}, '/{source_node_type}/{target_node_type}/{curie}': {'get': {'description': 'Returns one hop paths from `source_node_type`  with `curie` to `target node type`.', 'summary': 'Get one hop results from source type to target type. Note: Please refer to `graph/schema` endpoint output to determine what target goes with a source', 'operationId': 'get_one_hop_source_node_type_to_target_node_type', 'parameters': [{'name': 'source_node_type', 'in': 'path', 'description': 'The node type of source node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['biological_process', 'biological_process_or_activity', 'organismal_entity', 'clinical_trial', 'biological_entity', 'information_content_entity', 'gene_or_gene_product', 'disease', 'cellular_component', 'phenotypic_feature', 'biolink:NamedThing', 'anatomical_entity', 'chemical_substance', 'gene', 'clinical_modifier', 'cell', 'named_thing', 'molecular_entity', 'genomic_entity', 'disease_or_phenotypic_feature', 'molecular_activity', 'macromolecular_machine']}}, {'name': 'target_node_type', 'in': 'path', 'description': 'The node type of target node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['biological_process', 'biological_process_or_activity', 'organismal_entity', 'clinical_trial', 'biological_entity', 'information_content_entity', 'gene_or_gene_product', 'disease', 'cellular_component', 'phenotypic_feature', 'biolink:NamedThing', 'anatomical_entity', 'chemical_substance', 'gene', 'clinical_modifier', 'cell', 'named_thing', 'molecular_entity', 'genomic_entity', 'disease_or_phenotypic_feature', 'molecular_activity', 'macromolecular_machine']}}, {'name': 'curie', 'in': 'path', 'description': 'The `curie` for the `source_node_type` that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'id': 'PATO:0000070', 'category': ['named_thing']}, {'predicate': 'OBO:RO_0002434', 'subject': 'PATO:0000070', 'provided_by': ['renci.bdc.semanticsearch.annotator'], 'id': '9af7d330f6935a5ef6a0068ff928ba0b', 'category': ['association'], 'edge_label': 'association', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type': 'OBAN:association', 'object': 'TOPMED.TAG:1'}, {'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}]]}}}}}, 'tags': ['new_changes']}}, '/graph/schema': {'get': {'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_graph_schema', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': ['new_changes']}}, '/cypher': {'post': {'summary': 'Run cypher query.', 'description': 'Runs cypher query against the Neo4j instance, and returns an equivalent response exepected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).', 'requestBody': {'description': 'Cypher query.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query': 'MATCH (c) return c limit 1'}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'results': [{'columns': ['c'], 'data': [{'row': [{'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}], 'meta': [{'id': 0, 'type': 'node', 'deleted': False}]}]}], 'errors': []}}}}}}, 'tags': ['new_changes']}}, '/reasonerapi': {'get': {'description': 'Returns a list of question templates that can be used to query this plater instance/', 'operationId': 'get_question_templates', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}]}}}}}, 'tags': ['new_changes']}, 'post': {'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_question', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}, 'tags': ['new_changes']}}, '/simple_spec': {'get': {'description': 'Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.', 'operationId': 'get_simple_spec', 'parameters': [{'name': 'source', 'in': 'query', 'description': 'The curie of source that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'CHEBI:33216'}}, {'name': 'target', 'in': 'query', 'description': 'The curie of target that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'NCBIGene:1'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'source_type': 'chemical_substance', 'target_type': 'chemical_substance', 'edge_type': 'similar_to'}]}}}}}, 'tags': ['new_changes']}}, '/graph/summary': {'get': {'description': 'Returns summary of the graph', 'operationId': 'get_graph_summary', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance:molecular_entity:named_thing': {'gene:biological_entity:named_thing': {'directly_interacts_with': 20}}}}}}}}, 'tags': ['new_changes']}}, '/overlay': {'post': {'description': 'Given a reasonerAPI graph add support edges for any nodes linked in result bindings.', 'operationId': 'post_reasoner_api_graph', 'requestBody': {'description': 'Reasoner api graph.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}, {'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'support_edge_id', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}, {'kg_id': 'support_edge_id', 'q_id': 's_0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}}}, 'tags': ['new_changes']}}}, 'tags': [{'name': 'new_changes', 'description': 'desc'}]}
[automat.core.handle_request] - 2020-08-20 16:02:45,815 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 16:02:46,065 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 16:02:47,126 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:02:49,426 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 16:02:49,869 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 16:02:53,986 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 16:02:54,294 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 16:02:55,218 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 16:02:55,651 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 16:02:55,903 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 16:03:01,687 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 16:03:01,997 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 16:03:02,304 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 16:03:17,631 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:03:48,147 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:04:18,653 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:04:49,168 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:05:19,684 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:05:50,190 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:06:20,706 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:06:51,212 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:07:21,727 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:07:52,233 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:08:22,739 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:08:53,243 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:09:23,758 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:09:54,265 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:09:54,681 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-20 16:09:54,689 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-20 16:10:08,575 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-08-20 16:10:08,575 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.get_swagger_paths] - 2020-08-20 16:10:10,768 core.py 204 DEBUG: {'openapi': '3.0.2', 'info': {'title': 'PLATER - new_changes'}, 'paths': {'/{node_type}/{curie}': {'get': {'description': 'Returns `node` matching `curie`.', 'summary': 'Find `node` by `curie`.', 'operationId': 'get_source_node_by_curie', 'parameters': [{'name': 'node_type', 'in': 'path', 'description': 'Type of the to look for.', 'required': True, 'schema': {'type': 'string', 'enum': ['biological_process', 'biological_process_or_activity', 'organismal_entity', 'clinical_trial', 'biological_entity', 'information_content_entity', 'gene_or_gene_product', 'disease', 'cellular_component', 'phenotypic_feature', 'biolink:NamedThing', 'anatomical_entity', 'chemical_substance', 'gene', 'clinical_modifier', 'cell', 'named_thing', 'molecular_entity', 'genomic_entity', 'disease_or_phenotypic_feature', 'molecular_activity', 'macromolecular_machine']}}, {'name': 'curie', 'in': 'path', 'description': 'The curie of `source_node` that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'id': 'PATO:0000070', 'category': ['named_thing']}]}}}}}, 'tags': ['new_changes']}}, '/{source_node_type}/{target_node_type}/{curie}': {'get': {'description': 'Returns one hop paths from `source_node_type`  with `curie` to `target node type`.', 'summary': 'Get one hop results from source type to target type. Note: Please refer to `graph/schema` endpoint output to determine what target goes with a source', 'operationId': 'get_one_hop_source_node_type_to_target_node_type', 'parameters': [{'name': 'source_node_type', 'in': 'path', 'description': 'The node type of source node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['biological_process', 'biological_process_or_activity', 'organismal_entity', 'clinical_trial', 'biological_entity', 'information_content_entity', 'gene_or_gene_product', 'disease', 'cellular_component', 'phenotypic_feature', 'biolink:NamedThing', 'anatomical_entity', 'chemical_substance', 'gene', 'clinical_modifier', 'cell', 'named_thing', 'molecular_entity', 'genomic_entity', 'disease_or_phenotypic_feature', 'molecular_activity', 'macromolecular_machine']}}, {'name': 'target_node_type', 'in': 'path', 'description': 'The node type of target node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['biological_process', 'biological_process_or_activity', 'organismal_entity', 'clinical_trial', 'biological_entity', 'information_content_entity', 'gene_or_gene_product', 'disease', 'cellular_component', 'phenotypic_feature', 'biolink:NamedThing', 'anatomical_entity', 'chemical_substance', 'gene', 'clinical_modifier', 'cell', 'named_thing', 'molecular_entity', 'genomic_entity', 'disease_or_phenotypic_feature', 'molecular_activity', 'macromolecular_machine']}}, {'name': 'curie', 'in': 'path', 'description': 'The `curie` for the `source_node_type` that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'id': 'PATO:0000070', 'category': ['named_thing']}, {'predicate': 'OBO:RO_0002434', 'subject': 'PATO:0000070', 'provided_by': ['renci.bdc.semanticsearch.annotator'], 'id': '9af7d330f6935a5ef6a0068ff928ba0b', 'category': ['association'], 'edge_label': 'association', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type': 'OBAN:association', 'object': 'TOPMED.TAG:1'}, {'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}]]}}}}}, 'tags': ['new_changes']}}, '/graph/schema': {'get': {'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_graph_schema', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': ['new_changes']}}, '/cypher': {'post': {'summary': 'Run cypher query.', 'description': 'Runs cypher query against the Neo4j instance, and returns an equivalent response exepected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).', 'requestBody': {'description': 'Cypher query.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query': 'MATCH (c) return c limit 1'}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'results': [{'columns': ['c'], 'data': [{'row': [{'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}], 'meta': [{'id': 0, 'type': 'node', 'deleted': False}]}]}], 'errors': []}}}}}}, 'tags': ['new_changes']}}, '/reasonerapi': {'get': {'description': 'Returns a list of question templates that can be used to query this plater instance/', 'operationId': 'get_question_templates', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}]}}}}}, 'tags': ['new_changes']}, 'post': {'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_question', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}, 'tags': ['new_changes']}}, '/simple_spec': {'get': {'description': 'Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.', 'operationId': 'get_simple_spec', 'parameters': [{'name': 'source', 'in': 'query', 'description': 'The curie of source that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'CHEBI:33216'}}, {'name': 'target', 'in': 'query', 'description': 'The curie of target that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'NCBIGene:1'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'source_type': 'chemical_substance', 'target_type': 'chemical_substance', 'edge_type': 'similar_to'}]}}}}}, 'tags': ['new_changes']}}, '/graph/summary': {'get': {'description': 'Returns summary of the graph', 'operationId': 'get_graph_summary', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance:molecular_entity:named_thing': {'gene:biological_entity:named_thing': {'directly_interacts_with': 20}}}}}}}}, 'tags': ['new_changes']}}, '/overlay': {'post': {'description': 'Given a reasonerAPI graph add support edges for any nodes linked in result bindings.', 'operationId': 'post_reasoner_api_graph', 'requestBody': {'description': 'Reasoner api graph.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}, {'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'support_edge_id', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}, {'kg_id': 'support_edge_id', 'q_id': 's_0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}}}, 'tags': ['new_changes']}}}, 'tags': [{'name': 'new_changes', 'description': 'desc'}]}
[automat.core.handle_request] - 2020-08-20 16:10:11,067 core.py 122 DEBUG: ['favicon.ico']
[automat.core.handle_request] - 2020-08-20 16:10:24,772 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:10:55,286 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:11:25,800 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:11:56,680 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:13:18,396 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:29:27,363 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:29:57,868 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:30:28,383 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:30:58,889 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:31:29,395 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:31:59,910 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:32:30,425 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:33:00,931 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:33:31,446 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:34:01,961 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:34:32,466 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:35:02,982 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:35:33,497 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:36:04,014 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:36:34,519 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:37:05,025 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:37:35,532 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:38:06,037 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:38:36,553 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:39:07,060 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:39:37,565 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:40:08,081 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:40:38,597 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:41:09,113 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:41:39,597 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:42:10,032 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:42:40,468 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:43:10,903 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:43:41,330 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:44:11,766 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:44:42,201 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:45:12,637 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:45:43,063 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:46:13,742 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:46:44,278 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:47:14,784 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:47:45,299 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:48:15,807 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:48:46,315 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:49:16,837 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:49:47,347 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:50:17,854 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:50:48,370 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:51:18,886 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:51:49,401 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:52:19,917 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:52:50,432 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:53:20,948 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:53:51,462 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:54:21,979 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:54:52,486 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:55:23,004 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:55:53,511 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:56:24,028 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:56:54,535 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:57:25,041 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:57:55,548 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:58:26,055 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:58:56,562 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:59:27,068 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 16:59:57,584 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:00:28,100 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:00:58,606 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:01:29,112 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:01:59,626 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:02:30,141 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:03:00,647 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:03:31,152 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:04:01,658 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:04:32,163 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:05:02,670 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:05:33,177 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:06:03,694 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:06:34,210 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:07:04,723 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:07:35,237 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:08:05,753 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:08:36,259 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:09:06,764 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:09:37,279 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:10:07,795 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:10:38,299 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:11:08,805 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:11:39,310 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:12:09,816 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:12:40,333 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:13:10,847 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:13:41,364 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:14:11,881 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:14:42,398 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:15:12,914 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:15:43,424 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:16:13,940 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:16:44,454 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:17:14,972 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:17:45,477 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:18:15,993 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:18:46,509 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:19:17,027 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:19:47,534 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:20:18,042 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:20:48,548 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:21:19,064 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:21:49,580 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:22:20,094 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:22:50,600 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:23:21,108 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:23:51,624 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:24:22,142 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:24:52,657 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:25:23,173 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:25:53,678 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:26:24,192 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:26:54,698 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:27:25,213 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:27:55,719 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:28:26,235 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:28:56,742 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:29:27,251 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:29:57,758 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:30:28,276 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:30:58,792 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:31:29,309 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:31:59,819 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:32:30,329 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:33:00,836 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:33:31,351 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:34:01,866 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:34:32,385 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:35:02,893 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:35:33,408 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:36:03,926 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:36:34,442 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:37:04,948 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:37:35,464 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:38:05,981 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:38:36,495 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:39:07,002 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:39:37,516 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:40:08,034 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:40:38,549 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:41:09,056 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:41:39,561 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:42:10,076 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:42:40,591 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:43:11,107 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:43:41,622 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:44:12,138 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:44:42,654 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:45:13,161 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:45:43,679 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:46:14,196 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:46:44,714 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:47:15,221 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:47:45,737 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:48:16,245 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:48:46,761 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:49:17,277 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:49:47,794 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:50:18,308 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:50:48,815 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:51:19,329 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:51:49,837 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:52:20,354 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:52:50,860 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:53:21,377 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:53:51,892 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:54:22,408 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:54:52,916 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:55:23,432 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:55:53,947 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:56:24,463 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:56:54,980 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:57:25,496 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:57:56,002 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:58:26,518 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:58:57,035 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:59:27,550 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 17:59:58,056 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:00:28,571 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:00:59,086 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:01:29,602 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:02:00,118 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:02:30,633 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:03:01,148 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:03:31,664 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:04:02,179 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:04:32,694 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:05:03,200 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:05:33,716 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:06:04,232 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:06:34,738 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:07:05,254 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:07:35,769 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:08:06,284 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:08:36,801 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:09:07,307 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:09:37,823 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:10:08,329 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:10:38,836 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:11:09,350 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:11:39,864 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:12:10,374 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:12:40,884 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:13:11,402 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:13:41,908 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:14:12,414 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:14:42,931 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:15:13,447 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:15:43,968 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:16:14,483 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:16:44,989 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:17:15,495 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:17:46,012 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:18:16,518 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:18:47,034 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:19:17,551 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:19:48,068 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:20:18,585 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:20:49,101 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:21:19,609 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:21:50,115 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:22:20,622 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:22:51,128 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:23:21,636 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:23:52,152 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:24:22,668 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:24:53,177 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:25:23,693 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:25:54,200 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:26:24,715 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:26:55,232 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:27:25,748 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:27:56,264 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:28:26,780 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:28:57,287 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:29:27,795 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:29:58,310 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:30:28,826 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:30:59,344 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:31:29,850 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:32:00,358 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:32:30,874 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:33:01,389 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:33:31,895 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:34:02,412 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:34:32,928 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:35:03,444 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:35:33,958 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:36:04,474 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:36:34,989 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:37:05,496 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:37:36,012 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:38:06,527 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:38:37,034 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:39:07,541 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:39:38,057 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:40:08,573 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:40:39,089 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:41:09,605 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:41:40,121 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:42:10,637 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:42:41,144 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:43:11,651 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:43:42,158 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:44:12,665 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:44:43,182 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:45:13,699 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:45:44,215 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:46:14,721 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:46:45,237 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:47:15,744 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:47:46,260 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:48:16,768 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:48:47,284 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:49:17,800 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:49:48,314 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:50:18,829 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:50:49,335 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:51:19,840 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:51:50,355 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:52:20,872 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:52:51,379 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:53:21,894 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:53:52,410 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:54:22,916 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:54:53,424 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:55:23,929 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:55:54,446 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:56:24,953 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:56:55,470 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:57:25,977 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:57:56,494 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:58:27,001 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:58:57,517 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:59:28,025 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 18:59:58,539 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:00:29,046 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:00:59,553 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:01:30,072 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:02:00,588 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:02:31,096 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:03:01,610 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:03:32,126 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:04:02,644 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:04:33,160 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:05:03,667 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:05:34,176 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:06:04,692 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:06:35,197 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:07:05,713 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:07:36,229 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:08:06,746 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:08:37,260 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:09:07,777 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:09:38,292 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:10:08,808 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:10:39,323 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:11:09,838 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:11:40,344 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:12:10,861 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:12:41,378 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:13:11,892 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:13:42,408 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:14:12,913 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:14:43,421 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:15:13,937 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:15:44,452 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:16:14,958 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:16:45,465 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:17:15,973 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:17:46,489 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:18:17,006 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:18:47,523 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:19:18,037 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:19:48,554 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:20:19,073 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:20:49,589 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:21:20,095 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:21:50,610 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:22:21,127 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:22:51,643 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:23:22,158 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:23:52,674 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:24:23,181 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:24:53,697 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:25:24,204 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:25:54,710 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:26:25,216 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:26:55,730 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:27:26,245 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:27:56,764 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:28:27,271 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:28:57,786 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:29:28,294 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:29:58,811 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:30:29,319 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:30:59,836 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:31:30,352 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:32:00,868 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:32:31,374 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:33:01,889 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:33:32,395 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:34:02,902 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:34:33,409 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:35:03,916 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:35:34,421 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:36:04,937 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:36:35,447 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:37:05,964 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:37:36,478 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:38:06,995 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:38:37,501 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:39:08,018 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:39:38,534 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:40:09,049 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:40:39,565 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:41:10,073 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:41:40,589 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:42:11,103 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:42:41,619 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:43:12,125 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:43:42,631 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:44:13,137 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:44:43,652 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:45:14,158 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:45:44,674 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:46:15,189 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:46:45,705 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:47:16,213 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:47:46,730 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:48:17,246 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:48:47,761 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:49:18,276 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:49:48,792 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:50:19,308 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:50:49,823 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:51:20,339 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:51:50,845 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:52:21,351 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:52:51,867 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:53:22,382 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:53:52,899 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:54:23,404 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:54:53,919 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:55:24,434 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:55:54,950 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:56:25,465 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:56:55,980 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:57:26,486 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:57:57,001 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:58:27,516 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:58:58,032 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:59:28,539 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 19:59:59,054 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 20:00:29,570 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-20 20:01:00,085 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:40:38,924 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:41:09,434 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:41:39,951 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:42:10,467 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:42:40,982 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:43:11,487 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:43:41,992 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:44:12,503 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:44:43,020 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:45:13,534 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:45:44,049 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:46:14,554 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:46:45,070 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:47:15,577 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:47:46,084 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:48:16,598 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:48:47,116 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:49:17,623 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:49:48,128 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:50:18,644 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:50:49,159 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:51:19,666 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:51:50,179 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:52:20,686 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:52:51,192 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:53:21,698 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:53:52,208 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:54:22,713 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:54:53,245 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:55:23,750 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:55:54,267 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:56:24,773 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:56:55,280 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:57:25,803 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:57:56,308 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:58:26,824 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:58:57,340 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 06:59:27,906 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:00:03,746 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:01:04,265 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:01:34,779 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:02:05,291 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:02:35,797 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:03:06,310 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:03:36,815 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:04:07,334 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:04:37,851 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:05:08,367 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:05:38,879 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:06:09,392 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:06:39,909 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:07:10,421 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:07:40,936 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:08:11,453 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:08:41,977 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:09:12,493 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:09:43,013 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:10:13,524 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:10:44,035 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:11:14,550 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:11:45,073 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:12:15,586 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:12:46,106 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:13:16,623 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:13:47,146 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:14:17,662 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:14:48,173 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:15:18,687 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:15:49,194 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:16:19,708 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:16:50,224 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:17:20,728 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:17:51,242 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:18:21,749 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:18:22,072 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-08-21 07:18:22,586 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-08-21 07:18:22,589 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-08-21 07:18:22,656 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-21 07:18:22,669 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.get_swagger_paths] - 2020-08-21 07:18:24,811 core.py 204 DEBUG: {'openapi': '3.0.2', 'info': {'title': 'PLATER - new_changes'}, 'paths': {'/{node_type}/{curie}': {'get': {'description': 'Returns `node` matching `curie`.', 'summary': 'Find `node` by `curie`.', 'operationId': 'get_source_node_by_curie', 'parameters': [{'name': 'node_type', 'in': 'path', 'description': 'Type of the to look for.', 'required': True, 'schema': {'type': 'string', 'enum': ['clinical_modifier', 'organismal_entity', 'molecular_activity', 'genomic_entity', 'phenotypic_feature', 'cellular_component', 'gene_or_gene_product', 'biological_entity', 'clinical_trial', 'disease', 'biolink:NamedThing', 'anatomical_entity', 'molecular_entity', 'gene', 'cell', 'macromolecular_machine', 'information_content_entity', 'biological_process', 'chemical_substance', 'biological_process_or_activity', 'named_thing', 'disease_or_phenotypic_feature']}}, {'name': 'curie', 'in': 'path', 'description': 'The curie of `source_node` that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'id': 'PATO:0000070', 'category': ['named_thing']}]}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/{source_node_type}/{target_node_type}/{curie}': {'get': {'description': 'Returns one hop paths from `source_node_type`  with `curie` to `target node type`.', 'summary': 'Get one hop results from source type to target type. Note: Please refer to `graph/schema` endpoint output to determine what target goes with a source', 'operationId': 'get_one_hop_source_node_type_to_target_node_type', 'parameters': [{'name': 'source_node_type', 'in': 'path', 'description': 'The node type of source node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['clinical_modifier', 'organismal_entity', 'molecular_activity', 'genomic_entity', 'phenotypic_feature', 'cellular_component', 'gene_or_gene_product', 'biological_entity', 'clinical_trial', 'disease', 'biolink:NamedThing', 'anatomical_entity', 'molecular_entity', 'gene', 'cell', 'macromolecular_machine', 'information_content_entity', 'biological_process', 'chemical_substance', 'biological_process_or_activity', 'named_thing', 'disease_or_phenotypic_feature']}}, {'name': 'target_node_type', 'in': 'path', 'description': 'The node type of target node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['clinical_modifier', 'organismal_entity', 'molecular_activity', 'genomic_entity', 'phenotypic_feature', 'cellular_component', 'gene_or_gene_product', 'biological_entity', 'clinical_trial', 'disease', 'biolink:NamedThing', 'anatomical_entity', 'molecular_entity', 'gene', 'cell', 'macromolecular_machine', 'information_content_entity', 'biological_process', 'chemical_substance', 'biological_process_or_activity', 'named_thing', 'disease_or_phenotypic_feature']}}, {'name': 'curie', 'in': 'path', 'description': 'The `curie` for the `source_node_type` that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'id': 'PATO:0000070', 'category': ['named_thing']}, {'predicate': 'OBO:RO_0002434', 'subject': 'PATO:0000070', 'provided_by': ['renci.bdc.semanticsearch.annotator'], 'id': '9af7d330f6935a5ef6a0068ff928ba0b', 'category': ['association'], 'edge_label': 'association', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type': 'OBAN:association', 'object': 'TOPMED.TAG:1'}, {'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}]]}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/graph/schema': {'get': {'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_graph_schema', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/cypher': {'post': {'summary': 'Run cypher query.', 'description': 'Runs cypher query against the Neo4j instance, and returns an equivalent response exepected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).', 'requestBody': {'description': 'Cypher query.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query': 'MATCH (c) return c limit 1'}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'results': [{'columns': ['c'], 'data': [{'row': [{'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}], 'meta': [{'id': 0, 'type': 'node', 'deleted': False}]}]}], 'errors': []}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/reasonerapi': {'get': {'description': 'Returns a list of question templates that can be used to query this plater instance/', 'operationId': 'get_question_templates', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}]}}}}}, 'tags': [{'name': 'new_changes'}]}, 'post': {'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_question', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/simple_spec': {'get': {'description': 'Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.', 'operationId': 'get_simple_spec', 'parameters': [{'name': 'source', 'in': 'query', 'description': 'The curie of source that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'CHEBI:33216'}}, {'name': 'target', 'in': 'query', 'description': 'The curie of target that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'NCBIGene:1'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'source_type': 'chemical_substance', 'target_type': 'chemical_substance', 'edge_type': 'similar_to'}]}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/graph/summary': {'get': {'description': 'Returns summary of the graph', 'operationId': 'get_graph_summary', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance:molecular_entity:named_thing': {'gene:biological_entity:named_thing': {'directly_interacts_with': 20}}}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/overlay': {'post': {'description': 'Given a reasonerAPI graph add support edges for any nodes linked in result bindings.', 'operationId': 'post_reasoner_api_graph', 'requestBody': {'description': 'Reasoner api graph.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}, {'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'support_edge_id', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}, {'kg_id': 'support_edge_id', 'q_id': 's_0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}}}, 'tags': [{'name': 'new_changes'}]}}}}
[automat.core.handle_request] - 2020-08-21 07:18:26,539 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-21 07:18:26,790 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-08-21 07:18:52,255 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:19:22,786 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:19:53,303 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:20:23,812 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:20:54,323 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:21:24,839 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:22:01,263 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:22:31,779 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:23:02,296 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:23:32,804 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:24:03,310 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:24:33,816 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:25:04,332 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:25:34,837 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:26:05,346 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:26:35,863 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:27:06,368 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:27:36,950 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:28:07,464 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:41:40,229 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:42:10,734 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:42:41,248 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:43:11,753 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:43:31,106 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-08-21 07:43:31,594 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-08-21 07:43:31,594 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-08-21 07:43:31,649 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-08-21 07:43:31,671 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.util.async_client.async_get_json] - 2020-08-21 07:43:35,601 async_client.py 37 ERROR: Failed to get response from http://localhost:8091/openapi.json.
[automat.util.async_client.async_get_json] - 2020-08-21 07:43:35,665 async_client.py 38 DEBUG: None
[automat.core.get_swagger_paths] - 2020-08-21 07:43:35,665 core.py 202 ERROR: Internal server error Cannot connect to host localhost:8091 ssl:default [Connect call failed ('127.0.0.1', 8091)]
[automat.core.handle_request] - 2020-08-21 07:43:42,267 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:44:12,774 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:44:43,288 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:45:13,794 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:45:44,300 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:46:14,815 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:46:45,332 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:47:15,847 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:47:46,362 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:48:13,526 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:48:44,041 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:49:14,547 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:49:45,062 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:50:15,568 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:51:03,112 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:51:33,617 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:52:10,879 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:52:41,385 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:53:11,891 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:53:42,515 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:54:23,673 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:54:54,179 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:55:24,695 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:55:55,210 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:56:45,253 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:57:32,770 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:58:03,277 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:58:33,793 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:59:04,308 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 07:59:34,823 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:00:05,339 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:00:35,854 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:01:06,360 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:01:36,866 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:02:07,381 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:02:37,895 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:03:08,410 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:03:38,925 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:04:09,435 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:04:39,941 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:05:10,447 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:05:40,962 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:06:11,468 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:06:41,975 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:07:12,482 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:07:42,998 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:08:13,513 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:08:44,021 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:09:14,530 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:09:45,045 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:10:15,561 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:10:46,067 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:11:16,574 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:11:47,091 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:12:17,600 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:12:48,114 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:13:18,626 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:13:49,144 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:14:19,659 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:14:50,175 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:15:20,681 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:15:51,187 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:16:21,692 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:16:52,199 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:17:22,705 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:17:53,222 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:18:23,728 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:18:54,250 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:19:24,767 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:19:55,281 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:20:25,798 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:20:56,315 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:21:26,829 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:21:57,335 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:22:27,851 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:22:58,367 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:23:28,872 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:23:59,379 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:24:29,885 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:25:00,399 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:25:30,905 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:26:01,421 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:26:31,937 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:27:02,453 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:27:32,969 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:28:03,480 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:28:33,987 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:29:04,502 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:29:35,018 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:30:05,533 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:30:36,040 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:31:06,570 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:31:37,104 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:32:07,646 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:32:38,180 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:33:08,713 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:33:39,247 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:34:09,780 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:34:40,316 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:35:10,853 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:35:41,388 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:36:11,904 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:36:42,411 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:37:12,928 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:37:43,443 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:38:13,961 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:38:44,477 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:39:14,993 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:39:45,500 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:40:16,010 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:40:46,519 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:41:17,026 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:41:47,542 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:42:18,058 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:42:48,572 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:43:19,087 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:43:49,593 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:44:20,110 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:44:50,616 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:45:21,132 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:45:51,649 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:46:22,155 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:46:52,671 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:47:23,177 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:47:53,687 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:48:24,206 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:48:54,723 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:49:25,234 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:49:55,742 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:50:26,249 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:50:56,755 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:51:27,262 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:51:57,776 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:52:28,283 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:52:58,796 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:53:29,302 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:53:59,817 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:54:30,323 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:55:00,828 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:55:31,349 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:56:01,856 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:56:32,366 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:57:02,871 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:57:33,388 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:58:03,893 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:58:34,408 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:59:04,915 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 08:59:35,421 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:00:05,936 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:00:36,442 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:01:06,950 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:01:37,457 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:02:07,964 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:02:38,472 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:03:08,980 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:03:39,494 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:04:10,010 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:04:40,523 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:05:11,039 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:05:41,554 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:06:12,070 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:06:42,575 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:07:13,081 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:07:43,587 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:08:14,093 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:08:44,609 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:09:15,119 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:09:45,635 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:10:16,143 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:10:46,651 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:11:17,166 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:11:47,681 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:12:18,199 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:12:48,716 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:13:19,230 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:13:49,746 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:14:20,263 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:14:50,770 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:15:21,275 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:15:51,782 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:16:22,296 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:16:52,802 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:17:23,316 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:17:53,823 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:18:24,338 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:18:54,849 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:19:25,357 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:19:55,875 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:20:26,382 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:20:56,888 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:21:27,394 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:21:57,909 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:22:28,415 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:22:58,921 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:23:29,439 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:23:59,948 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:24:30,464 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:25:00,971 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:25:31,489 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:26:01,998 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:26:32,504 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:27:03,021 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:27:33,537 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:28:04,046 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:28:34,562 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:29:05,079 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:29:35,594 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:30:06,101 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:30:36,606 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:31:07,121 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:31:37,627 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:32:08,135 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:32:38,651 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:33:09,159 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:33:39,675 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:34:10,184 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:34:40,700 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:35:11,207 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:35:41,721 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:36:12,227 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:36:42,733 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:37:13,250 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:37:43,756 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:38:14,273 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:38:44,782 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:39:15,299 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:39:45,821 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:40:16,338 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:40:46,844 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:41:17,358 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:41:47,872 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:42:18,389 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:42:48,907 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:43:19,413 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:43:49,920 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:44:20,425 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:44:50,932 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:45:21,448 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:45:51,955 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:46:22,471 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:46:52,989 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:47:23,496 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:47:54,003 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:48:24,508 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:48:55,023 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:49:25,529 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:49:56,043 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:50:26,549 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:50:57,074 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:51:27,590 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:51:58,106 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:52:28,611 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:52:59,117 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:53:29,623 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:54:00,137 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:54:30,651 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:55:01,168 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:55:31,684 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:56:02,201 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:56:32,709 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:57:03,224 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:57:33,730 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:58:04,236 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:58:34,742 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:59:05,256 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 09:59:35,773 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:00:06,279 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:00:36,787 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:01:07,295 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:01:37,802 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:02:08,319 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:02:38,825 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:03:09,331 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:03:39,839 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:04:10,348 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:04:40,855 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:05:11,361 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:05:41,868 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:06:12,376 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:06:42,884 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:07:13,391 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:07:43,898 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:08:14,407 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:08:44,918 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:09:15,424 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:09:45,931 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:10:16,439 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:10:46,950 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:11:17,460 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:11:47,977 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:12:18,484 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:12:48,991 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:13:19,497 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:13:50,003 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:14:20,510 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:14:51,021 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:15:21,527 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:15:52,033 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:16:22,540 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:16:53,052 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:17:23,558 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:17:54,070 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:18:24,580 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:18:55,090 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:19:25,599 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:19:56,107 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:20:26,627 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:20:57,137 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:21:27,645 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:21:58,156 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:22:28,664 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:22:59,180 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:23:29,687 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:24:00,194 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:24:30,700 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:25:01,209 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:25:31,722 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:26:02,240 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:26:32,749 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:27:03,258 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:27:33,765 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:28:04,271 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:28:34,780 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:29:05,290 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:29:35,808 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:30:06,325 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:30:36,830 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:31:07,347 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:31:37,854 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:32:08,361 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:32:38,869 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:33:09,376 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:33:39,892 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:34:10,401 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:34:40,915 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:35:11,433 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:35:41,949 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:36:12,455 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:36:42,962 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:37:13,471 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:37:43,978 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:38:14,485 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:38:44,990 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:39:15,496 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:39:46,002 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:40:16,512 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:40:47,019 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:41:17,529 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:41:48,036 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:42:18,544 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:42:49,052 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:43:19,559 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:43:50,066 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:44:20,576 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:44:51,082 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:45:21,590 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:45:52,095 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:46:22,616 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:46:53,133 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:47:23,652 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:47:54,161 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:48:24,682 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:48:55,189 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:49:25,704 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:49:56,219 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:50:26,734 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:50:57,239 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:51:27,744 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:51:58,260 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:52:28,776 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:52:59,285 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:53:29,803 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:54:00,310 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:54:30,833 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:55:01,350 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:55:31,858 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:56:02,374 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:56:32,880 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:57:03,385 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:57:33,896 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:58:04,435 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:58:34,941 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:59:05,447 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 10:59:35,958 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:00:06,466 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:00:36,979 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:01:07,484 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:01:37,992 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:02:08,498 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:02:39,017 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:03:09,533 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:03:40,040 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:04:10,556 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:04:41,063 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:05:11,570 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:05:42,077 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:06:12,586 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:06:43,096 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:07:13,614 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:07:44,136 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:08:14,642 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:08:45,158 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:09:15,675 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:09:46,191 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:10:16,697 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:10:47,205 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:11:17,713 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:11:48,231 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:12:18,736 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:12:49,252 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:13:19,758 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:13:50,263 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:14:20,781 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:14:51,287 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:15:21,796 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:15:52,302 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:16:22,809 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:16:53,315 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:17:23,822 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:17:54,338 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:18:24,845 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:18:55,361 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:19:25,876 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:19:56,384 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:20:26,904 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:20:57,415 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:21:27,928 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:21:58,434 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:22:28,945 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:22:59,453 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:23:29,960 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:24:00,467 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:24:30,974 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:25:01,489 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:25:31,996 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:26:02,503 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:26:33,019 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:27:03,537 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:27:34,052 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:28:04,558 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:28:35,073 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:29:05,580 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:29:36,086 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:30:06,605 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:30:37,125 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:31:07,653 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:31:38,186 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:32:08,718 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:32:39,228 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:33:09,737 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:33:40,258 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:34:10,767 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:34:41,279 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:35:11,796 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:35:42,306 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:36:12,826 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:36:43,331 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:37:13,841 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:37:44,350 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:38:14,868 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:38:45,376 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:39:15,889 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:39:46,401 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:40:16,910 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:40:47,422 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:41:17,938 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:41:48,448 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:42:18,961 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:42:49,468 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:43:19,976 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:43:50,484 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:44:20,995 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:44:51,505 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:45:22,019 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:45:52,531 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:46:23,039 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:46:53,548 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:47:24,070 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:47:54,580 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:48:25,099 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:48:55,610 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:49:26,118 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:49:56,630 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:50:27,138 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:50:57,647 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:51:28,157 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:51:58,675 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:52:29,187 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:52:59,700 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:53:30,209 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:54:00,720 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:54:31,229 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:55:01,742 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:55:32,251 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:56:02,763 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:56:33,280 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:57:03,791 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:57:34,298 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:58:04,805 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:58:35,311 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:59:05,818 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 11:59:36,334 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:00:06,841 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:00:37,348 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:01:07,855 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:01:38,361 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:02:08,869 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:02:39,389 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:03:09,908 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:03:40,425 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:04:10,933 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:04:41,444 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:05:11,951 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:05:42,457 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:06:12,971 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:06:43,477 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:07:13,993 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:07:44,499 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:08:15,011 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:08:45,529 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:09:16,035 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:09:46,542 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:10:17,050 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:10:47,561 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:11:18,070 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:11:48,576 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:12:19,102 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:12:49,611 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:13:20,121 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:13:50,635 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:14:21,151 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:14:51,661 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:15:22,170 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:15:52,688 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:16:23,200 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:16:53,706 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:17:24,221 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:17:54,729 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:18:25,237 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:18:55,746 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:19:26,254 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:19:56,761 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:20:27,269 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:20:57,786 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:21:28,304 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:21:58,821 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:22:29,333 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:22:59,850 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:23:30,359 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:24:00,866 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:24:31,374 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:25:01,881 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:25:32,390 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:26:02,898 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:26:33,422 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:27:03,928 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:27:34,445 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:28:04,956 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:28:35,473 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:29:05,979 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:29:36,486 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:30:07,000 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:30:37,509 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:31:08,016 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:31:38,533 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:32:09,050 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:32:39,559 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:33:10,068 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:33:40,575 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:34:11,082 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:34:41,599 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:35:12,105 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:35:42,622 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:36:13,130 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:36:43,636 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:37:14,153 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:37:44,664 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:38:15,170 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:38:45,677 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:39:16,190 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:39:46,695 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:40:17,203 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:40:47,710 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:41:18,221 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:41:48,729 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:42:19,236 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:42:49,746 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:43:20,252 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:43:50,759 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:44:21,272 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:44:51,780 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:45:22,285 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:45:52,796 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:46:23,314 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:46:53,829 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:47:24,340 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:47:54,849 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:48:25,362 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:48:55,880 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:49:26,401 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:49:56,917 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:50:27,425 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:50:57,932 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:51:28,443 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:51:58,952 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:52:29,458 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:52:59,970 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:53:30,486 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:54:00,994 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:54:31,511 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:55:02,018 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:55:32,527 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:56:03,033 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:56:33,540 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:57:04,045 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:57:34,561 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:58:05,068 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:58:35,583 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:59:06,089 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 12:59:36,595 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:00:07,101 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:00:37,608 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:01:08,121 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:01:38,630 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:02:09,138 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:02:39,651 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:03:10,162 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:03:40,679 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:04:11,187 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:04:41,707 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:05:12,226 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:05:42,733 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:06:13,242 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:06:43,760 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:07:14,277 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:07:44,792 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:08:15,310 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:08:45,815 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:09:16,324 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:09:46,839 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:10:17,345 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:10:47,860 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:11:18,366 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:11:48,881 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:12:19,389 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:12:49,896 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:13:20,411 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:13:50,917 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:14:21,426 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:14:51,941 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:15:22,449 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:15:52,954 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:16:23,460 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:16:53,968 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:17:24,485 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:17:55,002 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:18:25,506 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:18:56,025 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:19:26,541 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:19:57,049 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:20:27,556 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:20:58,062 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:21:28,569 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:21:59,075 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:22:29,580 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:23:00,086 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:23:30,594 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:24:01,100 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:24:31,607 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:25:02,113 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:25:32,631 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:26:03,139 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:26:33,647 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:27:04,163 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:27:34,671 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:28:05,176 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:28:35,693 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:29:06,201 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:29:36,726 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:30:07,243 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:30:37,751 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:31:08,267 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:31:38,782 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:32:09,289 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:32:39,793 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:33:10,307 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:33:40,815 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:34:11,324 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:34:41,840 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:35:12,347 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:35:42,864 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:36:13,369 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:36:43,884 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:37:14,392 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:37:44,898 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:38:15,414 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:38:45,929 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:39:16,444 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:39:46,963 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:40:17,493 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:40:48,008 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:41:18,521 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:41:49,038 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:42:19,565 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:42:50,071 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:43:20,589 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:43:51,097 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:44:21,611 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:44:52,118 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:45:22,635 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:45:53,141 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:46:23,656 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:46:54,172 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:47:24,689 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:47:55,194 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:48:25,699 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:48:56,214 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:49:26,729 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:49:57,238 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:50:27,754 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:50:58,260 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:51:28,767 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:51:59,274 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:52:29,781 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:53:00,295 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:53:30,811 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:54:01,326 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:54:31,833 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:55:02,339 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:55:32,854 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:56:03,370 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:56:33,885 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:57:04,401 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:57:34,917 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:58:05,423 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:58:35,930 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:59:06,437 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 13:59:36,942 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:00:07,457 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:00:37,963 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:01:08,478 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:01:38,994 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:02:09,512 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:02:40,028 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:03:10,533 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:03:41,039 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:04:11,546 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:04:42,062 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:05:12,577 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:05:43,091 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:06:13,607 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:06:44,113 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:07:14,629 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:07:45,135 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:08:15,649 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:08:46,159 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:09:16,671 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:09:47,181 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:10:17,694 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:10:48,207 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:11:18,726 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:11:49,237 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:12:19,749 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:12:50,262 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:13:20,775 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:13:51,287 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:14:21,799 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:14:52,312 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:15:22,822 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:15:53,333 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:16:23,843 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:16:54,354 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:17:24,867 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:17:55,374 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:18:25,878 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:18:56,383 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:19:26,889 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:19:57,403 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:20:27,919 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:20:58,424 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:21:28,938 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:21:59,444 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:22:29,950 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:23:00,466 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:23:30,982 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:24:01,488 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:24:32,005 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:25:02,510 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:25:33,027 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:26:03,542 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:26:34,057 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:27:04,575 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:27:35,080 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:28:05,596 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:28:36,110 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:29:06,626 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:29:37,141 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:30:07,650 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:30:38,164 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:31:08,680 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:31:39,195 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:32:09,713 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:32:40,220 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:33:10,724 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:33:41,229 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:34:11,737 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:34:42,251 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:35:12,758 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:35:43,264 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:36:13,770 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:36:44,276 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:37:14,780 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:37:45,297 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:38:15,804 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:38:46,320 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:39:16,836 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:39:47,351 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:40:17,857 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:40:48,365 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:41:18,872 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:41:49,383 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:42:19,890 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:42:50,397 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:43:20,903 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:43:51,411 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:44:21,918 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:44:52,433 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:45:22,947 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:45:53,465 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:46:23,971 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:46:54,477 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:47:24,990 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:47:55,496 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:48:26,011 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:48:56,526 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:49:27,032 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:49:57,539 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:50:28,046 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:50:58,551 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:51:29,066 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:51:59,574 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:52:30,090 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:53:00,595 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:53:31,111 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:54:01,627 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:54:32,141 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:55:02,647 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:55:33,160 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:56:03,675 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:56:34,182 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:57:04,688 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:57:35,203 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:58:05,709 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:58:36,213 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:59:06,719 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 14:59:37,235 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:00:07,751 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:00:38,266 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:01:08,771 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:01:39,277 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:02:09,794 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:02:40,308 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:03:10,815 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:03:41,330 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:04:11,835 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:04:42,343 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:05:12,851 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:05:43,358 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:06:13,874 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:06:44,380 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:07:14,884 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:07:45,400 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:08:15,915 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:08:46,422 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:09:16,940 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:09:47,447 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:10:17,952 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:10:48,468 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:11:18,983 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:11:49,498 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:12:20,004 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:12:50,510 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:13:21,026 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:13:51,532 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:14:22,037 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:14:52,542 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:15:23,057 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:15:53,564 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:16:24,079 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:16:54,594 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:17:25,100 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:17:55,623 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:18:26,128 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:18:56,635 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:19:27,149 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:19:57,654 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:20:28,161 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:20:58,675 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:21:29,182 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:21:59,688 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:22:30,192 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:23:00,707 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:23:31,213 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:24:01,728 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:24:32,243 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:25:02,749 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:25:33,263 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:26:03,779 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:26:34,285 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:27:04,805 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:27:35,311 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:28:05,827 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:28:36,333 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:29:06,840 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:29:37,348 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:30:07,863 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:30:38,369 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:31:08,886 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:31:39,403 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:32:09,921 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:32:40,436 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:33:10,943 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:33:41,458 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:34:11,975 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:34:42,480 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:35:12,996 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:35:43,514 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:36:14,027 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:36:44,543 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:37:15,058 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:37:45,573 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:38:16,079 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:38:46,594 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:39:17,111 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:39:47,616 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:40:18,132 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:40:48,638 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:41:19,143 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:41:49,659 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:42:20,166 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:42:50,681 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:43:21,187 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:43:51,693 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:44:22,209 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:44:52,725 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:45:23,232 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:45:53,735 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:46:24,252 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:46:54,760 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:47:25,275 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:47:55,791 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:48:26,307 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:48:56,812 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:49:27,327 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:49:57,832 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:50:28,345 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:50:58,860 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:51:29,375 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:51:59,890 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:52:30,407 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:53:00,912 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:53:31,417 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:54:01,933 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:54:32,448 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:55:02,955 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:55:33,462 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:56:03,976 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:56:34,487 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:57:05,003 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:57:35,511 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:58:06,019 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:58:36,526 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:59:07,042 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 15:59:37,558 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:00:08,062 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:00:38,569 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:01:09,085 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:01:39,601 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:02:10,109 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:02:40,632 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:03:11,147 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:03:41,665 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:04:12,176 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:04:42,696 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:05:13,211 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:05:43,723 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:06:14,228 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:06:44,734 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:07:15,242 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:07:45,748 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:08:16,254 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:08:46,770 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:09:17,275 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:09:47,789 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:10:18,304 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:10:48,813 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:11:19,329 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:11:49,842 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:12:20,357 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:12:50,863 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:13:21,379 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:13:51,885 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:14:22,402 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:14:52,908 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:15:23,413 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:15:53,920 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:16:24,430 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:16:54,952 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:17:25,460 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:17:55,975 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:18:26,493 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:18:57,001 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:19:27,509 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:19:58,018 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:20:28,526 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:20:59,043 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:21:29,550 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:22:00,059 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:22:30,567 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:23:01,084 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:23:31,601 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:24:02,108 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:24:32,616 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:25:03,133 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:25:33,648 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:26:04,158 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:26:34,676 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:27:05,192 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:27:35,709 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:28:06,230 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:28:36,738 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:29:07,244 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:29:37,752 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:30:08,260 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:30:38,767 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:31:09,283 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:31:39,799 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:32:10,307 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:32:40,823 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:33:11,330 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:33:41,836 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:34:12,345 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:34:42,852 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:35:13,371 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:35:43,890 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:36:14,405 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:36:44,920 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:37:15,428 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:37:45,935 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:38:16,441 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:38:46,947 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:39:17,463 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:39:47,969 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:40:18,486 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:40:48,991 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:41:19,507 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:41:50,014 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:42:20,531 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:42:51,047 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:43:21,565 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:43:52,083 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:44:22,591 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:44:53,108 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:45:23,623 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:45:54,129 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:46:24,645 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:46:55,152 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:47:25,666 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:47:56,182 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:48:26,700 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:48:57,207 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:49:27,725 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:49:58,241 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:50:28,750 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:50:59,266 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:51:29,782 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:52:00,297 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:52:30,818 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:53:01,337 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:53:31,855 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:54:02,379 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:54:32,889 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:55:03,405 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:55:33,913 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:56:04,428 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:56:34,935 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:57:05,442 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:57:35,958 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:58:06,466 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:58:36,975 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:59:07,494 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 16:59:38,012 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:00:08,520 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:00:39,037 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:01:09,553 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:01:40,059 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:02:10,568 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:02:41,092 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:03:11,600 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:03:42,107 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:04:12,612 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:04:43,120 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:05:13,629 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:05:44,146 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:06:14,662 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:06:45,181 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:07:15,700 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:07:46,209 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:08:16,726 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:08:47,233 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:09:17,741 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:09:48,257 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:10:18,773 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:10:49,281 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:11:19,789 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:11:50,307 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:12:20,813 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:12:51,330 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:13:21,837 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:13:52,347 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:14:22,864 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:14:53,382 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:15:23,896 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:15:54,412 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:16:24,929 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:16:55,446 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:17:25,954 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:17:56,469 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:18:26,984 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:18:57,500 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:19:28,016 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:19:58,532 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:20:29,037 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:20:59,553 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:21:30,062 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:22:00,581 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:22:31,087 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:23:01,605 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:23:32,110 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:24:02,618 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:24:33,134 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:25:03,646 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:25:34,154 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:26:04,660 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:26:35,176 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:27:05,682 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:27:36,188 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:28:06,702 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:28:37,386 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:29:07,904 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:29:38,421 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:30:08,929 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:30:39,436 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:31:09,952 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:31:40,470 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:32:10,986 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:32:41,504 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:33:12,013 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:33:42,520 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:34:13,030 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:34:43,551 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:35:14,061 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:35:44,569 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:36:15,079 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:36:45,590 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:37:16,099 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:37:46,613 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:38:17,122 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:38:47,642 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:39:18,158 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:39:48,666 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:40:19,176 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:40:49,690 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:41:20,199 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:41:50,721 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:42:21,229 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:42:51,739 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:43:22,250 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:43:52,766 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:44:23,285 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:44:53,805 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:45:24,322 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:45:54,840 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:46:25,357 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:46:55,875 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:47:26,387 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:47:56,898 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:48:27,414 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:48:57,930 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:49:28,449 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:49:58,960 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:50:29,476 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:50:59,985 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:51:30,505 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:52:01,021 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:52:31,544 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:53:02,061 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:53:32,584 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:54:03,102 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:54:33,623 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:55:04,140 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:55:34,650 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:56:05,168 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:56:35,692 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:57:06,211 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:57:36,724 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:58:07,240 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:58:37,755 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:59:08,266 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 17:59:38,773 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:00:09,291 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:00:39,807 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:01:10,318 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:01:40,839 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:02:11,355 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:02:41,864 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:03:12,371 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:03:42,881 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:04:13,399 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:04:43,909 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:05:14,418 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:05:44,939 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:06:15,456 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:06:45,970 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:07:16,487 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:07:47,002 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:08:17,518 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:08:48,040 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:09:18,557 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:09:49,072 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:10:19,590 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:10:50,106 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:11:20,612 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:11:51,122 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:12:21,628 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:12:52,143 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:13:22,658 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:13:53,165 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:14:23,680 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:14:54,187 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:15:24,704 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:15:55,221 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:16:25,735 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:16:56,251 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:17:26,768 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:17:57,284 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:18:27,800 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:18:58,317 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:19:28,833 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:19:59,340 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-21 18:20:29,846 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:01:46,586 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:02:17,124 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:02:47,641 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:03:18,149 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:03:48,663 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:04:19,182 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:04:49,692 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:05:20,199 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:05:50,710 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:06:21,221 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:06:51,735 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:07:22,247 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:07:52,764 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:08:23,283 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:08:53,802 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:09:24,337 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:09:54,848 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:10:25,357 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:10:55,863 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:11:26,379 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:11:56,886 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:12:27,398 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:12:57,908 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:13:28,426 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:13:58,933 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:14:29,443 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:14:59,958 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:15:30,480 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:16:00,994 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:16:31,512 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:17:02,018 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:17:32,526 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:18:03,041 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:18:33,565 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:19:04,083 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:19:34,589 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:20:05,096 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:20:35,613 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:21:06,119 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:21:36,635 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:22:07,152 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:22:37,662 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:23:08,182 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:23:38,708 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:24:09,214 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:24:39,732 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:25:10,250 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:25:40,768 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:26:11,274 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:26:41,786 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:27:12,299 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:27:42,809 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:28:13,323 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:28:43,845 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:29:14,362 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:29:44,878 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:30:15,394 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:30:45,905 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:31:16,411 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:31:46,929 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:32:17,435 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:32:47,941 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:33:18,457 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:33:48,964 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:34:19,472 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:34:49,989 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:35:20,507 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:35:51,024 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:36:21,550 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:36:52,069 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:37:22,589 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:37:53,120 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:38:23,645 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:38:54,163 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:39:24,681 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:39:55,196 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:40:25,715 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:40:56,235 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:41:26,750 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:41:57,267 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:42:27,788 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:42:58,313 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:43:28,827 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:43:59,350 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:44:29,873 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:45:00,396 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:45:30,924 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:46:01,442 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:46:32,264 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:47:03,006 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:47:34,068 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:48:05,059 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:48:35,671 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:49:06,188 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:49:36,771 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:50:07,357 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:50:37,880 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:51:08,400 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:51:38,922 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:52:09,442 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:52:39,968 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:53:10,486 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:53:41,006 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:54:11,526 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:54:42,047 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:55:12,567 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:55:43,804 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:56:14,706 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:56:45,355 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:57:16,389 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:57:46,996 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:58:17,512 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:58:48,030 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:59:18,548 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 09:59:49,070 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:00:19,793 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:00:50,936 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:01:21,815 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:01:52,422 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:02:22,940 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:02:53,461 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:03:23,982 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:03:54,635 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:04:25,159 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:04:55,682 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:05:26,202 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:05:56,981 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:06:27,627 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:06:58,149 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:07:28,666 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:07:59,183 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:08:29,705 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:09:00,220 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:09:30,732 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:10:01,247 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:10:31,761 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:11:02,276 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:11:32,870 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:12:03,389 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:12:33,912 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:13:04,429 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:13:34,947 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:14:05,466 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:14:35,978 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:15:06,498 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:15:37,006 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:16:07,522 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:16:38,039 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:17:08,549 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:17:39,065 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:18:09,578 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:18:40,085 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:19:10,606 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:19:41,121 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:20:11,628 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:20:42,137 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:21:12,658 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:21:43,178 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:22:13,694 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:22:44,212 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:23:14,719 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:23:45,236 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:24:15,745 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:24:46,264 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:25:16,770 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:25:47,286 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:26:17,794 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:26:48,303 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:27:18,810 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:27:49,331 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:28:19,843 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:28:50,361 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:29:20,868 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:29:51,385 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:30:21,894 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:30:52,412 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:31:22,922 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:31:53,433 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:32:23,942 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:32:54,461 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:33:24,969 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:33:55,476 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:34:25,993 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:34:56,511 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:35:27,026 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:35:57,541 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:36:28,048 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:36:58,554 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:37:29,071 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:37:59,588 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:38:30,095 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:39:00,614 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:39:31,122 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:40:01,640 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:40:32,145 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:41:02,654 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:41:33,170 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:42:03,687 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:42:34,203 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:43:04,719 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:43:35,236 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:44:05,744 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:44:36,253 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:45:06,771 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:45:37,287 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:46:07,804 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:46:38,321 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:47:08,829 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:47:39,344 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:48:09,862 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:48:40,379 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:49:10,887 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:49:41,405 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:50:11,914 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:50:42,425 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:51:12,933 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:51:43,442 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:52:13,949 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:52:44,467 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:53:14,983 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:53:45,500 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:54:16,015 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:54:46,522 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:55:17,038 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:55:47,554 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:56:18,072 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:56:48,582 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:57:19,089 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:57:49,605 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:58:20,123 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:58:50,629 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:59:21,136 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 10:59:51,651 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:00:22,159 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:00:52,677 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:01:23,183 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:01:53,691 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:02:24,198 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:02:54,706 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:03:25,215 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:03:55,734 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:04:26,255 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:04:56,772 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:05:27,281 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:05:57,799 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:06:28,315 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:06:58,831 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:07:29,346 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:07:59,853 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:08:30,372 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:09:00,879 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:09:31,394 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:10:01,911 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:10:32,428 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:11:02,944 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:11:33,450 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:12:03,967 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:12:34,484 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:13:05,000 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:13:35,519 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:14:06,036 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:14:36,543 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:15:07,051 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:15:37,572 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:16:08,082 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:16:38,603 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:17:09,119 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:17:39,628 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:18:10,146 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:18:40,654 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:19:11,173 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:19:41,682 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:20:12,201 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:20:42,706 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:21:13,221 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:21:43,729 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:22:14,236 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:22:44,742 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:23:15,259 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:23:45,769 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:24:16,288 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:24:46,806 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:25:17,314 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:25:47,830 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:26:18,348 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:26:48,875 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:27:19,382 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:27:49,897 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:28:20,405 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:28:50,915 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:29:21,422 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:29:51,932 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:30:22,439 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:30:52,955 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:31:23,471 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:31:53,978 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:32:24,494 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:32:55,010 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:33:25,517 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:33:56,032 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:34:26,550 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:34:57,065 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:35:27,581 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:35:58,091 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:36:28,615 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:36:59,154 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:37:29,667 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:38:00,185 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:38:30,691 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:39:01,224 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:39:31,740 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:40:02,249 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:40:32,766 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:41:03,272 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:41:33,778 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:42:04,288 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:42:34,797 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:43:05,305 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:43:35,812 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:44:06,327 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:44:36,834 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:45:07,341 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:45:37,848 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:46:08,365 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:46:38,872 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:47:09,388 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:47:39,896 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:48:10,402 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:48:40,908 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:49:11,424 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:49:41,941 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:50:12,448 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:50:42,955 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:51:13,472 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:51:44,083 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:52:14,603 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:52:45,109 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:53:15,624 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:53:46,132 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:54:16,648 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:54:47,156 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:55:17,672 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:55:48,179 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:56:18,688 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:56:49,195 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:57:19,711 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:57:50,222 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:58:20,734 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:58:51,245 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:59:21,761 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 11:59:52,278 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:00:22,789 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:00:53,297 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:01:23,806 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:01:54,324 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:02:24,831 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:02:55,349 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:03:25,855 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:03:56,374 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:04:26,882 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:04:57,391 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:05:27,899 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:05:58,406 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:06:28,923 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:06:59,441 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:07:29,958 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:08:00,464 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:08:30,983 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:09:01,500 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:09:32,016 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:10:02,522 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:10:33,028 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:11:03,545 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:11:34,053 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:12:04,560 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:12:35,069 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:13:05,589 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:13:36,105 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:14:06,621 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:14:37,128 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:15:07,646 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:15:38,154 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:16:08,662 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:16:39,170 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:17:09,677 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:17:40,195 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:18:10,711 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:18:41,230 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:19:11,739 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:19:42,248 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:20:12,754 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:20:43,270 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:21:13,785 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:21:44,302 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:22:14,813 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:22:45,325 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:23:15,843 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:23:46,361 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:24:16,878 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:24:47,386 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:25:17,892 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:25:48,411 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:26:18,932 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:26:49,439 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:27:19,946 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:27:50,464 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:28:20,972 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:28:51,490 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:29:22,007 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:29:52,522 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:30:23,029 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:30:53,545 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:31:24,062 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:31:54,570 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:32:25,079 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:32:55,596 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:33:26,112 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:33:56,628 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:34:27,144 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:34:57,857 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:35:28,496 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:35:59,013 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:36:29,523 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:37:00,032 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:37:30,559 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:38:01,069 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:38:31,595 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:39:02,103 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:39:32,617 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:40:03,131 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:40:33,641 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:41:04,158 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:41:34,675 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:42:05,191 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:42:35,707 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:43:06,223 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:43:36,733 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:44:07,244 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:44:37,756 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:45:08,264 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:45:38,772 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:46:09,283 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:46:39,792 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:47:10,303 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:47:40,821 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:48:11,339 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:48:41,847 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:49:12,356 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:49:42,864 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:50:13,376 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:50:43,893 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:51:14,411 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:51:44,919 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:52:15,431 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:52:45,948 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:53:16,457 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:53:46,974 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:54:17,492 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:54:48,000 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:55:18,516 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:55:49,033 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:56:19,551 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:56:50,068 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:57:20,580 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:57:51,095 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:58:21,603 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:58:52,118 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:59:22,637 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 12:59:53,145 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:00:23,661 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:00:54,177 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:01:24,684 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:01:55,200 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:02:25,716 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:02:56,234 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:03:26,743 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:03:57,263 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:04:27,779 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:04:58,288 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:05:28,806 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:05:59,314 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:06:29,823 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:07:00,343 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:07:30,860 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:08:01,379 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:08:31,895 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:09:02,402 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:09:32,913 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:10:03,434 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:10:33,951 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:11:04,460 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:11:34,970 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:12:05,492 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:12:36,000 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:13:06,513 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:13:37,033 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:14:07,556 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:14:38,065 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:15:08,576 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:15:39,086 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:16:09,607 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:16:40,119 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:17:10,639 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:17:41,152 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:18:11,671 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:18:42,181 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:19:12,693 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:19:43,201 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:20:13,718 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:20:44,227 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:21:14,737 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:21:45,258 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:22:15,773 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:22:46,280 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:23:16,786 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:23:47,299 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:24:17,806 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:24:48,327 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:25:18,834 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:25:49,345 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:26:19,862 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:26:50,383 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:27:20,891 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:27:51,410 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:28:21,919 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:28:52,426 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:29:22,944 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:29:53,461 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:30:23,977 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:30:54,492 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:31:24,998 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:31:55,505 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:32:26,012 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:32:56,518 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:33:27,035 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:33:57,552 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:34:28,059 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:34:58,567 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:35:29,084 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:35:59,602 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:36:30,110 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:37:00,620 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:37:31,128 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:38:01,636 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:38:32,142 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:39:02,651 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:39:33,170 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:40:03,676 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:40:34,187 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:41:04,703 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:41:35,219 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:42:05,727 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:42:36,244 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:43:06,760 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:43:37,276 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:44:07,782 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:44:38,291 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:45:08,800 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:45:39,311 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:46:09,821 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:46:40,334 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:47:10,854 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:47:41,361 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:48:11,868 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:48:42,396 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:49:12,916 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:49:43,434 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:50:13,942 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:50:44,462 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:51:14,969 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:51:45,485 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:52:16,002 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:52:46,511 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:53:17,018 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:53:47,534 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:54:18,040 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:54:48,557 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:55:19,065 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:55:49,573 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:56:20,089 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:56:50,607 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:57:21,123 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:57:51,630 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:58:22,138 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:58:52,645 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:59:23,163 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 13:59:53,670 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:00:24,184 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:00:54,701 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:01:25,218 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:01:55,735 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:02:26,254 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:02:56,772 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:03:27,281 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:03:57,790 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:04:28,306 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:04:58,815 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:05:29,331 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:05:59,846 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:06:30,353 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:07:00,859 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:07:31,374 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:08:52,040 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:09:23,234 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:09:54,426 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:10:24,944 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:10:55,462 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:11:25,977 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:11:56,495 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:12:27,013 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:12:57,541 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:13:28,052 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:13:58,576 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:14:29,088 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:14:59,605 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:15:30,116 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:16:00,632 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:16:31,142 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:17:01,663 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:17:32,175 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:18:02,689 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:18:33,205 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:19:03,724 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:19:34,232 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:20:04,741 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:20:35,260 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:21:05,769 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:21:36,288 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:22:06,812 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:22:37,320 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:23:07,832 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:23:38,344 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:24:08,858 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:24:39,377 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:25:09,891 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:25:40,402 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:26:10,918 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:26:41,430 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:27:11,939 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:27:42,463 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:28:12,972 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:28:43,496 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:29:14,005 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:29:44,526 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:30:15,044 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:30:45,561 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:31:16,073 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:31:46,596 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:32:17,118 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:32:47,633 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:33:18,145 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:33:48,666 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:34:19,174 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:34:49,691 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:35:20,198 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:35:50,707 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:36:21,226 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:36:51,733 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:37:22,259 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:37:52,771 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:38:23,291 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:38:53,799 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:39:24,308 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:39:54,824 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:40:25,335 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:40:55,857 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:41:26,371 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:41:56,886 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:42:27,405 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:42:57,926 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:43:28,438 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:43:58,957 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:44:29,464 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:44:59,983 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:45:30,499 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:46:01,018 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:46:31,538 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:47:02,046 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:47:32,567 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:48:03,079 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:48:33,589 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:49:04,098 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:49:34,606 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:50:05,124 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:50:35,632 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:51:06,139 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:51:36,661 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:52:07,168 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:52:37,686 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:53:08,193 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:53:38,700 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:54:09,215 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:54:39,737 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:55:10,250 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:55:40,766 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:56:11,274 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:56:41,791 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:57:12,310 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:57:42,830 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:58:13,340 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:58:43,859 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:59:14,377 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 14:59:44,886 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:00:15,401 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:00:45,924 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:01:16,435 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:01:46,955 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:02:17,475 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:02:47,986 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:03:18,494 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:03:49,002 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:04:19,512 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:04:50,028 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:05:20,536 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:05:51,051 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:06:21,567 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:06:52,085 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:07:22,592 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:07:53,109 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:08:23,625 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:08:54,824 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:09:25,858 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:09:56,377 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:10:26,895 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:10:57,403 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:11:27,911 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:11:58,429 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:12:28,946 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:12:59,463 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:13:29,978 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:14:00,495 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:14:31,002 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:15:01,510 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:15:32,016 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:16:02,533 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:16:33,039 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:17:09,225 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:17:39,756 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:18:10,277 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:18:40,786 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:19:11,293 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:19:41,799 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:20:12,306 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:20:42,815 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:21:13,335 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:21:43,845 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:22:14,352 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:22:44,858 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:23:15,373 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:23:49,504 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:24:22,200 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:24:52,709 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:25:23,219 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:25:53,732 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:26:24,242 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:26:54,764 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:27:25,284 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:27:55,798 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:28:26,318 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:28:56,836 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:29:27,345 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:29:57,858 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:30:28,378 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:30:58,894 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:31:29,410 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:31:59,926 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:32:30,434 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:33:00,950 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:33:31,459 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:34:01,966 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:34:32,481 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:35:02,988 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:35:33,503 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:36:04,010 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:36:34,517 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:37:05,034 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:37:35,552 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:38:06,060 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:38:36,577 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:39:07,094 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:39:37,612 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:40:08,132 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:40:38,648 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:41:09,155 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:41:39,671 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:42:10,177 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:42:40,696 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:43:11,205 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:43:41,715 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:44:12,232 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:44:42,748 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:45:13,264 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:45:43,772 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:46:14,287 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:46:44,795 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:47:15,303 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:47:45,810 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:48:16,318 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:48:46,836 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:49:17,352 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:49:47,869 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:50:18,387 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:50:48,895 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:51:19,413 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:51:49,919 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:52:20,435 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:52:50,944 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:53:21,456 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:53:51,964 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:54:22,481 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:54:52,989 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:55:23,509 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:55:54,019 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:56:24,525 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:56:55,045 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:57:25,561 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:57:56,080 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:58:26,588 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:58:57,106 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:59:27,622 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 15:59:58,138 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:00:28,656 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:00:59,173 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:01:29,681 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:02:00,190 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:02:30,697 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:03:01,213 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:03:31,725 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:04:02,244 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:04:32,752 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:05:03,270 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:05:33,787 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:06:04,294 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:06:34,810 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:07:05,318 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:07:35,826 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:08:06,344 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:08:36,853 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:09:07,363 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:09:37,870 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:10:08,380 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:10:38,889 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:11:09,408 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:11:39,926 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:12:10,434 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:12:40,941 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:13:11,451 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:13:41,973 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:14:12,482 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:14:42,989 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:15:13,505 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:15:44,013 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:16:14,532 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:16:45,041 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:17:15,559 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:17:46,069 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:18:16,585 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:18:47,095 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:19:17,604 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:19:48,112 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:20:18,623 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:20:49,140 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:21:19,658 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:21:50,173 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:22:20,690 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:22:51,199 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:23:21,719 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:23:52,226 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:24:22,733 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:24:53,252 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:25:23,759 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:25:54,267 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:26:24,785 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:26:55,297 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:27:25,817 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:27:56,323 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:28:26,842 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:28:57,351 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:29:27,868 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:29:58,376 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:30:28,883 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:30:59,390 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:31:29,898 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:32:00,415 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:32:30,923 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:33:01,440 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:33:31,960 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:34:02,468 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:34:32,985 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:35:03,493 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:35:33,999 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:36:04,517 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:36:35,036 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:37:05,554 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:37:36,071 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:38:06,586 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:38:37,094 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:39:07,603 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:39:38,122 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:40:08,629 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:40:39,147 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:41:09,655 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:41:40,163 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:42:10,679 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:42:41,186 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:43:11,699 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:43:42,216 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:44:12,724 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:44:43,231 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:45:13,739 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:45:44,259 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:46:14,767 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:46:45,276 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:47:15,792 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:47:46,300 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:48:16,816 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:48:47,324 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:49:17,842 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:49:48,359 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:50:18,866 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:50:49,387 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:51:19,905 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:51:50,423 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:52:20,942 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:52:51,456 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:53:21,978 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:53:52,485 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:54:23,004 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:54:53,511 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:55:24,031 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:55:54,538 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:56:25,045 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:56:55,552 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:57:26,058 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:57:56,566 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:58:27,073 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:58:57,582 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:59:28,088 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 16:59:58,596 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:00:29,105 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:00:59,614 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:01:30,125 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:02:00,642 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:02:31,160 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:03:01,670 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:03:32,189 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:04:02,705 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:04:33,213 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:05:03,730 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:05:34,249 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:06:04,767 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:06:35,291 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:07:05,800 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:07:36,319 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:08:06,838 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:08:37,346 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:09:07,862 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:09:38,375 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:10:08,883 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:10:39,392 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:11:09,909 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:11:40,425 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:12:10,942 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:12:41,461 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:13:11,985 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:13:42,505 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:14:13,021 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:14:43,529 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:15:14,052 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:15:44,568 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:16:15,076 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:16:45,584 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:17:16,101 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:17:46,609 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:18:17,116 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:18:47,636 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:19:18,145 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:19:48,664 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:20:19,182 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:20:49,699 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:21:20,216 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:21:50,733 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:22:21,246 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:22:51,759 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:23:22,272 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:23:52,779 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:24:23,292 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:24:53,812 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:25:24,331 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:25:54,840 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:26:25,349 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:26:55,857 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:27:26,370 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:27:56,888 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:28:27,397 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:28:57,913 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:29:28,423 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:29:58,941 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:30:29,450 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:30:59,967 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:31:30,485 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:32:01,002 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:32:31,512 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:33:02,024 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:33:32,534 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:34:03,052 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:34:33,568 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:35:04,084 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:35:34,600 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:36:05,115 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:36:35,623 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:37:06,144 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:37:36,660 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:38:07,170 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:38:37,688 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:39:08,197 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:39:38,713 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:40:09,230 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:40:39,736 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:41:10,257 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:41:40,773 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:42:11,289 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:42:41,808 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:43:12,316 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:43:42,823 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:44:13,339 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:44:43,847 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:45:14,365 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:45:44,872 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:46:15,389 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:46:45,906 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:47:16,413 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:47:46,922 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:48:17,438 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:48:47,946 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:49:18,461 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:49:48,978 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:50:19,495 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:50:50,003 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:51:20,522 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:51:51,029 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:52:21,536 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:52:52,055 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:53:22,573 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:53:53,081 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:54:23,588 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:54:54,105 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:55:24,611 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:55:55,118 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:56:25,628 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:56:56,135 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:57:26,653 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:57:57,170 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:58:27,689 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:58:58,205 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:59:28,712 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 17:59:59,229 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:00:29,735 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:01:00,245 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:01:30,754 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:02:01,261 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:02:31,769 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:03:02,282 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:03:32,791 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:04:03,310 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:04:33,817 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:05:04,323 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:05:34,831 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:06:05,342 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:06:35,860 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:07:06,379 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:07:36,887 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:08:07,399 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:08:37,908 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:09:08,418 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:09:38,927 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:10:09,447 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:10:39,963 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:11:10,470 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:11:40,978 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:12:11,491 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:12:42,006 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:13:12,517 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:13:43,024 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:14:13,533 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:14:44,040 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:15:14,559 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:15:45,077 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:16:15,594 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:16:46,106 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:17:16,624 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:17:47,131 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:18:17,648 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:18:48,167 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:19:18,686 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:19:49,202 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:20:19,720 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:20:50,227 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:21:20,734 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:21:51,255 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:22:21,771 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:22:52,284 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:23:22,797 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:23:53,317 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:24:23,825 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:24:54,334 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:25:24,852 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:25:55,360 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:26:25,878 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:26:56,385 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:27:26,902 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:27:57,409 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:28:27,918 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:28:58,439 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:29:28,955 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:29:59,463 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:30:29,980 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:31:00,497 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:31:31,004 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:32:01,512 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:32:32,022 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:33:02,541 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:33:33,048 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:34:03,556 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:34:34,072 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:35:04,590 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:35:35,099 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:36:05,619 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:36:36,126 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:37:06,642 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:37:37,159 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:38:07,667 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:38:38,173 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:39:08,679 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:39:39,196 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:40:09,704 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:40:40,221 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:41:10,730 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:41:41,252 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:42:11,761 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:42:42,283 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:43:12,800 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:43:43,308 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:44:13,816 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:44:44,332 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:45:14,851 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:45:45,359 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:46:15,876 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:46:46,393 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:47:16,901 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:47:47,418 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:48:17,927 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:48:48,441 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:49:18,958 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:49:49,475 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:50:19,990 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:50:50,497 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:51:21,005 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:51:51,527 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:52:22,044 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:52:52,553 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:53:23,072 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:53:53,579 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:54:24,087 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:54:54,594 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:55:25,112 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:55:55,634 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:56:26,141 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:56:56,648 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:57:27,164 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:57:57,671 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:58:28,189 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:58:58,706 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:59:29,223 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 18:59:59,730 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:00:30,250 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:01:00,771 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:01:31,281 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:02:01,792 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:02:32,318 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:03:02,827 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:03:33,334 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:04:03,850 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:04:34,368 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:05:04,885 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:05:35,392 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:06:05,909 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:06:36,416 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:07:06,924 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:07:37,440 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:08:07,957 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:08:38,473 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:09:08,979 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:09:39,486 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:10:09,994 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:10:40,513 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:11:11,019 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:11:41,527 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:12:12,037 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:12:42,558 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:13:13,065 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:13:43,581 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:14:14,098 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:14:44,606 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:15:15,115 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:15:45,624 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:16:16,144 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:16:46,651 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:17:17,168 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:17:47,686 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:18:18,203 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:18:48,722 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:19:19,239 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:19:49,749 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:20:20,267 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:20:50,784 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:21:21,292 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:21:51,801 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:22:22,324 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:22:52,831 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:23:23,342 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:23:53,853 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:24:24,373 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:24:54,890 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:25:25,398 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:25:55,906 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:26:26,415 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:26:56,931 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:27:27,438 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:27:57,947 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:28:28,456 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:28:58,966 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:29:29,476 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:29:59,992 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:30:30,516 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:31:01,021 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:31:31,538 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:32:02,055 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:32:32,577 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:33:03,085 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:33:33,604 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:34:04,121 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:34:34,639 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:35:05,157 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:35:35,675 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:36:06,191 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:36:36,709 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:37:07,226 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:37:37,734 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:38:08,256 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:38:38,773 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:39:09,281 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:39:39,797 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:40:10,305 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:40:40,822 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:41:11,331 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:41:41,840 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:42:12,361 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:42:42,885 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:43:13,395 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:43:43,903 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:44:14,413 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:44:44,920 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:45:15,429 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:45:45,940 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:46:16,455 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:46:46,966 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:47:17,483 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:47:48,000 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:48:18,508 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:48:49,027 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:49:19,534 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:49:50,041 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:50:20,557 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:50:51,077 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:51:21,583 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:51:52,093 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:52:22,602 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:52:53,110 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:53:23,627 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:53:54,136 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:54:24,643 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:54:55,152 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:55:25,660 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:55:56,175 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:56:26,683 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:56:57,192 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:57:27,708 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:57:58,214 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:58:28,730 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:58:59,240 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 19:59:29,761 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:00:00,279 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:00:30,787 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:01:01,296 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:01:31,812 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:02:02,330 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:02:32,837 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:03:03,354 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:03:33,869 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:04:04,376 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:04:34,892 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:05:05,409 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:05:35,929 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:06:06,444 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:06:36,952 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:07:07,470 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:07:37,987 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:08:09,167 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:08:39,677 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:09:10,184 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:09:40,692 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:10:11,200 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:10:41,706 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:11:12,212 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:11:42,727 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:12:13,249 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:12:43,757 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:13:14,273 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:13:44,780 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:14:15,295 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:14:45,813 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:15:16,322 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:15:46,831 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:16:17,350 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:16:47,856 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:17:18,373 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:17:48,881 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:18:19,391 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:18:49,900 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:19:20,410 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:19:50,917 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:20:21,434 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:20:51,941 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:21:22,463 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:21:52,985 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:22:23,502 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:22:54,019 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:23:24,538 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:23:55,055 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:24:25,561 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:24:56,071 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:25:26,593 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:25:57,105 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:26:27,613 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:26:58,129 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:27:28,645 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:27:59,154 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:28:29,671 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:29:00,188 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:29:30,707 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:30:01,222 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:30:31,740 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:31:02,251 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:31:32,761 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:32:03,281 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:32:33,788 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:33:04,305 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:33:34,821 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:34:05,329 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:34:35,846 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:35:06,364 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:35:36,872 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:36:07,388 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:36:37,903 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:37:08,420 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:37:38,940 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:38:09,448 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:38:39,965 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:39:10,473 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:39:40,989 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:40:11,506 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:40:42,016 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:41:12,529 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:41:43,050 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:42:13,567 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:42:44,086 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:43:14,593 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:43:45,111 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:44:15,619 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:44:46,138 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:45:16,655 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:45:47,171 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:46:17,689 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:46:48,196 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:47:18,703 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:47:49,211 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:48:19,726 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:48:50,242 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:49:20,749 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:49:51,259 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:50:21,766 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:50:52,290 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:51:22,810 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:51:53,328 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:52:23,836 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:52:54,347 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:53:24,866 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:53:55,385 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:54:25,902 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:54:56,420 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:55:26,936 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:55:57,448 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:56:27,966 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:56:58,486 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:57:29,003 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:57:59,518 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:58:30,025 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:59:00,544 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 20:59:31,061 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:00:01,575 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:00:32,090 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:01:02,610 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:01:33,126 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:02:03,645 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:02:34,153 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:03:04,670 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:03:35,177 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:04:05,684 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:04:36,205 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:05:06,723 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:05:37,240 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:06:07,757 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:06:38,274 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:07:08,791 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:07:39,298 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:08:09,815 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:08:40,324 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:09:10,830 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:09:41,347 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:10:11,853 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:10:42,373 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:11:12,890 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:11:43,399 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:12:13,917 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:12:44,435 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:13:14,951 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:13:45,470 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:14:15,977 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:14:46,498 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:15:17,017 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:15:47,527 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:16:18,036 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:16:48,544 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:17:19,051 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:17:49,559 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:18:20,066 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:18:50,574 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:19:21,090 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:19:51,596 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:20:22,104 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:20:52,614 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:21:23,130 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:21:53,637 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:22:24,155 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:22:54,672 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:23:25,181 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:23:55,689 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:24:26,207 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:24:56,724 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:25:27,230 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:25:57,738 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:26:28,257 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:26:58,764 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:27:29,282 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:27:59,799 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:28:30,307 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:29:00,823 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:29:31,331 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:30:01,840 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:30:32,350 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:31:02,862 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:31:33,368 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:32:03,885 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:32:34,402 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:33:04,919 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:33:35,439 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:34:05,955 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:34:36,471 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:35:06,987 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:35:37,506 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:36:08,022 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:36:38,539 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:37:09,046 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:37:39,554 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:38:10,064 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:38:40,578 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:39:11,096 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:39:41,604 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:40:12,121 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:40:42,629 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:41:13,141 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:41:43,659 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:42:14,167 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:42:44,674 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:43:15,189 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:43:45,699 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:44:16,215 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:44:46,722 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:45:17,229 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:45:47,746 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:46:18,265 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:46:48,780 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:47:19,288 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:47:49,795 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:48:20,313 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:48:50,829 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:49:21,336 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:49:51,851 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:50:22,369 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:50:52,881 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:51:23,389 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:51:53,906 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:52:24,416 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:52:54,932 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:53:25,444 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:53:55,952 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:54:26,459 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:54:56,969 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:55:27,487 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:55:58,004 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:56:28,511 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:56:59,030 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:57:29,548 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:58:00,057 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:58:30,574 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:59:01,090 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 21:59:31,607 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:00:02,117 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:00:32,627 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:01:03,145 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:01:33,652 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:02:04,159 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:02:34,666 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:03:05,187 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:03:35,696 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:04:06,204 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:04:36,712 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:05:07,227 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:05:37,735 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:06:08,257 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:06:38,765 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:07:09,276 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:07:39,784 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:08:10,291 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:08:40,808 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:09:11,317 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:09:41,836 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:10:12,353 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:10:42,866 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:11:13,372 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:11:43,888 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:12:14,396 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:12:44,902 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:13:15,409 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:13:45,918 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:14:16,430 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:14:46,941 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:15:17,451 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:15:47,970 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:16:18,477 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:16:48,984 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:17:19,500 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:17:50,017 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:18:20,524 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:18:51,032 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:19:21,543 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:19:52,054 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:20:22,573 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:20:53,092 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:21:23,599 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:21:54,108 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:22:24,628 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:22:55,144 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:23:25,661 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:23:56,172 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:24:26,697 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:24:57,204 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:25:27,722 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:25:58,230 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:26:28,750 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:26:59,257 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:27:29,768 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:28:00,288 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:28:30,805 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:29:01,324 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:29:31,833 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:30:02,341 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:30:32,855 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:31:03,376 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:31:33,892 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:32:04,409 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:32:34,927 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:33:05,435 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:33:35,953 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:34:06,472 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:34:36,979 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:35:07,494 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:35:38,011 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:36:08,528 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:36:39,035 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:37:09,551 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:37:40,058 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:38:10,574 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:38:41,082 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:39:11,598 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:39:42,105 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:40:12,614 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:40:43,142 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:41:13,660 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:41:44,167 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:42:14,685 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:42:45,203 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:43:15,711 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:43:46,227 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:44:16,739 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:44:47,249 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:45:17,765 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:45:48,273 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:46:18,780 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:46:49,299 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:47:19,806 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:47:50,314 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:48:20,822 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:48:51,341 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:49:21,857 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:49:52,374 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:50:22,882 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:50:53,403 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:51:23,910 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:51:54,418 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:52:24,926 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:52:55,433 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:53:25,941 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:53:56,451 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:54:26,969 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:54:57,486 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:55:27,992 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:55:58,500 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:56:29,020 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:56:59,537 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:57:30,054 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:58:00,575 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:58:31,083 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:59:01,598 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 22:59:32,106 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:00:02,615 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:00:33,139 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:01:03,646 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:01:34,164 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:02:04,681 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:02:35,189 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:03:05,705 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:03:36,221 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:04:06,742 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:04:37,254 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:05:07,763 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:05:38,271 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:06:08,778 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:06:39,287 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:07:09,793 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:07:40,315 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:08:10,824 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:08:41,332 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:09:11,849 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:09:42,356 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:10:12,866 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:10:43,392 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:11:13,909 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:11:44,425 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:12:14,943 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:12:45,450 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:13:15,966 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:13:46,483 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:14:16,991 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:14:47,509 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:15:18,016 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:15:48,523 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:16:19,040 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:16:49,555 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:17:20,071 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:17:50,587 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:18:21,103 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:18:51,621 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:19:22,138 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:19:52,644 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:20:23,150 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:20:53,666 core.py 122 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-08-23 23:21:24,180 core.py 122 DEBUG: ['heartbeat']
[__main__.<module>] - 2020-09-18 14:04:30,241 main.py 12 INFO: [0] Starting web server
[automat.core.handle_request] - 2020-09-18 14:04:34,187 core.py 122 DEBUG: []
[automat.core.handle_request] - 2020-09-18 14:04:35,048 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-09-18 14:04:35,048 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-09-18 14:04:35,300 core.py 122 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 14:04:35,326 core.py 122 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 14:04:43,795 core.py 122 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-09-18 14:04:43,795 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-09-18 14:04:43,947 core.py 122 DEBUG: ['favicon.ico']
[__main__.<module>] - 2020-09-18 14:07:03,126 main.py 12 INFO: [0] Starting web server
[automat.core.handle_request] - 2020-09-18 14:07:05,622 core.py 124 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-09-18 14:07:05,623 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-09-18 14:07:05,689 core.py 124 DEBUG: ['favicon.ico']
[automat.core.handle_request] - 2020-09-18 14:07:07,424 core.py 124 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-09-18 14:07:07,425 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-09-18 14:07:07,463 core.py 124 DEBUG: ['favicon.ico']
[automat.core.handle_request] - 2020-09-18 14:11:54,595 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:12:03,290 core.py 124 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-09-18 14:12:03,290 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-09-18 14:12:05,148 core.py 124 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-09-18 14:12:05,148 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.get_swagger_paths] - 2020-09-18 14:12:06,223 core.py 206 DEBUG: {'openapi': '3.0.2', 'info': {'title': 'PLATER - new_changes'}, 'paths': {'/about': {'get': {'description': 'Returns a json describing dataset.', 'summary': 'Json about dataset.', 'operationId': 'about_dataset', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'dataset-version': 'N/A', 'dataset-description': 'Add dataset version here', 'code-used': 'link to repo', 'date-generated': 'N/A'}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/{node_type}/{curie}': {'get': {'description': 'Returns `node` matching `curie`.', 'summary': 'Find `node` by `curie`.', 'operationId': 'get_source_node_by_curie', 'parameters': [{'name': 'node_type', 'in': 'path', 'description': 'Type of the to look for.', 'required': True, 'schema': {'type': 'string', 'enum': ['chemical_substance', 'molecular_activity', 'cell', 'molecular_entity', 'biological_entity', 'disease_or_phenotypic_feature', 'macromolecular_machine', 'clinical_trial', 'clinical_modifier', 'organismal_entity', 'biolink:NamedThing', 'biological_process', 'gene', 'named_thing', 'cellular_component', 'genomic_entity', 'information_content_entity', 'anatomical_entity', 'gene_or_gene_product', 'biological_process_or_activity', 'disease', 'phenotypic_feature']}}, {'name': 'curie', 'in': 'path', 'description': 'The curie of `source_node` that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'id': 'PATO:0000070', 'category': ['named_thing']}]}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/{source_node_type}/{target_node_type}/{curie}': {'get': {'description': 'Returns one hop paths from `source_node_type`  with `curie` to `target node type`.', 'summary': 'Get one hop results from source type to target type. Note: Please refer to `graph/schema` endpoint output to determine what target goes with a source', 'operationId': 'get_one_hop_source_node_type_to_target_node_type', 'parameters': [{'name': 'source_node_type', 'in': 'path', 'description': 'The node type of source node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['chemical_substance', 'molecular_activity', 'cell', 'molecular_entity', 'biological_entity', 'disease_or_phenotypic_feature', 'macromolecular_machine', 'clinical_trial', 'clinical_modifier', 'organismal_entity', 'biolink:NamedThing', 'biological_process', 'gene', 'named_thing', 'cellular_component', 'genomic_entity', 'information_content_entity', 'anatomical_entity', 'gene_or_gene_product', 'biological_process_or_activity', 'disease', 'phenotypic_feature']}}, {'name': 'target_node_type', 'in': 'path', 'description': 'The node type of target node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['chemical_substance', 'molecular_activity', 'cell', 'molecular_entity', 'biological_entity', 'disease_or_phenotypic_feature', 'macromolecular_machine', 'clinical_trial', 'clinical_modifier', 'organismal_entity', 'biolink:NamedThing', 'biological_process', 'gene', 'named_thing', 'cellular_component', 'genomic_entity', 'information_content_entity', 'anatomical_entity', 'gene_or_gene_product', 'biological_process_or_activity', 'disease', 'phenotypic_feature']}}, {'name': 'curie', 'in': 'path', 'description': 'The `curie` for the `source_node_type` that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'id': 'PATO:0000070', 'category': ['named_thing']}, {'predicate': 'OBO:RO_0002434', 'subject': 'PATO:0000070', 'provided_by': ['renci.bdc.semanticsearch.annotator'], 'id': '9af7d330f6935a5ef6a0068ff928ba0b', 'category': ['association'], 'edge_label': 'association', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type': 'OBAN:association', 'object': 'TOPMED.TAG:1'}, {'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}]]}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/graph/schema': {'get': {'deprecated': True, 'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_graph_schema', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/predicates': {'get': {'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_predicates', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/cypher': {'post': {'summary': 'Run cypher query.', 'description': 'Runs cypher query against the Neo4j instance, and returns an equivalent response exepected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).', 'requestBody': {'description': 'Cypher query.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query': 'MATCH (c) return c limit 1'}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'results': [{'columns': ['c'], 'data': [{'row': [{'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}], 'meta': [{'id': 0, 'type': 'node', 'deleted': False}]}]}], 'errors': []}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/reasonerapi': {'get': {'description': 'Returns a list of question templates that can be used to query this plater instance/', 'operationId': 'get_question_templates', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}]}}}}}, 'tags': [{'name': 'new_changes'}]}, 'post': {'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_question', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/simple_spec': {'get': {'description': 'Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.', 'operationId': 'get_simple_spec', 'parameters': [{'name': 'source', 'in': 'query', 'description': 'The curie of source that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'CHEBI:33216'}}, {'name': 'target', 'in': 'query', 'description': 'The curie of target that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'NCBIGene:1'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'source_type': 'chemical_substance', 'target_type': 'chemical_substance', 'edge_type': 'similar_to'}]}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/graph/summary': {'get': {'description': 'Returns summary of the graph', 'operationId': 'get_graph_summary', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance:molecular_entity:named_thing': {'gene:biological_entity:named_thing': {'directly_interacts_with': 20}}}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/overlay': {'post': {'description': 'Given a reasonerAPI graph add support edges for any nodes linked in result bindings.', 'operationId': 'post_reasoner_api_graph', 'requestBody': {'description': 'Reasoner api graph.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}, {'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'support_edge_id', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}, {'kg_id': 'support_edge_id', 'q_id': 's_0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}}}, 'tags': [{'name': 'new_changes'}]}}}}
[automat.core.get_swagger_paths] - 2020-09-18 14:12:07,356 core.py 206 DEBUG: {'openapi': '3.0.2', 'info': {'title': 'PLATER - new_changes'}, 'paths': {'/about': {'get': {'description': 'Returns a json describing dataset.', 'summary': 'Json about dataset.', 'operationId': 'about_dataset', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'dataset-version': 'N/A', 'dataset-description': 'Add dataset version here', 'code-used': 'link to repo', 'date-generated': 'N/A'}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/{node_type}/{curie}': {'get': {'description': 'Returns `node` matching `curie`.', 'summary': 'Find `node` by `curie`.', 'operationId': 'get_source_node_by_curie', 'parameters': [{'name': 'node_type', 'in': 'path', 'description': 'Type of the to look for.', 'required': True, 'schema': {'type': 'string', 'enum': ['chemical_substance', 'molecular_activity', 'cell', 'molecular_entity', 'biological_entity', 'disease_or_phenotypic_feature', 'macromolecular_machine', 'clinical_trial', 'clinical_modifier', 'organismal_entity', 'biolink:NamedThing', 'biological_process', 'gene', 'named_thing', 'cellular_component', 'genomic_entity', 'information_content_entity', 'anatomical_entity', 'gene_or_gene_product', 'biological_process_or_activity', 'disease', 'phenotypic_feature']}}, {'name': 'curie', 'in': 'path', 'description': 'The curie of `source_node` that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'id': 'PATO:0000070', 'category': ['named_thing']}]}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/{source_node_type}/{target_node_type}/{curie}': {'get': {'description': 'Returns one hop paths from `source_node_type`  with `curie` to `target node type`.', 'summary': 'Get one hop results from source type to target type. Note: Please refer to `graph/schema` endpoint output to determine what target goes with a source', 'operationId': 'get_one_hop_source_node_type_to_target_node_type', 'parameters': [{'name': 'source_node_type', 'in': 'path', 'description': 'The node type of source node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['chemical_substance', 'molecular_activity', 'cell', 'molecular_entity', 'biological_entity', 'disease_or_phenotypic_feature', 'macromolecular_machine', 'clinical_trial', 'clinical_modifier', 'organismal_entity', 'biolink:NamedThing', 'biological_process', 'gene', 'named_thing', 'cellular_component', 'genomic_entity', 'information_content_entity', 'anatomical_entity', 'gene_or_gene_product', 'biological_process_or_activity', 'disease', 'phenotypic_feature']}}, {'name': 'target_node_type', 'in': 'path', 'description': 'The node type of target node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['chemical_substance', 'molecular_activity', 'cell', 'molecular_entity', 'biological_entity', 'disease_or_phenotypic_feature', 'macromolecular_machine', 'clinical_trial', 'clinical_modifier', 'organismal_entity', 'biolink:NamedThing', 'biological_process', 'gene', 'named_thing', 'cellular_component', 'genomic_entity', 'information_content_entity', 'anatomical_entity', 'gene_or_gene_product', 'biological_process_or_activity', 'disease', 'phenotypic_feature']}}, {'name': 'curie', 'in': 'path', 'description': 'The `curie` for the `source_node_type` that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'id': 'PATO:0000070', 'category': ['named_thing']}, {'predicate': 'OBO:RO_0002434', 'subject': 'PATO:0000070', 'provided_by': ['renci.bdc.semanticsearch.annotator'], 'id': '9af7d330f6935a5ef6a0068ff928ba0b', 'category': ['association'], 'edge_label': 'association', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type': 'OBAN:association', 'object': 'TOPMED.TAG:1'}, {'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}]]}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/graph/schema': {'get': {'deprecated': True, 'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_graph_schema', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/predicates': {'get': {'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_predicates', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/cypher': {'post': {'summary': 'Run cypher query.', 'description': 'Runs cypher query against the Neo4j instance, and returns an equivalent response exepected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).', 'requestBody': {'description': 'Cypher query.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query': 'MATCH (c) return c limit 1'}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'results': [{'columns': ['c'], 'data': [{'row': [{'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}], 'meta': [{'id': 0, 'type': 'node', 'deleted': False}]}]}], 'errors': []}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/reasonerapi': {'get': {'description': 'Returns a list of question templates that can be used to query this plater instance/', 'operationId': 'get_question_templates', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}]}}}}}, 'tags': [{'name': 'new_changes'}]}, 'post': {'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_question', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/simple_spec': {'get': {'description': 'Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.', 'operationId': 'get_simple_spec', 'parameters': [{'name': 'source', 'in': 'query', 'description': 'The curie of source that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'CHEBI:33216'}}, {'name': 'target', 'in': 'query', 'description': 'The curie of target that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'NCBIGene:1'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'source_type': 'chemical_substance', 'target_type': 'chemical_substance', 'edge_type': 'similar_to'}]}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/graph/summary': {'get': {'description': 'Returns summary of the graph', 'operationId': 'get_graph_summary', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance:molecular_entity:named_thing': {'gene:biological_entity:named_thing': {'directly_interacts_with': 20}}}}}}}}, 'tags': [{'name': 'new_changes'}]}}, '/overlay': {'post': {'description': 'Given a reasonerAPI graph add support edges for any nodes linked in result bindings.', 'operationId': 'post_reasoner_api_graph', 'requestBody': {'description': 'Reasoner api graph.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}, {'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'support_edge_id', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}, {'kg_id': 'support_edge_id', 'q_id': 's_0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}}}, 'tags': [{'name': 'new_changes'}]}}}}
[automat.core.handle_request] - 2020-09-18 14:12:07,460 core.py 124 DEBUG: ['favicon.ico']
[automat.core.handle_request] - 2020-09-18 14:12:25,136 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:12:55,641 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:13:26,156 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:14:08,149 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:14:20,573 core.py 124 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-09-18 14:14:20,573 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.get_swagger_paths] - 2020-09-18 14:14:22,781 core.py 206 DEBUG: {'openapi': '3.0.2', 'info': {'title': 'PLATER - new_changes'}, 'paths': {'/about': {'get': {'description': 'Returns a json describing dataset.', 'summary': 'Json about dataset.', 'operationId': 'about_dataset', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'dataset-version': 'N/A', 'dataset-description': 'Add dataset version here', 'code-used': 'link to repo', 'date-generated': 'N/A'}}}}}}, 'tags': ['new_changes']}}, '/{node_type}/{curie}': {'get': {'description': 'Returns `node` matching `curie`.', 'summary': 'Find `node` by `curie`.', 'operationId': 'get_source_node_by_curie', 'parameters': [{'name': 'node_type', 'in': 'path', 'description': 'Type of the to look for.', 'required': True, 'schema': {'type': 'string', 'enum': ['cellular_component', 'named_thing', 'chemical_substance', 'gene_or_gene_product', 'disease', 'genomic_entity', 'phenotypic_feature', 'anatomical_entity', 'molecular_activity', 'molecular_entity', 'biological_process', 'gene', 'biolink:NamedThing', 'information_content_entity', 'organismal_entity', 'macromolecular_machine', 'biological_entity', 'biological_process_or_activity', 'cell', 'disease_or_phenotypic_feature', 'clinical_modifier', 'clinical_trial']}}, {'name': 'curie', 'in': 'path', 'description': 'The curie of `source_node` that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'id': 'PATO:0000070', 'category': ['named_thing']}]}}}}}, 'tags': ['new_changes']}}, '/{source_node_type}/{target_node_type}/{curie}': {'get': {'description': 'Returns one hop paths from `source_node_type`  with `curie` to `target node type`.', 'summary': 'Get one hop results from source type to target type. Note: Please refer to `graph/schema` endpoint output to determine what target goes with a source', 'operationId': 'get_one_hop_source_node_type_to_target_node_type', 'parameters': [{'name': 'source_node_type', 'in': 'path', 'description': 'The node type of source node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['cellular_component', 'named_thing', 'chemical_substance', 'gene_or_gene_product', 'disease', 'genomic_entity', 'phenotypic_feature', 'anatomical_entity', 'molecular_activity', 'molecular_entity', 'biological_process', 'gene', 'biolink:NamedThing', 'information_content_entity', 'organismal_entity', 'macromolecular_machine', 'biological_entity', 'biological_process_or_activity', 'cell', 'disease_or_phenotypic_feature', 'clinical_modifier', 'clinical_trial']}}, {'name': 'target_node_type', 'in': 'path', 'description': 'The node type of target node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['cellular_component', 'named_thing', 'chemical_substance', 'gene_or_gene_product', 'disease', 'genomic_entity', 'phenotypic_feature', 'anatomical_entity', 'molecular_activity', 'molecular_entity', 'biological_process', 'gene', 'biolink:NamedThing', 'information_content_entity', 'organismal_entity', 'macromolecular_machine', 'biological_entity', 'biological_process_or_activity', 'cell', 'disease_or_phenotypic_feature', 'clinical_modifier', 'clinical_trial']}}, {'name': 'curie', 'in': 'path', 'description': 'The `curie` for the `source_node_type` that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'id': 'PATO:0000070', 'category': ['named_thing']}, {'predicate': 'OBO:RO_0002434', 'subject': 'PATO:0000070', 'provided_by': ['renci.bdc.semanticsearch.annotator'], 'id': '9af7d330f6935a5ef6a0068ff928ba0b', 'category': ['association'], 'edge_label': 'association', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type': 'OBAN:association', 'object': 'TOPMED.TAG:1'}, {'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}]]}}}}}, 'tags': ['new_changes']}}, '/graph/schema': {'get': {'deprecated': True, 'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_graph_schema', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': ['new_changes']}}, '/predicates': {'get': {'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_predicates', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': ['new_changes']}}, '/cypher': {'post': {'summary': 'Run cypher query.', 'description': 'Runs cypher query against the Neo4j instance, and returns an equivalent response exepected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).', 'requestBody': {'description': 'Cypher query.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query': 'MATCH (c) return c limit 1'}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'results': [{'columns': ['c'], 'data': [{'row': [{'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}], 'meta': [{'id': 0, 'type': 'node', 'deleted': False}]}]}], 'errors': []}}}}}}, 'tags': ['new_changes']}}, '/reasonerapi': {'get': {'description': 'Returns a list of question templates that can be used to query this plater instance/', 'operationId': 'get_question_templates', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}]}}}}}, 'tags': ['new_changes']}, 'post': {'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_question', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}, 'tags': ['new_changes']}}, '/simple_spec': {'get': {'description': 'Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.', 'operationId': 'get_simple_spec', 'parameters': [{'name': 'source', 'in': 'query', 'description': 'The curie of source that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'CHEBI:33216'}}, {'name': 'target', 'in': 'query', 'description': 'The curie of target that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'NCBIGene:1'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'source_type': 'chemical_substance', 'target_type': 'chemical_substance', 'edge_type': 'similar_to'}]}}}}}, 'tags': ['new_changes']}}, '/graph/summary': {'get': {'description': 'Returns summary of the graph', 'operationId': 'get_graph_summary', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance:molecular_entity:named_thing': {'gene:biological_entity:named_thing': {'directly_interacts_with': 20}}}}}}}}, 'tags': ['new_changes']}}, '/overlay': {'post': {'description': 'Given a reasonerAPI graph add support edges for any nodes linked in result bindings.', 'operationId': 'post_reasoner_api_graph', 'requestBody': {'description': 'Reasoner api graph.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}, {'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'support_edge_id', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}, {'kg_id': 'support_edge_id', 'q_id': 's_0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}}}, 'tags': ['new_changes']}}}}
[automat.core.handle_request] - 2020-09-18 14:14:22,921 core.py 124 DEBUG: ['favicon.ico']
[automat.core.handle_request] - 2020-09-18 14:14:38,656 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:15:09,173 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:15:20,465 core.py 124 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-09-18 14:15:20,465 core.py 39 DEBUG: paths for open_api specs of each server
[automat.util.async_client.async_get_json] - 2020-09-18 14:15:24,475 async_client.py 37 ERROR: Failed to get response from http://localhost:8091/openapi.json.
[automat.util.async_client.async_get_json] - 2020-09-18 14:15:24,583 async_client.py 38 DEBUG: None
[automat.core.get_swagger_paths] - 2020-09-18 14:15:24,583 core.py 204 ERROR: Internal server error Cannot connect to host localhost:8091 ssl:default [Connect call failed ('127.0.0.1', 8091)]
[automat.core.handle_request] - 2020-09-18 14:15:24,679 core.py 124 DEBUG: ['favicon.ico']
[automat.core.handle_request] - 2020-09-18 14:15:29,260 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:15:29,525 core.py 124 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-09-18 14:15:29,526 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.get_swagger_paths] - 2020-09-18 14:15:31,731 core.py 206 DEBUG: {'openapi': '3.0.2', 'info': {'title': 'PLATER - new_changes'}, 'paths': {'/about': {'get': {'description': 'Returns a json describing dataset.', 'summary': 'Json about dataset.', 'operationId': 'about_dataset', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'dataset-version': 'N/A', 'dataset-description': 'Add dataset version here', 'code-used': 'link to repo', 'date-generated': 'N/A'}}}}}}, 'tags': ['new_changes']}}, '/{node_type}/{curie}': {'get': {'description': 'Returns `node` matching `curie`.', 'summary': 'Find `node` by `curie`.', 'operationId': 'get_source_node_by_curie', 'parameters': [{'name': 'node_type', 'in': 'path', 'description': 'Type of the to look for.', 'required': True, 'schema': {'type': 'string', 'enum': ['chemical_substance', 'clinical_modifier', 'disease', 'disease_or_phenotypic_feature', 'information_content_entity', 'macromolecular_machine', 'anatomical_entity', 'biological_entity', 'genomic_entity', 'gene_or_gene_product', 'molecular_activity', 'molecular_entity', 'organismal_entity', 'named_thing', 'phenotypic_feature', 'cellular_component', 'gene', 'biolink:NamedThing', 'clinical_trial', 'cell', 'biological_process', 'biological_process_or_activity']}}, {'name': 'curie', 'in': 'path', 'description': 'The curie of `source_node` that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'id': 'PATO:0000070', 'category': ['named_thing']}]}}}}}, 'tags': ['new_changes']}}, '/{source_node_type}/{target_node_type}/{curie}': {'get': {'description': 'Returns one hop paths from `source_node_type`  with `curie` to `target node type`.', 'summary': 'Get one hop results from source type to target type. Note: Please refer to `graph/schema` endpoint output to determine what target goes with a source', 'operationId': 'get_one_hop_source_node_type_to_target_node_type', 'parameters': [{'name': 'source_node_type', 'in': 'path', 'description': 'The node type of source node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['chemical_substance', 'clinical_modifier', 'disease', 'disease_or_phenotypic_feature', 'information_content_entity', 'macromolecular_machine', 'anatomical_entity', 'biological_entity', 'genomic_entity', 'gene_or_gene_product', 'molecular_activity', 'molecular_entity', 'organismal_entity', 'named_thing', 'phenotypic_feature', 'cellular_component', 'gene', 'biolink:NamedThing', 'clinical_trial', 'cell', 'biological_process', 'biological_process_or_activity']}}, {'name': 'target_node_type', 'in': 'path', 'description': 'The node type of target node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['chemical_substance', 'clinical_modifier', 'disease', 'disease_or_phenotypic_feature', 'information_content_entity', 'macromolecular_machine', 'anatomical_entity', 'biological_entity', 'genomic_entity', 'gene_or_gene_product', 'molecular_activity', 'molecular_entity', 'organismal_entity', 'named_thing', 'phenotypic_feature', 'cellular_component', 'gene', 'biolink:NamedThing', 'clinical_trial', 'cell', 'biological_process', 'biological_process_or_activity']}}, {'name': 'curie', 'in': 'path', 'description': 'The `curie` for the `source_node_type` that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'id': 'PATO:0000070', 'category': ['named_thing']}, {'predicate': 'OBO:RO_0002434', 'subject': 'PATO:0000070', 'provided_by': ['renci.bdc.semanticsearch.annotator'], 'id': '9af7d330f6935a5ef6a0068ff928ba0b', 'category': ['association'], 'edge_label': 'association', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type': 'OBAN:association', 'object': 'TOPMED.TAG:1'}, {'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}]]}}}}}, 'tags': ['new_changes']}}, '/graph/schema': {'get': {'deprecated': True, 'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_graph_schema', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': ['new_changes']}}, '/predicates': {'get': {'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_predicates', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': ['new_changes']}}, '/cypher': {'post': {'summary': 'Run cypher query.', 'description': 'Runs cypher query against the Neo4j instance, and returns an equivalent response exepected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).', 'requestBody': {'description': 'Cypher query.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query': 'MATCH (c) return c limit 1'}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'results': [{'columns': ['c'], 'data': [{'row': [{'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}], 'meta': [{'id': 0, 'type': 'node', 'deleted': False}]}]}], 'errors': []}}}}}}, 'tags': ['new_changes']}}, '/reasonerapi': {'get': {'description': 'Returns a list of question templates that can be used to query this plater instance/', 'operationId': 'get_question_templates', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}]}}}}}, 'tags': ['new_changes']}, 'post': {'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_question', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}, 'tags': ['new_changes']}}, '/simple_spec': {'get': {'description': 'Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.', 'operationId': 'get_simple_spec', 'parameters': [{'name': 'source', 'in': 'query', 'description': 'The curie of source that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'CHEBI:33216'}}, {'name': 'target', 'in': 'query', 'description': 'The curie of target that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'NCBIGene:1'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'source_type': 'chemical_substance', 'target_type': 'chemical_substance', 'edge_type': 'similar_to'}]}}}}}, 'tags': ['new_changes']}}, '/graph/summary': {'get': {'description': 'Returns summary of the graph', 'operationId': 'get_graph_summary', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance:molecular_entity:named_thing': {'gene:biological_entity:named_thing': {'directly_interacts_with': 20}}}}}}}}, 'tags': ['new_changes']}}, '/overlay': {'post': {'description': 'Given a reasonerAPI graph add support edges for any nodes linked in result bindings.', 'operationId': 'post_reasoner_api_graph', 'requestBody': {'description': 'Reasoner api graph.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}, {'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'support_edge_id', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}, {'kg_id': 'support_edge_id', 'q_id': 's_0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}}}, 'tags': ['new_changes']}}}}
[automat.core.handle_request] - 2020-09-18 14:15:31,797 core.py 124 DEBUG: ['favicon.ico']
[automat.core.handle_request] - 2020-09-18 14:15:54,563 core.py 124 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-09-18 14:15:54,564 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.get_swagger_paths] - 2020-09-18 14:15:56,784 core.py 206 DEBUG: {'openapi': '3.0.2', 'info': {'title': 'PLATER - new_changes'}, 'paths': {'/about': {'get': {'description': 'Returns a json describing dataset.', 'summary': 'Json about dataset.', 'operationId': 'about_dataset', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'dataset-version': 'N/A', 'dataset-description': 'Add dataset version here', 'code-used': 'link to repo', 'date-generated': 'N/A'}}}}}}, 'tags': ['new_changes']}}, '/{node_type}/{curie}': {'get': {'description': 'Returns `node` matching `curie`.', 'summary': 'Find `node` by `curie`.', 'operationId': 'get_source_node_by_curie', 'parameters': [{'name': 'node_type', 'in': 'path', 'description': 'Type of the to look for.', 'required': True, 'schema': {'type': 'string', 'enum': ['chemical_substance', 'clinical_modifier', 'disease', 'disease_or_phenotypic_feature', 'information_content_entity', 'macromolecular_machine', 'anatomical_entity', 'biological_entity', 'genomic_entity', 'gene_or_gene_product', 'molecular_activity', 'molecular_entity', 'organismal_entity', 'named_thing', 'phenotypic_feature', 'cellular_component', 'gene', 'biolink:NamedThing', 'clinical_trial', 'cell', 'biological_process', 'biological_process_or_activity']}}, {'name': 'curie', 'in': 'path', 'description': 'The curie of `source_node` that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'id': 'PATO:0000070', 'category': ['named_thing']}]}}}}}, 'tags': ['new_changes']}}, '/{source_node_type}/{target_node_type}/{curie}': {'get': {'description': 'Returns one hop paths from `source_node_type`  with `curie` to `target node type`.', 'summary': 'Get one hop results from source type to target type. Note: Please refer to `graph/schema` endpoint output to determine what target goes with a source', 'operationId': 'get_one_hop_source_node_type_to_target_node_type', 'parameters': [{'name': 'source_node_type', 'in': 'path', 'description': 'The node type of source node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['chemical_substance', 'clinical_modifier', 'disease', 'disease_or_phenotypic_feature', 'information_content_entity', 'macromolecular_machine', 'anatomical_entity', 'biological_entity', 'genomic_entity', 'gene_or_gene_product', 'molecular_activity', 'molecular_entity', 'organismal_entity', 'named_thing', 'phenotypic_feature', 'cellular_component', 'gene', 'biolink:NamedThing', 'clinical_trial', 'cell', 'biological_process', 'biological_process_or_activity']}}, {'name': 'target_node_type', 'in': 'path', 'description': 'The node type of target node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['chemical_substance', 'clinical_modifier', 'disease', 'disease_or_phenotypic_feature', 'information_content_entity', 'macromolecular_machine', 'anatomical_entity', 'biological_entity', 'genomic_entity', 'gene_or_gene_product', 'molecular_activity', 'molecular_entity', 'organismal_entity', 'named_thing', 'phenotypic_feature', 'cellular_component', 'gene', 'biolink:NamedThing', 'clinical_trial', 'cell', 'biological_process', 'biological_process_or_activity']}}, {'name': 'curie', 'in': 'path', 'description': 'The `curie` for the `source_node_type` that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'id': 'PATO:0000070', 'category': ['named_thing']}, {'predicate': 'OBO:RO_0002434', 'subject': 'PATO:0000070', 'provided_by': ['renci.bdc.semanticsearch.annotator'], 'id': '9af7d330f6935a5ef6a0068ff928ba0b', 'category': ['association'], 'edge_label': 'association', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type': 'OBAN:association', 'object': 'TOPMED.TAG:1'}, {'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}]]}}}}}, 'tags': ['new_changes']}}, '/graph/schema': {'get': {'deprecated': True, 'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_graph_schema', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': ['new_changes']}}, '/predicates': {'get': {'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_predicates', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': ['new_changes']}}, '/cypher': {'post': {'summary': 'Run cypher query.', 'description': 'Runs cypher query against the Neo4j instance, and returns an equivalent response exepected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).', 'requestBody': {'description': 'Cypher query.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query': 'MATCH (c) return c limit 1'}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'results': [{'columns': ['c'], 'data': [{'row': [{'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}], 'meta': [{'id': 0, 'type': 'node', 'deleted': False}]}]}], 'errors': []}}}}}}, 'tags': ['new_changes']}}, '/reasonerapi': {'get': {'description': 'Returns a list of question templates that can be used to query this plater instance/', 'operationId': 'get_question_templates', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}]}}}}}, 'tags': ['new_changes']}, 'post': {'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_question', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}, 'tags': ['new_changes']}}, '/simple_spec': {'get': {'description': 'Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.', 'operationId': 'get_simple_spec', 'parameters': [{'name': 'source', 'in': 'query', 'description': 'The curie of source that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'CHEBI:33216'}}, {'name': 'target', 'in': 'query', 'description': 'The curie of target that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'NCBIGene:1'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'source_type': 'chemical_substance', 'target_type': 'chemical_substance', 'edge_type': 'similar_to'}]}}}}}, 'tags': ['new_changes']}}, '/graph/summary': {'get': {'description': 'Returns summary of the graph', 'operationId': 'get_graph_summary', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance:molecular_entity:named_thing': {'gene:biological_entity:named_thing': {'directly_interacts_with': 20}}}}}}}}, 'tags': ['new_changes']}}, '/overlay': {'post': {'description': 'Given a reasonerAPI graph add support edges for any nodes linked in result bindings.', 'operationId': 'post_reasoner_api_graph', 'requestBody': {'description': 'Reasoner api graph.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}, 'allowEmptyValue': False, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}, {'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'support_edge_id', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}, {'kg_id': 'support_edge_id', 'q_id': 's_0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}}}, 'tags': ['new_changes']}}}}
[automat.core.handle_request] - 2020-09-18 14:15:56,894 core.py 124 DEBUG: ['favicon.ico']
[automat.core.handle_request] - 2020-09-18 14:15:59,776 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:16:30,348 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:16:49,337 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:17:17,737 core.py 124 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-09-18 14:17:17,738 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-09-18 14:17:19,843 core.py 124 DEBUG: ['heartbeat']
[automat.core.get_swagger_paths] - 2020-09-18 14:17:19,935 core.py 206 DEBUG: {'openapi': '3.0.2', 'info': {'title': 'PLATER - new_changes'}, 'paths': {'/about': {'get': {'description': 'Returns a json describing dataset.', 'summary': 'Json about dataset.', 'operationId': 'about_dataset', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'dataset-version': 'N/A', 'dataset-description': 'Add dataset version here', 'code-used': 'link to repo', 'date-generated': 'N/A'}}}}}}, 'tags': ['new_changes']}}, '/{node_type}/{curie}': {'get': {'description': 'Returns `node` matching `curie`.', 'summary': 'Find `node` by `curie`.', 'operationId': 'get_source_node_by_curie', 'parameters': [{'name': 'node_type', 'in': 'path', 'description': 'Type of the to look for.', 'required': True, 'schema': {'type': 'string', 'enum': ['organismal_entity', 'molecular_activity', 'anatomical_entity', 'clinical_trial', 'gene_or_gene_product', 'biological_entity', 'named_thing', 'cellular_component', 'biolink:NamedThing', 'clinical_modifier', 'disease_or_phenotypic_feature', 'macromolecular_machine', 'phenotypic_feature', 'gene', 'chemical_substance', 'information_content_entity', 'cell', 'biological_process_or_activity', 'molecular_entity', 'genomic_entity', 'disease', 'biological_process']}}, {'name': 'curie', 'in': 'path', 'description': 'The curie of `source_node` that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'id': 'PATO:0000070', 'category': ['named_thing']}]}}}}}, 'tags': ['new_changes']}}, '/{source_node_type}/{target_node_type}/{curie}': {'get': {'description': 'Returns one hop paths from `source_node_type`  with `curie` to `target node type`.', 'summary': 'Get one hop results from source type to target type. Note: Please refer to `graph/schema` endpoint output to determine what target goes with a source', 'operationId': 'get_one_hop_source_node_type_to_target_node_type', 'parameters': [{'name': 'source_node_type', 'in': 'path', 'description': 'The node type of source node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['organismal_entity', 'molecular_activity', 'anatomical_entity', 'clinical_trial', 'gene_or_gene_product', 'biological_entity', 'named_thing', 'cellular_component', 'biolink:NamedThing', 'clinical_modifier', 'disease_or_phenotypic_feature', 'macromolecular_machine', 'phenotypic_feature', 'gene', 'chemical_substance', 'information_content_entity', 'cell', 'biological_process_or_activity', 'molecular_entity', 'genomic_entity', 'disease', 'biological_process']}}, {'name': 'target_node_type', 'in': 'path', 'description': 'The node type of target node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['organismal_entity', 'molecular_activity', 'anatomical_entity', 'clinical_trial', 'gene_or_gene_product', 'biological_entity', 'named_thing', 'cellular_component', 'biolink:NamedThing', 'clinical_modifier', 'disease_or_phenotypic_feature', 'macromolecular_machine', 'phenotypic_feature', 'gene', 'chemical_substance', 'information_content_entity', 'cell', 'biological_process_or_activity', 'molecular_entity', 'genomic_entity', 'disease', 'biological_process']}}, {'name': 'curie', 'in': 'path', 'description': 'The `curie` for the `source_node_type` that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'id': 'PATO:0000070', 'category': ['named_thing']}, {'predicate': 'OBO:RO_0002434', 'subject': 'PATO:0000070', 'provided_by': ['renci.bdc.semanticsearch.annotator'], 'id': '9af7d330f6935a5ef6a0068ff928ba0b', 'category': ['association'], 'edge_label': 'association', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type': 'OBAN:association', 'object': 'TOPMED.TAG:1'}, {'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}]]}}}}}, 'tags': ['new_changes']}}, '/graph/schema': {'get': {'deprecated': True, 'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_graph_schema', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': ['new_changes']}}, '/predicates': {'get': {'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_predicates', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': ['new_changes']}}, '/cypher': {'post': {'summary': 'Run cypher query.', 'description': 'Runs cypher query against the Neo4j instance, and returns an equivalent response exepected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).', 'requestBody': {'description': 'Cypher query.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query': 'MATCH (c) return c limit 1'}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'results': [{'columns': ['c'], 'data': [{'row': [{'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}], 'meta': [{'id': 0, 'type': 'node', 'deleted': False}]}]}], 'errors': []}}}}}}, 'tags': ['new_changes']}}, '/reasonerapi': {'get': {'description': 'Returns a list of question templates that can be used to query this plater instance/', 'operationId': 'get_question_templates', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}]}}}}}, 'tags': ['new_changes']}, 'post': {'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_question', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}, 'tags': ['new_changes']}}, '/simple_spec': {'get': {'description': 'Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.', 'operationId': 'get_simple_spec', 'parameters': [{'name': 'source', 'in': 'query', 'description': 'The curie of source that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'CHEBI:33216'}}, {'name': 'target', 'in': 'query', 'description': 'The curie of target that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'NCBIGene:1'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'source_type': 'chemical_substance', 'target_type': 'chemical_substance', 'edge_type': 'similar_to'}]}}}}}, 'tags': ['new_changes']}}, '/graph/summary': {'get': {'description': 'Returns summary of the graph', 'operationId': 'get_graph_summary', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance:molecular_entity:named_thing': {'gene:biological_entity:named_thing': {'directly_interacts_with': 20}}}}}}}}, 'tags': ['new_changes']}}, '/overlay': {'post': {'description': 'Given a reasonerAPI graph add support edges for any nodes linked in result bindings.', 'operationId': 'post_reasoner_api_graph', 'requestBody': {'description': 'Reasoner api graph.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}, {'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'support_edge_id', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}, {'kg_id': 'support_edge_id', 'q_id': 's_0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}}}, 'tags': ['new_changes']}}}}
[automat.core.handle_request] - 2020-09-18 14:17:20,026 core.py 124 DEBUG: ['favicon.ico']
[automat.core.handle_request] - 2020-09-18 14:17:50,355 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:18:20,873 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:18:51,389 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:19:21,895 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:19:52,410 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:20:22,928 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:20:53,434 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:21:23,951 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:21:54,457 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:22:25,221 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:22:55,747 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:23:26,262 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:23:56,777 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:24:27,290 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:24:57,803 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:25:28,312 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:25:58,824 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:26:29,342 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:26:59,848 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:27:30,357 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:28:00,866 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:28:31,383 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:29:01,904 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:29:32,647 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:30:03,172 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:30:33,690 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:31:04,197 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:31:34,702 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:32:05,209 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:32:35,716 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:33:14,379 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:33:44,892 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:34:15,408 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:34:24,881 core.py 124 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-09-18 14:34:24,881 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.get_swagger_paths] - 2020-09-18 14:34:27,116 core.py 206 DEBUG: {'openapi': '3.0.2', 'info': {'title': 'PLATER - new_changes'}, 'paths': {'/about': {'get': {'description': 'Returns a json describing dataset.', 'summary': 'Json about dataset.', 'operationId': 'about_dataset', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'dataset-version': 'N/A', 'dataset-description': 'Add dataset version here', 'code-used': 'link to repo', 'date-generated': 'N/A'}}}}}}, 'tags': ['new_changes']}}, '/{node_type}/{curie}': {'get': {'description': 'Returns `node` matching `curie`.', 'summary': 'Find `node` by `curie`.', 'operationId': 'get_source_node_by_curienew_changes', 'parameters': [{'name': 'node_type', 'in': 'path', 'description': 'Type of the to look for.', 'required': True, 'schema': {'type': 'string', 'enum': ['disease', 'organismal_entity', 'biological_process_or_activity', 'disease_or_phenotypic_feature', 'gene_or_gene_product', 'cellular_component', 'genomic_entity', 'molecular_activity', 'biolink:NamedThing', 'macromolecular_machine', 'clinical_trial', 'information_content_entity', 'gene', 'named_thing', 'biological_process', 'phenotypic_feature', 'biological_entity', 'molecular_entity', 'chemical_substance', 'clinical_modifier', 'anatomical_entity', 'cell']}}, {'name': 'curie', 'in': 'path', 'description': 'The curie of `source_node` that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'id': 'PATO:0000070', 'category': ['named_thing']}]}}}}}, 'tags': ['new_changes']}}, '/{source_node_type}/{target_node_type}/{curie}': {'get': {'description': 'Returns one hop paths from `source_node_type`  with `curie` to `target node type`.', 'summary': 'Get one hop results from source type to target type. Note: Please refer to `graph/schema` endpoint output to determine what target goes with a source', 'operationId': 'get_one_hop_source_node_type_to_target_node_typenew_changes', 'parameters': [{'name': 'source_node_type', 'in': 'path', 'description': 'The node type of source node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['disease', 'organismal_entity', 'biological_process_or_activity', 'disease_or_phenotypic_feature', 'gene_or_gene_product', 'cellular_component', 'genomic_entity', 'molecular_activity', 'biolink:NamedThing', 'macromolecular_machine', 'clinical_trial', 'information_content_entity', 'gene', 'named_thing', 'biological_process', 'phenotypic_feature', 'biological_entity', 'molecular_entity', 'chemical_substance', 'clinical_modifier', 'anatomical_entity', 'cell']}}, {'name': 'target_node_type', 'in': 'path', 'description': 'The node type of target node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['disease', 'organismal_entity', 'biological_process_or_activity', 'disease_or_phenotypic_feature', 'gene_or_gene_product', 'cellular_component', 'genomic_entity', 'molecular_activity', 'biolink:NamedThing', 'macromolecular_machine', 'clinical_trial', 'information_content_entity', 'gene', 'named_thing', 'biological_process', 'phenotypic_feature', 'biological_entity', 'molecular_entity', 'chemical_substance', 'clinical_modifier', 'anatomical_entity', 'cell']}}, {'name': 'curie', 'in': 'path', 'description': 'The `curie` for the `source_node_type` that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'id': 'PATO:0000070', 'category': ['named_thing']}, {'predicate': 'OBO:RO_0002434', 'subject': 'PATO:0000070', 'provided_by': ['renci.bdc.semanticsearch.annotator'], 'id': '9af7d330f6935a5ef6a0068ff928ba0b', 'category': ['association'], 'edge_label': 'association', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type': 'OBAN:association', 'object': 'TOPMED.TAG:1'}, {'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}]]}}}}}, 'tags': ['new_changes']}}, '/graph/schema': {'get': {'deprecated': True, 'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_graph_schemanew_changes', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': ['new_changes']}}, '/predicates': {'get': {'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_predicatesnew_changes', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': ['new_changes']}}, '/cypher': {'post': {'summary': 'Run cypher query.', 'description': 'Runs cypher query against the Neo4j instance, and returns an equivalent response exepected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).', 'requestBody': {'description': 'Cypher query.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query': 'MATCH (c) return c limit 1'}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'results': [{'columns': ['c'], 'data': [{'row': [{'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}], 'meta': [{'id': 0, 'type': 'node', 'deleted': False}]}]}], 'errors': []}}}}}}, 'tags': ['new_changes']}}, '/reasonerapi': {'get': {'description': 'Returns a list of question templates that can be used to query this plater instance/', 'operationId': 'get_question_templatesnew_changes', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}]}}}}}, 'tags': ['new_changes']}, 'post': {'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_questionnew_changes', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}, 'tags': ['new_changes']}}, '/simple_spec': {'get': {'description': 'Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.', 'operationId': 'get_simple_specnew_changes', 'parameters': [{'name': 'source', 'in': 'query', 'description': 'The curie of source that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'CHEBI:33216'}}, {'name': 'target', 'in': 'query', 'description': 'The curie of target that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'NCBIGene:1'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'source_type': 'chemical_substance', 'target_type': 'chemical_substance', 'edge_type': 'similar_to'}]}}}}}, 'tags': ['new_changes']}}, '/graph/summary': {'get': {'description': 'Returns summary of the graph', 'operationId': 'get_graph_summarynew_changes', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance:molecular_entity:named_thing': {'gene:biological_entity:named_thing': {'directly_interacts_with': 20}}}}}}}}, 'tags': ['new_changes']}}, '/overlay': {'post': {'description': 'Given a reasonerAPI graph add support edges for any nodes linked in result bindings.', 'operationId': 'post_reasoner_api_graph_overlaynew_changes', 'requestBody': {'description': 'Reasoner api graph.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}, {'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'support_edge_id', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}, {'kg_id': 'support_edge_id', 'q_id': 's_0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}}}, 'tags': ['new_changes']}}}}
[automat.core.handle_request] - 2020-09-18 14:34:27,212 core.py 124 DEBUG: ['favicon.ico']
[automat.core.handle_request] - 2020-09-18 14:34:45,916 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:35:16,432 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:35:46,949 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:36:17,464 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:36:47,970 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:37:18,487 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:37:48,994 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:38:19,514 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:39:03,277 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:39:29,001 core.py 124 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-09-18 14:39:29,002 core.py 39 DEBUG: paths for open_api specs of each server
[automat.util.async_client.async_get_json] - 2020-09-18 14:39:31,256 async_client.py 25 ERROR: Failed to get response from http://localhost:8091/openapi.json. Status code 500
[automat.core.get_swagger_paths] - 2020-09-18 14:39:31,256 core.py 204 ERROR: Failed to get response from http://localhost:8091/openapi.json. Status code 500
[automat.core.handle_request] - 2020-09-18 14:39:31,324 core.py 124 DEBUG: ['favicon.ico']
[automat.core.handle_request] - 2020-09-18 14:39:33,784 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:40:04,302 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:40:34,870 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:41:05,389 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:41:35,914 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:42:06,459 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:42:37,001 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:43:07,517 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:43:38,022 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:44:08,530 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:44:39,037 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:45:09,551 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:45:40,057 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:46:10,564 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:46:41,156 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:47:11,665 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:47:39,921 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:48:10,426 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:48:40,933 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:49:11,452 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:49:41,957 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:50:12,464 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:50:42,970 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:51:13,486 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:51:44,001 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:52:14,507 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:52:45,022 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:53:15,547 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:53:46,062 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:54:24,966 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:54:55,480 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:55:25,988 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:55:56,723 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:56:27,230 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:56:57,736 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:57:28,284 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:57:58,799 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:58:29,436 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:59:00,163 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:59:36,159 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 14:59:48,938 core.py 124 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-09-18 14:59:48,939 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.get_swagger_paths] - 2020-09-18 14:59:51,130 core.py 206 DEBUG: {'openapi': '3.0.2', 'info': {'title': 'PLATER - new_changes', 'vesion': '2.0'}, 'paths': {'/about': {'get': {'description': 'Returns a json describing dataset.', 'summary': 'Json about dataset.', 'operationId': 'about_dataset', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'dataset-version': 'N/A', 'dataset-description': 'Add dataset version here', 'code-used': 'link to repo', 'date-generated': 'N/A'}}}}}}, 'tags': ['new_changes']}}, '/{node_type}/{curie}': {'get': {'description': 'Returns `node` matching `curie`.', 'summary': 'Find `node` by `curie`.', 'operationId': 'get_source_node_by_curienew_changes', 'parameters': [{'name': 'node_type', 'in': 'path', 'description': 'Type of the to look for.', 'required': True, 'schema': {'type': 'string', 'enum': ['genomic_entity', 'disease', 'disease_or_phenotypic_feature', 'organismal_entity', 'chemical_substance', 'biological_entity', 'gene', 'anatomical_entity', 'named_thing', 'clinical_modifier', 'gene_or_gene_product', 'molecular_entity', 'information_content_entity', 'clinical_trial', 'phenotypic_feature', 'biological_process_or_activity', 'biolink:NamedThing', 'cell', 'cellular_component', 'biological_process', 'molecular_activity', 'macromolecular_machine']}}, {'name': 'curie', 'in': 'path', 'description': 'The curie of `source_node` that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'id': 'PATO:0000070', 'category': ['named_thing']}]}}}}}, 'tags': ['new_changes']}}, '/{source_node_type}/{target_node_type}/{curie}': {'get': {'description': 'Returns one hop paths from `source_node_type`  with `curie` to `target node type`.', 'summary': 'Get one hop results from source type to target type. Note: Please refer to `graph/schema` endpoint output to determine what target goes with a source', 'operationId': 'get_one_hop_source_node_type_to_target_node_typenew_changes', 'parameters': [{'name': 'source_node_type', 'in': 'path', 'description': 'The node type of source node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['genomic_entity', 'disease', 'disease_or_phenotypic_feature', 'organismal_entity', 'chemical_substance', 'biological_entity', 'gene', 'anatomical_entity', 'named_thing', 'clinical_modifier', 'gene_or_gene_product', 'molecular_entity', 'information_content_entity', 'clinical_trial', 'phenotypic_feature', 'biological_process_or_activity', 'biolink:NamedThing', 'cell', 'cellular_component', 'biological_process', 'molecular_activity', 'macromolecular_machine']}}, {'name': 'target_node_type', 'in': 'path', 'description': 'The node type of target node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['genomic_entity', 'disease', 'disease_or_phenotypic_feature', 'organismal_entity', 'chemical_substance', 'biological_entity', 'gene', 'anatomical_entity', 'named_thing', 'clinical_modifier', 'gene_or_gene_product', 'molecular_entity', 'information_content_entity', 'clinical_trial', 'phenotypic_feature', 'biological_process_or_activity', 'biolink:NamedThing', 'cell', 'cellular_component', 'biological_process', 'molecular_activity', 'macromolecular_machine']}}, {'name': 'curie', 'in': 'path', 'description': 'The `curie` for the `source_node_type` that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'id': 'PATO:0000070', 'category': ['named_thing']}, {'predicate': 'OBO:RO_0002434', 'subject': 'PATO:0000070', 'provided_by': ['renci.bdc.semanticsearch.annotator'], 'id': '9af7d330f6935a5ef6a0068ff928ba0b', 'category': ['association'], 'edge_label': 'association', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type': 'OBAN:association', 'object': 'TOPMED.TAG:1'}, {'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}]]}}}}}, 'tags': ['new_changes']}}, '/graph/schema': {'get': {'deprecated': True, 'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_graph_schemanew_changes', 'summary': 'We recommend using `predicates` endpoint, as support for this will be discontinued.', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': ['new_changes']}}, '/predicates': {'get': {'tags': ['translator', 'new_changes'], 'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_predicatesnew_changes', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}}}, '/cypher': {'post': {'summary': 'Run cypher query.', 'description': 'Runs cypher query against the Neo4j instance, and returns an equivalent response exepected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).', 'requestBody': {'description': 'Cypher query.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query': 'MATCH (c) return c limit 1'}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'results': [{'columns': ['c'], 'data': [{'row': [{'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}], 'meta': [{'id': 0, 'type': 'node', 'deleted': False}]}]}], 'errors': []}}}}}}, 'tags': ['new_changes']}}, '/reasonerapi': {'get': {'deprecated': True, 'description': 'Returns a list of question templates that can be used to query this plater instance/', 'operationId': 'get_question_templatesnew_changes', 'summary': 'Get list of one hop TrAPI questions possible to ask.(Please use `query` endpoint as support might discontinue).', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}]}}}}}, 'tags': ['new_changes']}, 'post': {'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_questionnew_changes', 'summary': 'post a TrAPI query graph. (Please use `query` endpoint as support might discontinue).', 'deprecated': True, 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}, 'tags': ['new_changes']}}, '/query': {'post': {'tags': ['translator', 'new_changes'], 'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_question_querynew_changes', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}}}, '/simple_spec': {'get': {'description': 'Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.', 'operationId': 'get_simple_specnew_changes', 'summary': 'query about predicates available by sending in a curie.', 'parameters': [{'name': 'source', 'in': 'query', 'description': 'The curie of source that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'CHEBI:33216'}}, {'name': 'target', 'in': 'query', 'description': 'The curie of target that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'NCBIGene:1'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'source_type': 'chemical_substance', 'target_type': 'chemical_substance', 'edge_type': 'similar_to'}]}}}}}, 'tags': ['new_changes']}}, '/graph/summary': {'get': {'description': 'Returns summary of the graph', 'operationId': 'get_graph_summarynew_changes', 'summary': 'schema summary of the the graph', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance:molecular_entity:named_thing': {'gene:biological_entity:named_thing': {'directly_interacts_with': 20}}}}}}}}, 'tags': ['new_changes']}}, '/overlay': {'post': {'description': 'Given a reasonerAPI graph add support edges for any nodes linked in result bindings.', 'operationId': 'post_reasoner_api_graph_overlaynew_changes', 'summary': 'Overlay results with available connections between each node.', 'requestBody': {'description': 'Reasoner api graph.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}, {'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'support_edge_id', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}, {'kg_id': 'support_edge_id', 'q_id': 's_0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}}}, 'tags': ['new_changes']}}}}
[automat.core.handle_request] - 2020-09-18 14:59:51,193 core.py 124 DEBUG: ['favicon.ico']
[automat.core.handle_request] - 2020-09-18 15:00:06,676 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:00:37,183 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:01:00,023 core.py 124 DEBUG: []
[automat.core.handle_request] - 2020-09-18 15:01:00,751 core.py 124 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-09-18 15:01:00,751 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-09-18 15:01:00,849 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:01:00,856 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.get_swagger_paths] - 2020-09-18 15:01:02,943 core.py 206 DEBUG: {'openapi': '3.0.2', 'info': {'title': 'PLATER - new_changes', 'vesion': '2.0'}, 'paths': {'/about': {'get': {'description': 'Returns a json describing dataset.', 'summary': 'Json about dataset.', 'operationId': 'about_dataset', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'dataset-version': 'N/A', 'dataset-description': 'Add dataset version here', 'code-used': 'link to repo', 'date-generated': 'N/A'}}}}}}, 'tags': ['new_changes']}}, '/{node_type}/{curie}': {'get': {'description': 'Returns `node` matching `curie`.', 'summary': 'Find `node` by `curie`.', 'operationId': 'get_source_node_by_curienew_changes', 'parameters': [{'name': 'node_type', 'in': 'path', 'description': 'Type of the to look for.', 'required': True, 'schema': {'type': 'string', 'enum': ['genomic_entity', 'disease', 'disease_or_phenotypic_feature', 'organismal_entity', 'chemical_substance', 'biological_entity', 'gene', 'anatomical_entity', 'named_thing', 'clinical_modifier', 'gene_or_gene_product', 'molecular_entity', 'information_content_entity', 'clinical_trial', 'phenotypic_feature', 'biological_process_or_activity', 'biolink:NamedThing', 'cell', 'cellular_component', 'biological_process', 'molecular_activity', 'macromolecular_machine']}}, {'name': 'curie', 'in': 'path', 'description': 'The curie of `source_node` that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'id': 'PATO:0000070', 'category': ['named_thing']}]}}}}}, 'tags': ['new_changes']}}, '/{source_node_type}/{target_node_type}/{curie}': {'get': {'description': 'Returns one hop paths from `source_node_type`  with `curie` to `target node type`.', 'summary': 'Get one hop results from source type to target type. Note: Please refer to `graph/schema` endpoint output to determine what target goes with a source', 'operationId': 'get_one_hop_source_node_type_to_target_node_typenew_changes', 'parameters': [{'name': 'source_node_type', 'in': 'path', 'description': 'The node type of source node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['genomic_entity', 'disease', 'disease_or_phenotypic_feature', 'organismal_entity', 'chemical_substance', 'biological_entity', 'gene', 'anatomical_entity', 'named_thing', 'clinical_modifier', 'gene_or_gene_product', 'molecular_entity', 'information_content_entity', 'clinical_trial', 'phenotypic_feature', 'biological_process_or_activity', 'biolink:NamedThing', 'cell', 'cellular_component', 'biological_process', 'molecular_activity', 'macromolecular_machine']}}, {'name': 'target_node_type', 'in': 'path', 'description': 'The node type of target node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['genomic_entity', 'disease', 'disease_or_phenotypic_feature', 'organismal_entity', 'chemical_substance', 'biological_entity', 'gene', 'anatomical_entity', 'named_thing', 'clinical_modifier', 'gene_or_gene_product', 'molecular_entity', 'information_content_entity', 'clinical_trial', 'phenotypic_feature', 'biological_process_or_activity', 'biolink:NamedThing', 'cell', 'cellular_component', 'biological_process', 'molecular_activity', 'macromolecular_machine']}}, {'name': 'curie', 'in': 'path', 'description': 'The `curie` for the `source_node_type` that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'id': 'PATO:0000070', 'category': ['named_thing']}, {'predicate': 'OBO:RO_0002434', 'subject': 'PATO:0000070', 'provided_by': ['renci.bdc.semanticsearch.annotator'], 'id': '9af7d330f6935a5ef6a0068ff928ba0b', 'category': ['association'], 'edge_label': 'association', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type': 'OBAN:association', 'object': 'TOPMED.TAG:1'}, {'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}]]}}}}}, 'tags': ['new_changes']}}, '/graph/schema': {'get': {'deprecated': True, 'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_graph_schemanew_changes', 'summary': 'We recommend using `predicates` endpoint, as support for this will be discontinued.', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': ['new_changes']}}, '/predicates': {'get': {'tags': ['translator', 'new_changes'], 'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_predicatesnew_changes', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}}}, '/cypher': {'post': {'summary': 'Run cypher query.', 'description': 'Runs cypher query against the Neo4j instance, and returns an equivalent response exepected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).', 'requestBody': {'description': 'Cypher query.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query': 'MATCH (c) return c limit 1'}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'results': [{'columns': ['c'], 'data': [{'row': [{'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}], 'meta': [{'id': 0, 'type': 'node', 'deleted': False}]}]}], 'errors': []}}}}}}, 'tags': ['new_changes']}}, '/reasonerapi': {'get': {'deprecated': True, 'description': 'Returns a list of question templates that can be used to query this plater instance/', 'operationId': 'get_question_templatesnew_changes', 'summary': 'Get list of one hop TrAPI questions possible to ask.(Please use `query` endpoint as support might discontinue).', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}]}}}}}, 'tags': ['new_changes']}, 'post': {'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_questionnew_changes', 'summary': 'post a TrAPI query graph. (Please use `query` endpoint as support might discontinue).', 'deprecated': True, 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}, 'tags': ['new_changes']}}, '/query': {'post': {'tags': ['translator', 'new_changes'], 'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_question_querynew_changes', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}}}, '/simple_spec': {'get': {'description': 'Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.', 'operationId': 'get_simple_specnew_changes', 'summary': 'query about predicates available by sending in a curie.', 'parameters': [{'name': 'source', 'in': 'query', 'description': 'The curie of source that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'CHEBI:33216'}}, {'name': 'target', 'in': 'query', 'description': 'The curie of target that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'NCBIGene:1'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'source_type': 'chemical_substance', 'target_type': 'chemical_substance', 'edge_type': 'similar_to'}]}}}}}, 'tags': ['new_changes']}}, '/graph/summary': {'get': {'description': 'Returns summary of the graph', 'operationId': 'get_graph_summarynew_changes', 'summary': 'schema summary of the the graph', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance:molecular_entity:named_thing': {'gene:biological_entity:named_thing': {'directly_interacts_with': 20}}}}}}}}, 'tags': ['new_changes']}}, '/overlay': {'post': {'description': 'Given a reasonerAPI graph add support edges for any nodes linked in result bindings.', 'operationId': 'post_reasoner_api_graph_overlaynew_changes', 'summary': 'Overlay results with available connections between each node.', 'requestBody': {'description': 'Reasoner api graph.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}, {'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'support_edge_id', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}, {'kg_id': 'support_edge_id', 'q_id': 's_0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}}}, 'tags': ['new_changes']}}}}
[automat.core.handle_request] - 2020-09-18 15:01:04,483 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:01:04,495 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:01:06,382 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:01:06,470 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:01:07,690 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:01:09,250 core.py 124 DEBUG: ['new_changes', 'reasonerapi']
[automat.core.handle_request] - 2020-09-18 15:01:09,250 core.py 151 DEBUG: [0] found entry for backend server new_changes --- localhost:8091
[automat.core.handle_route_to_backend] - 2020-09-18 15:01:09,251 core.py 98 DEBUG: [0] proxing request to http://localhost:8091/reasonerapi?
[automat.core.handle_request] - 2020-09-18 15:01:19,557 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:01:19,565 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:01:20,026 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:01:20,034 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:01:20,703 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:01:20,712 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:01:38,206 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:01:56,122 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:01:56,152 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:01:56,977 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:01:56,987 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:01:57,717 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:01:57,724 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:01:59,043 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:01:59,050 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:02:06,001 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:02:06,008 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:02:08,715 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:02:09,986 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:02:09,993 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:02:13,065 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:02:13,072 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:02:14,026 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:02:14,033 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:02:16,971 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:02:16,978 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:02:39,230 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:03:09,737 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:03:40,246 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:04:10,762 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:04:41,279 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:05:11,784 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:05:42,299 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:06:06,848 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:06:37,368 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:07:07,873 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:07:38,413 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:08:08,920 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:08:11,774 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:08:25,031 core.py 124 DEBUG: []
[automat.core.handle_request] - 2020-09-18 15:08:25,347 core.py 124 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-09-18 15:08:25,347 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-09-18 15:08:25,362 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:08:25,388 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.get_swagger_paths] - 2020-09-18 15:08:27,630 core.py 206 DEBUG: {'openapi': '3.0.2', 'info': {'title': 'PLATER - new_changes_3232', 'vesion': '2.0'}, 'paths': {'/about': {'get': {'description': 'Returns a json describing dataset.', 'summary': 'Json about dataset.', 'operationId': 'about_dataset', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'dataset-version': 'N/A', 'dataset-description': 'Add dataset version here', 'code-used': 'link to repo', 'date-generated': 'N/A'}}}}}}, 'tags': ['new_changes_3232']}}, '/{node_type}/{curie}': {'get': {'description': 'Returns `node` matching `curie`.', 'summary': 'Find `node` by `curie`.', 'operationId': 'get_source_node_by_curienew_changes_3232', 'parameters': [{'name': 'node_type', 'in': 'path', 'description': 'Type of the to look for.', 'required': True, 'schema': {'type': 'string', 'enum': ['organismal_entity', 'macromolecular_machine', 'biological_process', 'cellular_component', 'biological_entity', 'gene_or_gene_product', 'phenotypic_feature', 'clinical_modifier', 'disease_or_phenotypic_feature', 'named_thing', 'molecular_entity', 'disease', 'genomic_entity', 'biolink:NamedThing', 'biological_process_or_activity', 'clinical_trial', 'chemical_substance', 'anatomical_entity', 'molecular_activity', 'gene', 'cell', 'information_content_entity']}}, {'name': 'curie', 'in': 'path', 'description': 'The curie of `source_node` that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'id': 'PATO:0000070', 'category': ['named_thing']}]}}}}}, 'tags': ['new_changes_3232']}}, '/{source_node_type}/{target_node_type}/{curie}': {'get': {'description': 'Returns one hop paths from `source_node_type`  with `curie` to `target node type`.', 'summary': 'Get one hop results from source type to target type. Note: Please refer to `graph/schema` endpoint output to determine what target goes with a source', 'operationId': 'get_one_hop_source_node_type_to_target_node_typenew_changes_3232', 'parameters': [{'name': 'source_node_type', 'in': 'path', 'description': 'The node type of source node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['organismal_entity', 'macromolecular_machine', 'biological_process', 'cellular_component', 'biological_entity', 'gene_or_gene_product', 'phenotypic_feature', 'clinical_modifier', 'disease_or_phenotypic_feature', 'named_thing', 'molecular_entity', 'disease', 'genomic_entity', 'biolink:NamedThing', 'biological_process_or_activity', 'clinical_trial', 'chemical_substance', 'anatomical_entity', 'molecular_activity', 'gene', 'cell', 'information_content_entity']}}, {'name': 'target_node_type', 'in': 'path', 'description': 'The node type of target node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['organismal_entity', 'macromolecular_machine', 'biological_process', 'cellular_component', 'biological_entity', 'gene_or_gene_product', 'phenotypic_feature', 'clinical_modifier', 'disease_or_phenotypic_feature', 'named_thing', 'molecular_entity', 'disease', 'genomic_entity', 'biolink:NamedThing', 'biological_process_or_activity', 'clinical_trial', 'chemical_substance', 'anatomical_entity', 'molecular_activity', 'gene', 'cell', 'information_content_entity']}}, {'name': 'curie', 'in': 'path', 'description': 'The `curie` for the `source_node_type` that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'id': 'PATO:0000070', 'category': ['named_thing']}, {'predicate': 'OBO:RO_0002434', 'subject': 'PATO:0000070', 'provided_by': ['renci.bdc.semanticsearch.annotator'], 'id': '9af7d330f6935a5ef6a0068ff928ba0b', 'category': ['association'], 'edge_label': 'association', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type': 'OBAN:association', 'object': 'TOPMED.TAG:1'}, {'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}]]}}}}}, 'tags': ['new_changes_3232']}}, '/graph/schema': {'get': {'deprecated': True, 'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_graph_schemanew_changes_3232', 'summary': 'We recommend using `predicates` endpoint, as support for this will be discontinued.', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': ['new_changes_3232']}}, '/predicates': {'get': {'tags': ['translator', 'new_changes_3232'], 'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_predicatesnew_changes_3232', 'summary': 'Get the list of available predicates.', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}}}, '/cypher': {'post': {'summary': 'Run cypher query.', 'description': 'Runs cypher query against the Neo4j instance, and returns an equivalent response expected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).', 'requestBody': {'description': 'Cypher query.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query': 'MATCH (c) return c limit 1'}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'results': [{'columns': ['c'], 'data': [{'row': [{'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}], 'meta': [{'id': 0, 'type': 'node', 'deleted': False}]}]}], 'errors': []}}}}}}, 'tags': ['new_changes_3232']}}, '/reasonerapi': {'get': {'deprecated': True, 'description': 'Returns a list of question templates that can be used to query this plater instance/', 'operationId': 'get_question_templatesnew_changes_3232', 'summary': 'Get list of one hop TrAPI questions possible to ask.(Please use `query` endpoint as support might discontinue).', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}]}}}}}, 'tags': ['new_changes_3232']}, 'post': {'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_questionnew_changes_3232', 'summary': 'post a TrAPI query graph. (Please use `query` endpoint as support might discontinue).', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}, 'tags': ['new_changes_3232']}}, '/query': {'post': {'tags': ['translator', 'new_changes_3232'], 'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_question_querynew_changes_3232', 'summary': 'Post a TrAPI query graph and get back answers.', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}}}, '/simple_spec': {'get': {'description': 'Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.', 'operationId': 'get_simple_specnew_changes_3232', 'summary': 'query about predicates available by sending in a curie.', 'parameters': [{'name': 'source', 'in': 'query', 'description': 'The curie of source that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'CHEBI:33216'}}, {'name': 'target', 'in': 'query', 'description': 'The curie of target that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'NCBIGene:1'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'source_type': 'chemical_substance', 'target_type': 'chemical_substance', 'edge_type': 'similar_to'}]}}}}}, 'tags': ['new_changes_3232']}}, '/graph/summary': {'get': {'description': 'Returns summary of the graph', 'operationId': 'get_graph_summarynew_changes_3232', 'summary': 'schema summary of the the graph', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance:molecular_entity:named_thing': {'gene:biological_entity:named_thing': {'directly_interacts_with': 20}}}}}}}}, 'tags': ['new_changes_3232']}}, '/overlay': {'post': {'description': 'Given a reasonerAPI graph add support edges for any nodes linked in result bindings.', 'operationId': 'post_reasoner_api_graph_overlaynew_changes_3232', 'summary': 'Overlay results with available connections between each node.', 'requestBody': {'description': 'Reasoner api graph.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}, {'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'support_edge_id', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}, {'kg_id': 'support_edge_id', 'q_id': 's_0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}}}, 'tags': ['new_changes_3232']}}}}
[automat.core.get_swagger_paths] - 2020-09-18 15:08:27,644 core.py 206 DEBUG: {'openapi': '3.0.2', 'info': {'title': 'PLATER - new_changes', 'vesion': '2.0'}, 'paths': {'/about': {'get': {'description': 'Returns a json describing dataset.', 'summary': 'Json about dataset.', 'operationId': 'about_dataset', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'dataset-version': 'N/A', 'dataset-description': 'Add dataset version here', 'code-used': 'link to repo', 'date-generated': 'N/A'}}}}}}, 'tags': ['new_changes']}}, '/{node_type}/{curie}': {'get': {'description': 'Returns `node` matching `curie`.', 'summary': 'Find `node` by `curie`.', 'operationId': 'get_source_node_by_curienew_changes', 'parameters': [{'name': 'node_type', 'in': 'path', 'description': 'Type of the to look for.', 'required': True, 'schema': {'type': 'string', 'enum': ['gene_or_gene_product', 'biological_process', 'cell', 'clinical_trial', 'gene', 'biological_entity', 'biological_process_or_activity', 'clinical_modifier', 'molecular_entity', 'organismal_entity', 'cellular_component', 'biolink:NamedThing', 'molecular_activity', 'information_content_entity', 'named_thing', 'disease', 'genomic_entity', 'macromolecular_machine', 'phenotypic_feature', 'chemical_substance', 'disease_or_phenotypic_feature', 'anatomical_entity']}}, {'name': 'curie', 'in': 'path', 'description': 'The curie of `source_node` that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'id': 'PATO:0000070', 'category': ['named_thing']}]}}}}}, 'tags': ['new_changes']}}, '/{source_node_type}/{target_node_type}/{curie}': {'get': {'description': 'Returns one hop paths from `source_node_type`  with `curie` to `target node type`.', 'summary': 'Get one hop results from source type to target type. Note: Please refer to `graph/schema` endpoint output to determine what target goes with a source', 'operationId': 'get_one_hop_source_node_type_to_target_node_typenew_changes', 'parameters': [{'name': 'source_node_type', 'in': 'path', 'description': 'The node type of source node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['gene_or_gene_product', 'biological_process', 'cell', 'clinical_trial', 'gene', 'biological_entity', 'biological_process_or_activity', 'clinical_modifier', 'molecular_entity', 'organismal_entity', 'cellular_component', 'biolink:NamedThing', 'molecular_activity', 'information_content_entity', 'named_thing', 'disease', 'genomic_entity', 'macromolecular_machine', 'phenotypic_feature', 'chemical_substance', 'disease_or_phenotypic_feature', 'anatomical_entity']}}, {'name': 'target_node_type', 'in': 'path', 'description': 'The node type of target node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['gene_or_gene_product', 'biological_process', 'cell', 'clinical_trial', 'gene', 'biological_entity', 'biological_process_or_activity', 'clinical_modifier', 'molecular_entity', 'organismal_entity', 'cellular_component', 'biolink:NamedThing', 'molecular_activity', 'information_content_entity', 'named_thing', 'disease', 'genomic_entity', 'macromolecular_machine', 'phenotypic_feature', 'chemical_substance', 'disease_or_phenotypic_feature', 'anatomical_entity']}}, {'name': 'curie', 'in': 'path', 'description': 'The `curie` for the `source_node_type` that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'id': 'PATO:0000070', 'category': ['named_thing']}, {'predicate': 'OBO:RO_0002434', 'subject': 'PATO:0000070', 'provided_by': ['renci.bdc.semanticsearch.annotator'], 'id': '9af7d330f6935a5ef6a0068ff928ba0b', 'category': ['association'], 'edge_label': 'association', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type': 'OBAN:association', 'object': 'TOPMED.TAG:1'}, {'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}]]}}}}}, 'tags': ['new_changes']}}, '/graph/schema': {'get': {'deprecated': True, 'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_graph_schemanew_changes', 'summary': 'We recommend using `predicates` endpoint, as support for this will be discontinued.', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': ['new_changes']}}, '/predicates': {'get': {'tags': ['translator', 'new_changes'], 'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_predicatesnew_changes', 'summary': 'Get the list of available predicates.', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}}}, '/cypher': {'post': {'summary': 'Run cypher query.', 'description': 'Runs cypher query against the Neo4j instance, and returns an equivalent response expected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).', 'requestBody': {'description': 'Cypher query.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query': 'MATCH (c) return c limit 1'}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'results': [{'columns': ['c'], 'data': [{'row': [{'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}], 'meta': [{'id': 0, 'type': 'node', 'deleted': False}]}]}], 'errors': []}}}}}}, 'tags': ['new_changes']}}, '/reasonerapi': {'get': {'deprecated': True, 'description': 'Returns a list of question templates that can be used to query this plater instance/', 'operationId': 'get_question_templatesnew_changes', 'summary': 'Get list of one hop TrAPI questions possible to ask.(Please use `query` endpoint as support might discontinue).', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}]}}}}}, 'tags': ['new_changes']}, 'post': {'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_questionnew_changes', 'summary': 'post a TrAPI query graph. (Please use `query` endpoint as support might discontinue).', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}, 'tags': ['new_changes']}}, '/query': {'post': {'tags': ['translator', 'new_changes'], 'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_question_querynew_changes', 'summary': 'Post a TrAPI query graph and get back answers.', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}}}, '/simple_spec': {'get': {'description': 'Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.', 'operationId': 'get_simple_specnew_changes', 'summary': 'query about predicates available by sending in a curie.', 'parameters': [{'name': 'source', 'in': 'query', 'description': 'The curie of source that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'CHEBI:33216'}}, {'name': 'target', 'in': 'query', 'description': 'The curie of target that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'NCBIGene:1'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'source_type': 'chemical_substance', 'target_type': 'chemical_substance', 'edge_type': 'similar_to'}]}}}}}, 'tags': ['new_changes']}}, '/graph/summary': {'get': {'description': 'Returns summary of the graph', 'operationId': 'get_graph_summarynew_changes', 'summary': 'schema summary of the the graph', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance:molecular_entity:named_thing': {'gene:biological_entity:named_thing': {'directly_interacts_with': 20}}}}}}}}, 'tags': ['new_changes']}}, '/overlay': {'post': {'description': 'Given a reasonerAPI graph add support edges for any nodes linked in result bindings.', 'operationId': 'post_reasoner_api_graph_overlaynew_changes', 'summary': 'Overlay results with available connections between each node.', 'requestBody': {'description': 'Reasoner api graph.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}, {'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'support_edge_id', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}, {'kg_id': 'support_edge_id', 'q_id': 's_0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}}}, 'tags': ['new_changes']}}}}
[automat.core.handle_request] - 2020-09-18 15:08:32,099 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:08:32,110 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:08:33,731 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:08:33,740 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:08:33,748 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:08:34,520 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:08:34,527 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:08:34,539 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:08:35,213 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:08:35,225 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:08:35,255 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:08:39,001 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:08:39,005 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:08:39,014 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:08:39,427 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:08:40,251 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:08:40,257 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:08:40,267 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:08:41,057 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:08:41,065 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:08:41,072 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:08:42,031 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:08:42,039 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:08:42,281 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:08:42,840 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:08:42,849 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:08:42,868 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:08:43,549 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:08:43,562 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:08:45,592 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:08:45,596 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:08:45,607 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:08:46,696 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:08:46,701 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:08:46,714 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:08:48,259 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:08:48,264 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:08:48,276 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:08:49,291 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:08:49,307 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:08:49,898 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:08:49,904 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:08:49,914 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:08:50,675 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:08:50,685 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:08:54,710 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:08:54,716 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:08:54,726 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:08:55,903 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:08:55,908 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:08:55,926 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:08:57,007 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:08:57,013 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:08:57,025 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:09:09,946 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:09:12,797 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:09:20,121 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:09:20,127 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:09:20,136 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:09:21,743 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:09:21,751 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:09:21,844 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:09:24,583 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:09:24,593 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:09:24,600 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:09:25,377 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:09:25,381 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:09:25,393 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:09:26,559 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:09:26,566 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:09:27,570 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:09:27,712 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:09:36,768 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:09:36,772 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:09:36,780 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:09:38,079 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:09:38,085 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:09:38,307 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:09:40,463 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:09:43,315 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:10:10,968 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:10:13,830 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:10:38,419 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:10:38,428 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:10:41,474 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:10:42,237 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:10:42,258 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:10:43,946 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:10:43,953 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:10:43,966 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:10:44,347 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:10:45,403 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:10:45,410 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:10:46,219 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:10:46,227 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:10:47,529 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:10:47,533 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:10:47,546 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:11:11,990 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:11:14,868 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:11:42,506 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:11:45,375 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:11:59,229 core.py 124 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-09-18 15:11:59,229 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.get_swagger_paths] - 2020-09-18 15:12:01,496 core.py 206 DEBUG: {'openapi': '3.0.2', 'info': {'title': 'PLATER - new_changes', 'vesion': '2.0'}, 'paths': {'/about': {'get': {'description': 'Returns a json describing dataset.', 'summary': 'Json about dataset.', 'operationId': 'about_dataset', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'dataset-version': 'N/A', 'dataset-description': 'Add dataset version here', 'code-used': 'link to repo', 'date-generated': 'N/A'}}}}}}, 'tags': ['new_changes']}}, '/{node_type}/{curie}': {'get': {'description': 'Returns `node` matching `curie`.', 'summary': 'Find `node` by `curie`.', 'operationId': 'get_source_node_by_curienew_changes', 'parameters': [{'name': 'node_type', 'in': 'path', 'description': 'Type of the to look for.', 'required': True, 'schema': {'type': 'string', 'enum': ['gene_or_gene_product', 'biological_process', 'cell', 'clinical_trial', 'gene', 'biological_entity', 'biological_process_or_activity', 'clinical_modifier', 'molecular_entity', 'organismal_entity', 'cellular_component', 'biolink:NamedThing', 'molecular_activity', 'information_content_entity', 'named_thing', 'disease', 'genomic_entity', 'macromolecular_machine', 'phenotypic_feature', 'chemical_substance', 'disease_or_phenotypic_feature', 'anatomical_entity']}}, {'name': 'curie', 'in': 'path', 'description': 'The curie of `source_node` that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'id': 'PATO:0000070', 'category': ['named_thing']}]}}}}}, 'tags': ['new_changes']}}, '/{source_node_type}/{target_node_type}/{curie}': {'get': {'description': 'Returns one hop paths from `source_node_type`  with `curie` to `target node type`.', 'summary': 'Get one hop results from source type to target type. Note: Please refer to `graph/schema` endpoint output to determine what target goes with a source', 'operationId': 'get_one_hop_source_node_type_to_target_node_typenew_changes', 'parameters': [{'name': 'source_node_type', 'in': 'path', 'description': 'The node type of source node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['gene_or_gene_product', 'biological_process', 'cell', 'clinical_trial', 'gene', 'biological_entity', 'biological_process_or_activity', 'clinical_modifier', 'molecular_entity', 'organismal_entity', 'cellular_component', 'biolink:NamedThing', 'molecular_activity', 'information_content_entity', 'named_thing', 'disease', 'genomic_entity', 'macromolecular_machine', 'phenotypic_feature', 'chemical_substance', 'disease_or_phenotypic_feature', 'anatomical_entity']}}, {'name': 'target_node_type', 'in': 'path', 'description': 'The node type of target node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['gene_or_gene_product', 'biological_process', 'cell', 'clinical_trial', 'gene', 'biological_entity', 'biological_process_or_activity', 'clinical_modifier', 'molecular_entity', 'organismal_entity', 'cellular_component', 'biolink:NamedThing', 'molecular_activity', 'information_content_entity', 'named_thing', 'disease', 'genomic_entity', 'macromolecular_machine', 'phenotypic_feature', 'chemical_substance', 'disease_or_phenotypic_feature', 'anatomical_entity']}}, {'name': 'curie', 'in': 'path', 'description': 'The `curie` for the `source_node_type` that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'id': 'PATO:0000070', 'category': ['named_thing']}, {'predicate': 'OBO:RO_0002434', 'subject': 'PATO:0000070', 'provided_by': ['renci.bdc.semanticsearch.annotator'], 'id': '9af7d330f6935a5ef6a0068ff928ba0b', 'category': ['association'], 'edge_label': 'association', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type': 'OBAN:association', 'object': 'TOPMED.TAG:1'}, {'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}]]}}}}}, 'tags': ['new_changes']}}, '/graph/schema': {'get': {'deprecated': True, 'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_graph_schemanew_changes', 'summary': 'We recommend using `predicates` endpoint, as support for this will be discontinued.', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': ['new_changes']}}, '/predicates': {'get': {'tags': ['translator', 'new_changes'], 'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_predicatesnew_changes', 'summary': 'Get the list of available predicates.', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}}}, '/cypher': {'post': {'summary': 'Run cypher query.', 'description': 'Runs cypher query against the Neo4j instance, and returns an equivalent response expected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).', 'requestBody': {'description': 'Cypher query.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query': 'MATCH (c) return c limit 1'}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'results': [{'columns': ['c'], 'data': [{'row': [{'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}], 'meta': [{'id': 0, 'type': 'node', 'deleted': False}]}]}], 'errors': []}}}}}}, 'tags': ['new_changes']}}, '/reasonerapi': {'get': {'deprecated': True, 'description': 'Returns a list of question templates that can be used to query this plater instance/', 'operationId': 'get_question_templatesnew_changes', 'summary': 'Get list of one hop TrAPI questions possible to ask.(Please use `query` endpoint as support might discontinue).', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}]}}}}}, 'tags': ['new_changes']}, 'post': {'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_questionnew_changes', 'summary': 'post a TrAPI query graph. (Please use `query` endpoint as support might discontinue).', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}, 'tags': ['new_changes']}}, '/query': {'post': {'tags': ['translator', 'new_changes'], 'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_question_querynew_changes', 'summary': 'Post a TrAPI query graph and get back answers.', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}}}, '/simple_spec': {'get': {'description': 'Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.', 'operationId': 'get_simple_specnew_changes', 'summary': 'query about predicates available by sending in a curie.', 'parameters': [{'name': 'source', 'in': 'query', 'description': 'The curie of source that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'CHEBI:33216'}}, {'name': 'target', 'in': 'query', 'description': 'The curie of target that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'NCBIGene:1'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'source_type': 'chemical_substance', 'target_type': 'chemical_substance', 'edge_type': 'similar_to'}]}}}}}, 'tags': ['new_changes']}}, '/graph/summary': {'get': {'description': 'Returns summary of the graph', 'operationId': 'get_graph_summarynew_changes', 'summary': 'schema summary of the the graph', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance:molecular_entity:named_thing': {'gene:biological_entity:named_thing': {'directly_interacts_with': 20}}}}}}}}, 'tags': ['new_changes']}}, '/overlay': {'post': {'description': 'Given a reasonerAPI graph add support edges for any nodes linked in result bindings.', 'operationId': 'post_reasoner_api_graph_overlaynew_changes', 'summary': 'Overlay results with available connections between each node.', 'requestBody': {'description': 'Reasoner api graph.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}, {'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'support_edge_id', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}, {'kg_id': 'support_edge_id', 'q_id': 's_0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}}}, 'tags': ['new_changes']}}}}
[automat.core.get_swagger_paths] - 2020-09-18 15:12:01,517 core.py 206 DEBUG: {'openapi': '3.0.2', 'info': {'title': 'PLATER - new_changes_3232', 'vesion': '2.0'}, 'paths': {'/about': {'get': {'description': 'Returns a json describing dataset.', 'summary': 'Json about dataset.', 'operationId': 'about_dataset', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'dataset-version': 'N/A', 'dataset-description': 'Add dataset version here', 'code-used': 'link to repo', 'date-generated': 'N/A'}}}}}}, 'tags': ['new_changes_3232']}}, '/{node_type}/{curie}': {'get': {'description': 'Returns `node` matching `curie`.', 'summary': 'Find `node` by `curie`.', 'operationId': 'get_source_node_by_curienew_changes_3232', 'parameters': [{'name': 'node_type', 'in': 'path', 'description': 'Type of the to look for.', 'required': True, 'schema': {'type': 'string', 'enum': ['organismal_entity', 'macromolecular_machine', 'biological_process', 'cellular_component', 'biological_entity', 'gene_or_gene_product', 'phenotypic_feature', 'clinical_modifier', 'disease_or_phenotypic_feature', 'named_thing', 'molecular_entity', 'disease', 'genomic_entity', 'biolink:NamedThing', 'biological_process_or_activity', 'clinical_trial', 'chemical_substance', 'anatomical_entity', 'molecular_activity', 'gene', 'cell', 'information_content_entity']}}, {'name': 'curie', 'in': 'path', 'description': 'The curie of `source_node` that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'id': 'PATO:0000070', 'category': ['named_thing']}]}}}}}, 'tags': ['new_changes_3232']}}, '/{source_node_type}/{target_node_type}/{curie}': {'get': {'description': 'Returns one hop paths from `source_node_type`  with `curie` to `target node type`.', 'summary': 'Get one hop results from source type to target type. Note: Please refer to `graph/schema` endpoint output to determine what target goes with a source', 'operationId': 'get_one_hop_source_node_type_to_target_node_typenew_changes_3232', 'parameters': [{'name': 'source_node_type', 'in': 'path', 'description': 'The node type of source node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['organismal_entity', 'macromolecular_machine', 'biological_process', 'cellular_component', 'biological_entity', 'gene_or_gene_product', 'phenotypic_feature', 'clinical_modifier', 'disease_or_phenotypic_feature', 'named_thing', 'molecular_entity', 'disease', 'genomic_entity', 'biolink:NamedThing', 'biological_process_or_activity', 'clinical_trial', 'chemical_substance', 'anatomical_entity', 'molecular_activity', 'gene', 'cell', 'information_content_entity']}}, {'name': 'target_node_type', 'in': 'path', 'description': 'The node type of target node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['organismal_entity', 'macromolecular_machine', 'biological_process', 'cellular_component', 'biological_entity', 'gene_or_gene_product', 'phenotypic_feature', 'clinical_modifier', 'disease_or_phenotypic_feature', 'named_thing', 'molecular_entity', 'disease', 'genomic_entity', 'biolink:NamedThing', 'biological_process_or_activity', 'clinical_trial', 'chemical_substance', 'anatomical_entity', 'molecular_activity', 'gene', 'cell', 'information_content_entity']}}, {'name': 'curie', 'in': 'path', 'description': 'The `curie` for the `source_node_type` that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'id': 'PATO:0000070', 'category': ['named_thing']}, {'predicate': 'OBO:RO_0002434', 'subject': 'PATO:0000070', 'provided_by': ['renci.bdc.semanticsearch.annotator'], 'id': '9af7d330f6935a5ef6a0068ff928ba0b', 'category': ['association'], 'edge_label': 'association', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type': 'OBAN:association', 'object': 'TOPMED.TAG:1'}, {'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}]]}}}}}, 'tags': ['new_changes_3232']}}, '/graph/schema': {'get': {'deprecated': True, 'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_graph_schemanew_changes_3232', 'summary': 'We recommend using `predicates` endpoint, as support for this will be discontinued.', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': ['new_changes_3232']}}, '/predicates': {'get': {'tags': ['translator', 'new_changes_3232'], 'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_predicatesnew_changes_3232', 'summary': 'Get the list of available predicates.', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}}}, '/cypher': {'post': {'summary': 'Run cypher query.', 'description': 'Runs cypher query against the Neo4j instance, and returns an equivalent response expected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).', 'requestBody': {'description': 'Cypher query.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query': 'MATCH (c) return c limit 1'}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'results': [{'columns': ['c'], 'data': [{'row': [{'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}], 'meta': [{'id': 0, 'type': 'node', 'deleted': False}]}]}], 'errors': []}}}}}}, 'tags': ['new_changes_3232']}}, '/reasonerapi': {'get': {'deprecated': True, 'description': 'Returns a list of question templates that can be used to query this plater instance/', 'operationId': 'get_question_templatesnew_changes_3232', 'summary': 'Get list of one hop TrAPI questions possible to ask.(Please use `query` endpoint as support might discontinue).', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}]}}}}}, 'tags': ['new_changes_3232']}, 'post': {'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_questionnew_changes_3232', 'summary': 'post a TrAPI query graph. (Please use `query` endpoint as support might discontinue).', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}, 'tags': ['new_changes_3232']}}, '/query': {'post': {'tags': ['translator', 'new_changes_3232'], 'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_question_querynew_changes_3232', 'summary': 'Post a TrAPI query graph and get back answers.', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}}}, '/simple_spec': {'get': {'description': 'Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.', 'operationId': 'get_simple_specnew_changes_3232', 'summary': 'query about predicates available by sending in a curie.', 'parameters': [{'name': 'source', 'in': 'query', 'description': 'The curie of source that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'CHEBI:33216'}}, {'name': 'target', 'in': 'query', 'description': 'The curie of target that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'NCBIGene:1'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'source_type': 'chemical_substance', 'target_type': 'chemical_substance', 'edge_type': 'similar_to'}]}}}}}, 'tags': ['new_changes_3232']}}, '/graph/summary': {'get': {'description': 'Returns summary of the graph', 'operationId': 'get_graph_summarynew_changes_3232', 'summary': 'schema summary of the the graph', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance:molecular_entity:named_thing': {'gene:biological_entity:named_thing': {'directly_interacts_with': 20}}}}}}}}, 'tags': ['new_changes_3232']}}, '/overlay': {'post': {'description': 'Given a reasonerAPI graph add support edges for any nodes linked in result bindings.', 'operationId': 'post_reasoner_api_graph_overlaynew_changes_3232', 'summary': 'Overlay results with available connections between each node.', 'requestBody': {'description': 'Reasoner api graph.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}, {'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'support_edge_id', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}, {'kg_id': 'support_edge_id', 'q_id': 's_0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}}}, 'tags': ['new_changes_3232']}}}}
[automat.core.handle_request] - 2020-09-18 15:12:01,644 core.py 124 DEBUG: ['favicon.ico']
[automat.core.handle_request] - 2020-09-18 15:12:13,013 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:12:15,891 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:12:43,798 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:13:08,115 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:13:08,924 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:13:38,631 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:13:39,440 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:13:49,375 core.py 124 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-09-18 15:13:49,376 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.get_swagger_paths] - 2020-09-18 15:13:51,671 core.py 206 DEBUG: {'openapi': '3.0.2', 'info': {'title': 'PLATER - new_changes_3232', 'vesion': '2.0'}, 'paths': {'/about': {'get': {'description': 'Returns a json describing dataset.', 'summary': 'Json about dataset.', 'operationId': 'about_datasetnew_changes_3232', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'dataset-version': 'N/A', 'dataset-description': 'Add dataset version here', 'code-used': 'link to repo', 'date-generated': 'N/A'}}}}}}, 'tags': ['new_changes_3232']}}, '/{node_type}/{curie}': {'get': {'description': 'Returns `node` matching `curie`.', 'summary': 'Find `node` by `curie`.', 'operationId': 'get_source_node_by_curienew_changes_3232', 'parameters': [{'name': 'node_type', 'in': 'path', 'description': 'Type of the to look for.', 'required': True, 'schema': {'type': 'string', 'enum': ['macromolecular_machine', 'disease_or_phenotypic_feature', 'cellular_component', 'gene_or_gene_product', 'biological_process_or_activity', 'molecular_entity', 'biological_process', 'biological_entity', 'anatomical_entity', 'clinical_trial', 'biolink:NamedThing', 'clinical_modifier', 'information_content_entity', 'organismal_entity', 'chemical_substance', 'gene', 'phenotypic_feature', 'molecular_activity', 'disease', 'named_thing', 'cell', 'genomic_entity']}}, {'name': 'curie', 'in': 'path', 'description': 'The curie of `source_node` that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'id': 'PATO:0000070', 'category': ['named_thing']}]}}}}}, 'tags': ['new_changes_3232']}}, '/{source_node_type}/{target_node_type}/{curie}': {'get': {'description': 'Returns one hop paths from `source_node_type`  with `curie` to `target node type`.', 'summary': 'Get one hop results from source type to target type. Note: Please refer to `graph/schema` endpoint output to determine what target goes with a source', 'operationId': 'get_one_hop_source_node_type_to_target_node_typenew_changes_3232', 'parameters': [{'name': 'source_node_type', 'in': 'path', 'description': 'The node type of source node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['macromolecular_machine', 'disease_or_phenotypic_feature', 'cellular_component', 'gene_or_gene_product', 'biological_process_or_activity', 'molecular_entity', 'biological_process', 'biological_entity', 'anatomical_entity', 'clinical_trial', 'biolink:NamedThing', 'clinical_modifier', 'information_content_entity', 'organismal_entity', 'chemical_substance', 'gene', 'phenotypic_feature', 'molecular_activity', 'disease', 'named_thing', 'cell', 'genomic_entity']}}, {'name': 'target_node_type', 'in': 'path', 'description': 'The node type of target node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['macromolecular_machine', 'disease_or_phenotypic_feature', 'cellular_component', 'gene_or_gene_product', 'biological_process_or_activity', 'molecular_entity', 'biological_process', 'biological_entity', 'anatomical_entity', 'clinical_trial', 'biolink:NamedThing', 'clinical_modifier', 'information_content_entity', 'organismal_entity', 'chemical_substance', 'gene', 'phenotypic_feature', 'molecular_activity', 'disease', 'named_thing', 'cell', 'genomic_entity']}}, {'name': 'curie', 'in': 'path', 'description': 'The `curie` for the `source_node_type` that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'id': 'PATO:0000070', 'category': ['named_thing']}, {'predicate': 'OBO:RO_0002434', 'subject': 'PATO:0000070', 'provided_by': ['renci.bdc.semanticsearch.annotator'], 'id': '9af7d330f6935a5ef6a0068ff928ba0b', 'category': ['association'], 'edge_label': 'association', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type': 'OBAN:association', 'object': 'TOPMED.TAG:1'}, {'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}]]}}}}}, 'tags': ['new_changes_3232']}}, '/graph/schema': {'get': {'deprecated': True, 'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_graph_schemanew_changes_3232', 'summary': 'We recommend using `predicates` endpoint, as support for this will be discontinued.', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': ['new_changes_3232']}}, '/predicates': {'get': {'tags': ['translator', 'new_changes_3232'], 'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_predicatesnew_changes_3232', 'summary': 'Get the list of available predicates.', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}}}, '/cypher': {'post': {'summary': 'Run cypher query.', 'description': 'Runs cypher query against the Neo4j instance, and returns an equivalent response expected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).', 'requestBody': {'description': 'Cypher query.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query': 'MATCH (c) return c limit 1'}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'results': [{'columns': ['c'], 'data': [{'row': [{'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}], 'meta': [{'id': 0, 'type': 'node', 'deleted': False}]}]}], 'errors': []}}}}}}, 'tags': ['new_changes_3232']}}, '/reasonerapi': {'get': {'deprecated': True, 'description': 'Returns a list of question templates that can be used to query this plater instance/', 'operationId': 'get_question_templatesnew_changes_3232', 'summary': 'Get list of one hop TrAPI questions possible to ask.(Please use `query` endpoint as support might discontinue).', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}]}}}}}, 'tags': ['new_changes_3232']}, 'post': {'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_questionnew_changes_3232', 'summary': 'post a TrAPI query graph. (Please use `query` endpoint as support might discontinue).', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}, 'tags': ['new_changes_3232']}}, '/query': {'post': {'tags': ['translator', 'new_changes_3232'], 'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_question_querynew_changes_3232', 'summary': 'Post a TrAPI query graph and get back answers.', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}}}, '/simple_spec': {'get': {'description': 'Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.', 'operationId': 'get_simple_specnew_changes_3232', 'summary': 'query about predicates available by sending in a curie.', 'parameters': [{'name': 'source', 'in': 'query', 'description': 'The curie of source that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'CHEBI:33216'}}, {'name': 'target', 'in': 'query', 'description': 'The curie of target that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'NCBIGene:1'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'source_type': 'chemical_substance', 'target_type': 'chemical_substance', 'edge_type': 'similar_to'}]}}}}}, 'tags': ['new_changes_3232']}}, '/graph/summary': {'get': {'description': 'Returns summary of the graph', 'operationId': 'get_graph_summarynew_changes_3232', 'summary': 'schema summary of the the graph', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance:molecular_entity:named_thing': {'gene:biological_entity:named_thing': {'directly_interacts_with': 20}}}}}}}}, 'tags': ['new_changes_3232']}}, '/overlay': {'post': {'description': 'Given a reasonerAPI graph add support edges for any nodes linked in result bindings.', 'operationId': 'post_reasoner_api_graph_overlaynew_changes_3232', 'summary': 'Overlay results with available connections between each node.', 'requestBody': {'description': 'Reasoner api graph.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}, {'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'support_edge_id', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}, {'kg_id': 'support_edge_id', 'q_id': 's_0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}}}, 'tags': ['new_changes_3232']}}}}
[automat.core.get_swagger_paths] - 2020-09-18 15:13:51,687 core.py 206 DEBUG: {'openapi': '3.0.2', 'info': {'title': 'PLATER - new_changes', 'vesion': '2.0'}, 'paths': {'/about': {'get': {'description': 'Returns a json describing dataset.', 'summary': 'Json about dataset.', 'operationId': 'about_datasetnew_changes', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'dataset-version': 'N/A', 'dataset-description': 'Add dataset version here', 'code-used': 'link to repo', 'date-generated': 'N/A'}}}}}}, 'tags': ['new_changes']}}, '/{node_type}/{curie}': {'get': {'description': 'Returns `node` matching `curie`.', 'summary': 'Find `node` by `curie`.', 'operationId': 'get_source_node_by_curienew_changes', 'parameters': [{'name': 'node_type', 'in': 'path', 'description': 'Type of the to look for.', 'required': True, 'schema': {'type': 'string', 'enum': ['biolink:NamedThing', 'biological_process_or_activity', 'macromolecular_machine', 'gene_or_gene_product', 'cellular_component', 'molecular_entity', 'disease_or_phenotypic_feature', 'biological_entity', 'biological_process', 'clinical_modifier', 'genomic_entity', 'cell', 'organismal_entity', 'chemical_substance', 'disease', 'clinical_trial', 'named_thing', 'gene', 'phenotypic_feature', 'anatomical_entity', 'molecular_activity', 'information_content_entity']}}, {'name': 'curie', 'in': 'path', 'description': 'The curie of `source_node` that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'id': 'PATO:0000070', 'category': ['named_thing']}]}}}}}, 'tags': ['new_changes']}}, '/{source_node_type}/{target_node_type}/{curie}': {'get': {'description': 'Returns one hop paths from `source_node_type`  with `curie` to `target node type`.', 'summary': 'Get one hop results from source type to target type. Note: Please refer to `graph/schema` endpoint output to determine what target goes with a source', 'operationId': 'get_one_hop_source_node_type_to_target_node_typenew_changes', 'parameters': [{'name': 'source_node_type', 'in': 'path', 'description': 'The node type of source node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['biolink:NamedThing', 'biological_process_or_activity', 'macromolecular_machine', 'gene_or_gene_product', 'cellular_component', 'molecular_entity', 'disease_or_phenotypic_feature', 'biological_entity', 'biological_process', 'clinical_modifier', 'genomic_entity', 'cell', 'organismal_entity', 'chemical_substance', 'disease', 'clinical_trial', 'named_thing', 'gene', 'phenotypic_feature', 'anatomical_entity', 'molecular_activity', 'information_content_entity']}}, {'name': 'target_node_type', 'in': 'path', 'description': 'The node type of target node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['biolink:NamedThing', 'biological_process_or_activity', 'macromolecular_machine', 'gene_or_gene_product', 'cellular_component', 'molecular_entity', 'disease_or_phenotypic_feature', 'biological_entity', 'biological_process', 'clinical_modifier', 'genomic_entity', 'cell', 'organismal_entity', 'chemical_substance', 'disease', 'clinical_trial', 'named_thing', 'gene', 'phenotypic_feature', 'anatomical_entity', 'molecular_activity', 'information_content_entity']}}, {'name': 'curie', 'in': 'path', 'description': 'The `curie` for the `source_node_type` that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'id': 'PATO:0000070', 'category': ['named_thing']}, {'predicate': 'OBO:RO_0002434', 'subject': 'PATO:0000070', 'provided_by': ['renci.bdc.semanticsearch.annotator'], 'id': '9af7d330f6935a5ef6a0068ff928ba0b', 'category': ['association'], 'edge_label': 'association', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type': 'OBAN:association', 'object': 'TOPMED.TAG:1'}, {'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}]]}}}}}, 'tags': ['new_changes']}}, '/graph/schema': {'get': {'deprecated': True, 'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_graph_schemanew_changes', 'summary': 'We recommend using `predicates` endpoint, as support for this will be discontinued.', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': ['new_changes']}}, '/predicates': {'get': {'tags': ['translator', 'new_changes'], 'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_predicatesnew_changes', 'summary': 'Get the list of available predicates.', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}}}, '/cypher': {'post': {'summary': 'Run cypher query.', 'description': 'Runs cypher query against the Neo4j instance, and returns an equivalent response expected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).', 'requestBody': {'description': 'Cypher query.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query': 'MATCH (c) return c limit 1'}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'results': [{'columns': ['c'], 'data': [{'row': [{'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}], 'meta': [{'id': 0, 'type': 'node', 'deleted': False}]}]}], 'errors': []}}}}}}, 'tags': ['new_changes']}}, '/reasonerapi': {'get': {'deprecated': True, 'description': 'Returns a list of question templates that can be used to query this plater instance/', 'operationId': 'get_question_templatesnew_changes', 'summary': 'Get list of one hop TrAPI questions possible to ask.(Please use `query` endpoint as support might discontinue).', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}]}}}}}, 'tags': ['new_changes']}, 'post': {'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_questionnew_changes', 'summary': 'post a TrAPI query graph. (Please use `query` endpoint as support might discontinue).', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}, 'tags': ['new_changes']}}, '/query': {'post': {'tags': ['translator', 'new_changes'], 'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_question_querynew_changes', 'summary': 'Post a TrAPI query graph and get back answers.', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}}}, '/simple_spec': {'get': {'description': 'Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.', 'operationId': 'get_simple_specnew_changes', 'summary': 'query about predicates available by sending in a curie.', 'parameters': [{'name': 'source', 'in': 'query', 'description': 'The curie of source that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'CHEBI:33216'}}, {'name': 'target', 'in': 'query', 'description': 'The curie of target that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'NCBIGene:1'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'source_type': 'chemical_substance', 'target_type': 'chemical_substance', 'edge_type': 'similar_to'}]}}}}}, 'tags': ['new_changes']}}, '/graph/summary': {'get': {'description': 'Returns summary of the graph', 'operationId': 'get_graph_summarynew_changes', 'summary': 'schema summary of the the graph', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance:molecular_entity:named_thing': {'gene:biological_entity:named_thing': {'directly_interacts_with': 20}}}}}}}}, 'tags': ['new_changes']}}, '/overlay': {'post': {'description': 'Given a reasonerAPI graph add support edges for any nodes linked in result bindings.', 'operationId': 'post_reasoner_api_graph_overlaynew_changes', 'summary': 'Overlay results with available connections between each node.', 'requestBody': {'description': 'Reasoner api graph.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}, {'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'support_edge_id', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}, {'kg_id': 'support_edge_id', 'q_id': 's_0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}}}, 'tags': ['new_changes']}}}}
[automat.core.handle_request] - 2020-09-18 15:13:51,819 core.py 124 DEBUG: ['favicon.ico']
[automat.core.handle_request] - 2020-09-18 15:13:53,455 core.py 124 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-09-18 15:13:53,455 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.get_swagger_paths] - 2020-09-18 15:13:55,697 core.py 206 DEBUG: {'openapi': '3.0.2', 'info': {'title': 'PLATER - new_changes', 'vesion': '2.0'}, 'paths': {'/about': {'get': {'description': 'Returns a json describing dataset.', 'summary': 'Json about dataset.', 'operationId': 'about_datasetnew_changes', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'dataset-version': 'N/A', 'dataset-description': 'Add dataset version here', 'code-used': 'link to repo', 'date-generated': 'N/A'}}}}}}, 'tags': ['new_changes']}}, '/{node_type}/{curie}': {'get': {'description': 'Returns `node` matching `curie`.', 'summary': 'Find `node` by `curie`.', 'operationId': 'get_source_node_by_curienew_changes', 'parameters': [{'name': 'node_type', 'in': 'path', 'description': 'Type of the to look for.', 'required': True, 'schema': {'type': 'string', 'enum': ['biolink:NamedThing', 'biological_process_or_activity', 'macromolecular_machine', 'gene_or_gene_product', 'cellular_component', 'molecular_entity', 'disease_or_phenotypic_feature', 'biological_entity', 'biological_process', 'clinical_modifier', 'genomic_entity', 'cell', 'organismal_entity', 'chemical_substance', 'disease', 'clinical_trial', 'named_thing', 'gene', 'phenotypic_feature', 'anatomical_entity', 'molecular_activity', 'information_content_entity']}}, {'name': 'curie', 'in': 'path', 'description': 'The curie of `source_node` that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'id': 'PATO:0000070', 'category': ['named_thing']}]}}}}}, 'tags': ['new_changes']}}, '/{source_node_type}/{target_node_type}/{curie}': {'get': {'description': 'Returns one hop paths from `source_node_type`  with `curie` to `target node type`.', 'summary': 'Get one hop results from source type to target type. Note: Please refer to `graph/schema` endpoint output to determine what target goes with a source', 'operationId': 'get_one_hop_source_node_type_to_target_node_typenew_changes', 'parameters': [{'name': 'source_node_type', 'in': 'path', 'description': 'The node type of source node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['biolink:NamedThing', 'biological_process_or_activity', 'macromolecular_machine', 'gene_or_gene_product', 'cellular_component', 'molecular_entity', 'disease_or_phenotypic_feature', 'biological_entity', 'biological_process', 'clinical_modifier', 'genomic_entity', 'cell', 'organismal_entity', 'chemical_substance', 'disease', 'clinical_trial', 'named_thing', 'gene', 'phenotypic_feature', 'anatomical_entity', 'molecular_activity', 'information_content_entity']}}, {'name': 'target_node_type', 'in': 'path', 'description': 'The node type of target node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['biolink:NamedThing', 'biological_process_or_activity', 'macromolecular_machine', 'gene_or_gene_product', 'cellular_component', 'molecular_entity', 'disease_or_phenotypic_feature', 'biological_entity', 'biological_process', 'clinical_modifier', 'genomic_entity', 'cell', 'organismal_entity', 'chemical_substance', 'disease', 'clinical_trial', 'named_thing', 'gene', 'phenotypic_feature', 'anatomical_entity', 'molecular_activity', 'information_content_entity']}}, {'name': 'curie', 'in': 'path', 'description': 'The `curie` for the `source_node_type` that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'id': 'PATO:0000070', 'category': ['named_thing']}, {'predicate': 'OBO:RO_0002434', 'subject': 'PATO:0000070', 'provided_by': ['renci.bdc.semanticsearch.annotator'], 'id': '9af7d330f6935a5ef6a0068ff928ba0b', 'category': ['association'], 'edge_label': 'association', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type': 'OBAN:association', 'object': 'TOPMED.TAG:1'}, {'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}]]}}}}}, 'tags': ['new_changes']}}, '/graph/schema': {'get': {'deprecated': True, 'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_graph_schemanew_changes', 'summary': 'We recommend using `predicates` endpoint, as support for this will be discontinued.', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': ['new_changes']}}, '/predicates': {'get': {'tags': ['translator', 'new_changes'], 'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_predicatesnew_changes', 'summary': 'Get the list of available predicates.', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}}}, '/cypher': {'post': {'summary': 'Run cypher query.', 'description': 'Runs cypher query against the Neo4j instance, and returns an equivalent response expected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).', 'requestBody': {'description': 'Cypher query.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query': 'MATCH (c) return c limit 1'}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'results': [{'columns': ['c'], 'data': [{'row': [{'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}], 'meta': [{'id': 0, 'type': 'node', 'deleted': False}]}]}], 'errors': []}}}}}}, 'tags': ['new_changes']}}, '/reasonerapi': {'get': {'deprecated': True, 'description': 'Returns a list of question templates that can be used to query this plater instance/', 'operationId': 'get_question_templatesnew_changes', 'summary': 'Get list of one hop TrAPI questions possible to ask.(Please use `query` endpoint as support might discontinue).', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}]}}}}}, 'tags': ['new_changes']}, 'post': {'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_questionnew_changes', 'summary': 'post a TrAPI query graph. (Please use `query` endpoint as support might discontinue).', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}, 'tags': ['new_changes']}}, '/query': {'post': {'tags': ['translator', 'new_changes'], 'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_question_querynew_changes', 'summary': 'Post a TrAPI query graph and get back answers.', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}}}, '/simple_spec': {'get': {'description': 'Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.', 'operationId': 'get_simple_specnew_changes', 'summary': 'query about predicates available by sending in a curie.', 'parameters': [{'name': 'source', 'in': 'query', 'description': 'The curie of source that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'CHEBI:33216'}}, {'name': 'target', 'in': 'query', 'description': 'The curie of target that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'NCBIGene:1'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'source_type': 'chemical_substance', 'target_type': 'chemical_substance', 'edge_type': 'similar_to'}]}}}}}, 'tags': ['new_changes']}}, '/graph/summary': {'get': {'description': 'Returns summary of the graph', 'operationId': 'get_graph_summarynew_changes', 'summary': 'schema summary of the the graph', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance:molecular_entity:named_thing': {'gene:biological_entity:named_thing': {'directly_interacts_with': 20}}}}}}}}, 'tags': ['new_changes']}}, '/overlay': {'post': {'description': 'Given a reasonerAPI graph add support edges for any nodes linked in result bindings.', 'operationId': 'post_reasoner_api_graph_overlaynew_changes', 'summary': 'Overlay results with available connections between each node.', 'requestBody': {'description': 'Reasoner api graph.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}, {'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'support_edge_id', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}, {'kg_id': 'support_edge_id', 'q_id': 's_0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}}}, 'tags': ['new_changes']}}}}
[automat.core.get_swagger_paths] - 2020-09-18 15:13:55,709 core.py 206 DEBUG: {'openapi': '3.0.2', 'info': {'title': 'PLATER - new_changes_3232', 'vesion': '2.0'}, 'paths': {'/about': {'get': {'description': 'Returns a json describing dataset.', 'summary': 'Json about dataset.', 'operationId': 'about_datasetnew_changes_3232', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'dataset-version': 'N/A', 'dataset-description': 'Add dataset version here', 'code-used': 'link to repo', 'date-generated': 'N/A'}}}}}}, 'tags': ['new_changes_3232']}}, '/{node_type}/{curie}': {'get': {'description': 'Returns `node` matching `curie`.', 'summary': 'Find `node` by `curie`.', 'operationId': 'get_source_node_by_curienew_changes_3232', 'parameters': [{'name': 'node_type', 'in': 'path', 'description': 'Type of the to look for.', 'required': True, 'schema': {'type': 'string', 'enum': ['macromolecular_machine', 'disease_or_phenotypic_feature', 'cellular_component', 'gene_or_gene_product', 'biological_process_or_activity', 'molecular_entity', 'biological_process', 'biological_entity', 'anatomical_entity', 'clinical_trial', 'biolink:NamedThing', 'clinical_modifier', 'information_content_entity', 'organismal_entity', 'chemical_substance', 'gene', 'phenotypic_feature', 'molecular_activity', 'disease', 'named_thing', 'cell', 'genomic_entity']}}, {'name': 'curie', 'in': 'path', 'description': 'The curie of `source_node` that needs to be fetched.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'id': 'PATO:0000070', 'category': ['named_thing']}]}}}}}, 'tags': ['new_changes_3232']}}, '/{source_node_type}/{target_node_type}/{curie}': {'get': {'description': 'Returns one hop paths from `source_node_type`  with `curie` to `target node type`.', 'summary': 'Get one hop results from source type to target type. Note: Please refer to `graph/schema` endpoint output to determine what target goes with a source', 'operationId': 'get_one_hop_source_node_type_to_target_node_typenew_changes_3232', 'parameters': [{'name': 'source_node_type', 'in': 'path', 'description': 'The node type of source node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['macromolecular_machine', 'disease_or_phenotypic_feature', 'cellular_component', 'gene_or_gene_product', 'biological_process_or_activity', 'molecular_entity', 'biological_process', 'biological_entity', 'anatomical_entity', 'clinical_trial', 'biolink:NamedThing', 'clinical_modifier', 'information_content_entity', 'organismal_entity', 'chemical_substance', 'gene', 'phenotypic_feature', 'molecular_activity', 'disease', 'named_thing', 'cell', 'genomic_entity']}}, {'name': 'target_node_type', 'in': 'path', 'description': 'The node type of target node in the path.', 'required': True, 'schema': {'type': 'string', 'enum': ['macromolecular_machine', 'disease_or_phenotypic_feature', 'cellular_component', 'gene_or_gene_product', 'biological_process_or_activity', 'molecular_entity', 'biological_process', 'biological_entity', 'anatomical_entity', 'clinical_trial', 'biolink:NamedThing', 'clinical_modifier', 'information_content_entity', 'organismal_entity', 'chemical_substance', 'gene', 'phenotypic_feature', 'molecular_activity', 'disease', 'named_thing', 'cell', 'genomic_entity']}}, {'name': 'curie', 'in': 'path', 'description': 'The `curie` for the `source_node_type` that path starts from.', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [[{'id': 'PATO:0000070', 'category': ['named_thing']}, {'predicate': 'OBO:RO_0002434', 'subject': 'PATO:0000070', 'provided_by': ['renci.bdc.semanticsearch.annotator'], 'id': '9af7d330f6935a5ef6a0068ff928ba0b', 'category': ['association'], 'edge_label': 'association', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type': 'OBAN:association', 'object': 'TOPMED.TAG:1'}, {'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}]]}}}}}, 'tags': ['new_changes_3232']}}, '/graph/schema': {'get': {'deprecated': True, 'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_graph_schemanew_changes_3232', 'summary': 'We recommend using `predicates` endpoint, as support for this will be discontinued.', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}, 'tags': ['new_changes_3232']}}, '/predicates': {'get': {'tags': ['translator', 'new_changes_3232'], 'description': 'Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.', 'operationId': 'get_predicatesnew_changes_3232', 'summary': 'Get the list of available predicates.', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance': {'gene': ['directly_interacts_with']}}}}}}}}}, '/cypher': {'post': {'summary': 'Run cypher query.', 'description': 'Runs cypher query against the Neo4j instance, and returns an equivalent response expected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).', 'requestBody': {'description': 'Cypher query.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query': 'MATCH (c) return c limit 1'}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'results': [{'columns': ['c'], 'data': [{'row': [{'instructions': 'Include variables that represent a measurement of the concentration of LDL-cholesterol in the blood. Include variables from all time points and all repeated measures at each time point, e.g. LDL-cholesterol measured at multiple exams, and LDL-cholesterol measured multiple times at the same exam. Include all instances of duplicated variables, e.g. LDL-cholesterol variables included in multiple datasets. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables in all measurement units available, e.g. LDL-cholesterol in mg/dL and LDL-cholesterol in mmol/L. Include variables that are measured directly (e.g. by NMR) and those estimated via the Friedewald (or other) equation. Include both corrected/adjusted and uncorrected/unadjusted measures. Include variables for which LDL-cholesterol measurement was made in whole blood, serum, or plasma.  Include variables that represent both fasting and non-fasting measurement of LDL-cholesterol. Do not include variables representing VLDL or LDL-P measurements. Do not include variables representing heavy LDL, light LDL, or other subfractions of total LDL-cholesterol.', 'name': 'LDL in blood', 'description': 'Quantitative measure of low-density lipoprotein (LDL) cholesterol concentration in blood', 'pk': '1', 'id': 'TOPMED.TAG:1', 'category': ['information_content_entity']}], 'meta': [{'id': 0, 'type': 'node', 'deleted': False}]}]}], 'errors': []}}}}}}, 'tags': ['new_changes_3232']}}, '/reasonerapi': {'get': {'deprecated': True, 'description': 'Returns a list of question templates that can be used to query this plater instance/', 'operationId': 'get_question_templatesnew_changes_3232', 'summary': 'Get list of one hop TrAPI questions possible to ask.(Please use `query` endpoint as support might discontinue).', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}]}}}}}, 'tags': ['new_changes_3232']}, 'post': {'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_questionnew_changes_3232', 'summary': 'post a TrAPI query graph. (Please use `query` endpoint as support might discontinue).', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}, 'tags': ['new_changes_3232']}}, '/query': {'post': {'tags': ['translator', 'new_changes_3232'], 'description': 'Given a question graph return question graph plus answers.', 'operationId': 'post_question_querynew_changes_3232', 'summary': 'Post a TrAPI query graph and get back answers.', 'requestBody': {'description': 'Reasoner api question.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'gene'}, {'id': 'n2', 'type': 'chemical_substance'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2', 'type': 'is_affected_by'}]}, 'results': [{'edge_bindings': [], 'node_bindings': []}], 'knowledge_graph': {'nodes': [{'id': "n1's DB ID", 'name': 'n1 has name'}, {'id': "n2's DB ID", 'name': 'n2 has name'}], 'edges': [{'id': "e0's DB ID", 'name': 'e0 has name'}]}}}}}}}}}, '/simple_spec': {'get': {'description': 'Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.', 'operationId': 'get_simple_specnew_changes_3232', 'summary': 'query about predicates available by sending in a curie.', 'parameters': [{'name': 'source', 'in': 'query', 'description': 'The curie of source that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'CHEBI:33216'}}, {'name': 'target', 'in': 'query', 'description': 'The curie of target that needs to be fetched.', 'required': False, 'schema': {'type': 'string', 'example': 'NCBIGene:1'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': [{'source_type': 'chemical_substance', 'target_type': 'chemical_substance', 'edge_type': 'similar_to'}]}}}}}, 'tags': ['new_changes_3232']}}, '/graph/summary': {'get': {'description': 'Returns summary of the graph', 'operationId': 'get_graph_summarynew_changes_3232', 'summary': 'schema summary of the the graph', 'parameters': [], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'chemical_substance:molecular_entity:named_thing': {'gene:biological_entity:named_thing': {'directly_interacts_with': 20}}}}}}}}, 'tags': ['new_changes_3232']}}, '/overlay': {'post': {'description': 'Given a reasonerAPI graph add support edges for any nodes linked in result bindings.', 'operationId': 'post_reasoner_api_graph_overlaynew_changes_3232', 'summary': 'Overlay results with available connections between each node.', 'requestBody': {'description': 'Reasoner api graph.', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}, 'required': True}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'example': {'query_graph': {'nodes': [{'id': 'n1', 'type': 'named_thing', 'curie': 'NCBIGene:93034'}, {'id': 'n2', 'type': 'named_thing'}], 'edges': [{'id': 'e0', 'source_id': 'n1', 'target_id': 'n2'}]}, 'knowledge_graph': {'nodes': [{'synonyms': [], 'name': 'NT5C1B', 'id': 'NCBIGene:93034', 'equivalent_identifiers': ['NCBIGene:93034', 'HGNC:17818', 'UniProtKB:Q96P26', 'ENSEMBL:ENSG00000185013', 'NCBIGene:93034', 'IUPHAR:1235'], 'type': ['named_thing', 'biological_entity', 'molecular_entity', 'gene', 'gene_or_gene_product', 'macromolecular_machine', 'genomic_entity']}, {'name': '', 'id': 'CHEBI:14648', 'equivalent_identifiers': ['PUBCHEM:14181', 'CHEBI:14648', 'INCHIKEY:DAYLJWODMCOQEW-TURQNECASA-O', 'HMDB:HMDB0059645'], 'type': ['named_thing', 'biological_entity', 'chemical_substance', 'molecular_entity']}], 'edges': [{'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'b80d', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}, {'predicate_id': 'RO:0002434', 'relation_label': 'interacts with', 'edge_source': 'hmdb.enzyme_to_metabolite', 'target_id': 'NCBIGene:93034', 'source_id': 'CHEBI:14648', 'id': 'support_edge_id', 'type': 'interacts_with', 'source_database': 'hmdb', 'relation': 'RO:0002434', 'publications': []}]}, 'results': [{'edge_bindings': [{'kg_id': 'b80d', 'qg_id': 'e0'}, {'kg_id': 'support_edge_id', 'q_id': 's_0'}], 'node_bindings': [{'kg_id': 'NCBIGene:93034', 'qg_id': 'n1'}, {'kg_id': 'CHEBI:14648', 'qg_id': 'n2'}]}]}}}}}}, 'tags': ['new_changes_3232']}}}}
[automat.core.handle_request] - 2020-09-18 15:13:55,804 core.py 124 DEBUG: ['favicon.ico']
[automat.core.handle_request] - 2020-09-18 15:14:09,139 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:14:09,946 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:14:39,645 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:14:40,462 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:15:10,149 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:15:10,977 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:15:40,656 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:15:41,486 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:16:11,173 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:16:11,993 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:16:41,679 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:16:42,498 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:17:12,196 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:17:13,004 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:17:42,711 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:17:43,510 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:18:13,225 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:18:14,026 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:18:41,920 core.py 124 DEBUG: []
[automat.core.handle_request] - 2020-09-18 15:18:42,100 core.py 124 DEBUG: ['openapi.yml']
[automat.core.handle_open_api_yaml] - 2020-09-18 15:18:42,100 core.py 39 DEBUG: paths for open_api specs of each server
[automat.core.handle_request] - 2020-09-18 15:18:42,138 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:18:42,147 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:18:43,742 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:18:44,531 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:18:46,148 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:18:46,156 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:18:47,665 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:18:47,673 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:18:50,372 core.py 124 DEBUG: ['new_changes', 'about']
[automat.core.handle_request] - 2020-09-18 15:18:50,372 core.py 151 DEBUG: [0] found entry for backend server new_changes --- localhost:8091
[automat.core.handle_route_to_backend] - 2020-09-18 15:18:50,373 core.py 98 DEBUG: [0] proxing request to http://localhost:8091/about?
[automat.core.handle_request] - 2020-09-18 15:18:56,116 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:18:56,289 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:19:14,263 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:19:15,039 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:19:40,831 core.py 124 DEBUG: ['new_changes', 'biolink:NamedThing', 'NCBIGene:5978']
[automat.core.handle_request] - 2020-09-18 15:19:40,832 core.py 151 DEBUG: [0] found entry for backend server new_changes --- localhost:8091
[automat.core.handle_route_to_backend] - 2020-09-18 15:19:40,832 core.py 98 DEBUG: [0] proxing request to http://localhost:8091/biolink:NamedThing/NCBIGene:5978?
[automat.core.handle_request] - 2020-09-18 15:19:44,785 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:19:45,554 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:19:50,271 core.py 124 DEBUG: ['new_changes', 'named_thing', 'NCBIGene:5978']
[automat.core.handle_request] - 2020-09-18 15:19:50,271 core.py 151 DEBUG: [0] found entry for backend server new_changes --- localhost:8091
[automat.core.handle_route_to_backend] - 2020-09-18 15:19:50,271 core.py 98 DEBUG: [0] proxing request to http://localhost:8091/named_thing/NCBIGene:5978?
[automat.core.handle_request] - 2020-09-18 15:20:02,049 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:20:02,178 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:20:02,202 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:20:02,866 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:20:02,872 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:20:02,904 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:20:05,647 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:20:05,791 core.py 124 DEBUG: ['favicon-32x32.png']
[automat.core.handle_request] - 2020-09-18 15:20:05,816 core.py 124 DEBUG: ['favicon-16x16.png']
[automat.core.handle_request] - 2020-09-18 15:20:15,301 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:20:16,061 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:20:22,733 core.py 124 DEBUG: ['new_changes', 'query']
[automat.core.handle_request] - 2020-09-18 15:20:22,733 core.py 151 DEBUG: [0] found entry for backend server new_changes --- localhost:8091
[automat.core.handle_route_to_backend] - 2020-09-18 15:20:22,734 core.py 98 DEBUG: [0] proxing request to http://localhost:8091/query?
[automat.util.async_client.async_post_json] - 2020-09-18 15:20:24,742 async_client.py 57 ERROR: http://localhost:8091/query? returned 404. {'error': ''}
[automat.core.handle_request] - 2020-09-18 15:20:45,817 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:20:46,576 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:21:16,333 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:21:17,084 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:22:09,055 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:22:09,877 core.py 124 DEBUG: ['heartbeat']
[automat.core.handle_request] - 2020-09-18 15:22:15,614 core.py 124 DEBUG: ['new_changes', 'query']
[automat.core.handle_request] - 2020-09-18 15:22:15,614 core.py 151 DEBUG: [0] found entry for backend server new_changes --- localhost:8091
[automat.core.handle_route_to_backend] - 2020-09-18 15:22:15,614 core.py 98 DEBUG: [0] proxing request to http://localhost:8091/query?
